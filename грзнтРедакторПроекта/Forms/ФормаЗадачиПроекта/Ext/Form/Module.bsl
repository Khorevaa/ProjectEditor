#Область СобытияИКомандыФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	мВалютаУчета = Константы.ВалютаУправленческогоУчета.Получить();
	УИД = Параметры.УИД;
	РодительЗадачиУИД = Параметры.Родитель;
	
	// loza [01.12.15
	пПраваПользователяПоПроекту = Неопределено;
	Если Параметры.Свойство("ПраваПользователяПоПроекту", пПраваПользователяПоПроекту) Тогда
		ПраваПользователяПоПроекту.Загрузить(пПраваПользователяПоПроекту.Выгрузить());
	КонецЕсли;	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "ПроверятьПраваНаТаблицы");
	Если ПроверятьПраваНаТаблицы Тогда
		НастроитьФормуПоПравамПользователя();
	КонецЕсли;	
	// 01.12.15] loza

	Если Параметры.Свойство("Страница") Тогда
		СтраницаПриОткрытии = Параметры.Страница;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если СтраницаПриОткрытии = "Предшественники" Тогда
		Элементы.ГруппаСтраницыСПланами.ТекущаяСтраница = Элементы.СтраницаПредшественники;
	ИначеЕсли СтраницаПриОткрытии = "Доходы" Тогда
		Элементы.ГруппаСтраницыСПланами.ТекущаяСтраница = Элементы.СтраницаДоходы;
	ИначеЕсли СтраницаПриОткрытии = "Расходы" Тогда
		Элементы.ГруппаСтраницыСПланами.ТекущаяСтраница = Элементы.СтраницаРасходы;
	ИначеЕсли СтраницаПриОткрытии = "Роли" Тогда
		Элементы.ГруппаСтраницыСПланами.ТекущаяСтраница = Элементы.СтраницаТрудозатратыРолей;
	ИначеЕсли СтраницаПриОткрытии = "Ресурсы" Тогда
		Элементы.ГруппаСтраницыСПланами.ТекущаяСтраница = Элементы.СтраницаТрудозатратыРесурсов;
	ИначеЕсли СтраницаПриОткрытии = "Материалы" Тогда
		Элементы.ГруппаСтраницыСПланами.ТекущаяСтраница = Элементы.СтраницаМатериалы;
	ИначеЕсли СтраницаПриОткрытии = "ДДС" Тогда
		Элементы.ГруппаСтраницыСПланами.ТекущаяСтраница = Элементы.СтраницаДДС;
	КонецЕсли;
	
	Проект = ВладелецФормы.Проект;
	Для Каждого СтрокаТаблицы ИЗ ВладелецФормы.ТаблицаПроектаКопия Цикл
		Если СтрокаТаблицы.УИД = УИД Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, СтрокаТаблицы, , "ТаблицаПредшественники");
			НаименованиеЗадачи = СтрокаТаблицы.НаименованиеЗадачи;
			
			Для Каждого СтрокаПредшественник ИЗ СтрокаТаблицы.ТаблицаПредшественники Цикл
				СтрокаСвязи = ТаблицаСвязей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСвязи, СтрокаПредшественник);
			КонецЦикла;
			
			Для Каждого СтрокаСтарыхПланов ИЗ СтрокаТаблицы.ПланДвиженияДенежныхСредств Цикл
				СтрокаПлан = ТаблицаПланДвиженияДенежныхСредств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлан, СтрокаСтарыхПланов);
				СтрокаПлан.Картинка = СтрокаПлан.Направление = ПредопределенноеЗначение("Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата");
			КонецЦикла;
			
			Для Каждого СтрокаСтарыхПланов ИЗ СтрокаТаблицы.ПланДоходов Цикл
				СтрокаПлан = ТаблицаПланДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлан, СтрокаСтарыхПланов);
			КонецЦикла;
			
			Для Каждого СтрокаСтарыхПланов ИЗ СтрокаТаблицы.ПланРасходов Цикл
				СтрокаПлан = ТаблицаПланРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлан, СтрокаСтарыхПланов);
			КонецЦикла;
			
			Для Каждого СтрокаСтарыхПланов ИЗ СтрокаТаблицы.ПланРолейОбщая Цикл
				СтрокаПлан = ТаблицаПланРолей.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлан, СтрокаСтарыхПланов);
			КонецЦикла;
			
			Для Каждого СтрокаСтарыхПланов ИЗ СтрокаТаблицы.ПланРесурсовОбщая Цикл
				СтрокаПлан = ТаблицаПланРесурсов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлан, СтрокаСтарыхПланов);
			КонецЦикла;
			
			Для Каждого СтрокаСтарыхПланов ИЗ СтрокаТаблицы.ПланМатериаловОбщая Цикл
				СтрокаПлан = ТаблицаПланМатериалов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПлан, СтрокаСтарыхПланов);
			КонецЦикла;
		КонецЕсли;
		Если СтрокаТаблицы.УИД = РодительЗадачиУИД Тогда
			РодительЗадачи = СтрокаТаблицы.НаименованиеЗадачи;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы ИЗ ВладелецФормы.ТаблицаПроектаКопия Цикл
		Для Каждого СтрокаСвязи ИЗ ТаблицаСвязей Цикл
			Если СтрокаТаблицы.УИД = СтрокаСвязи.ПредшественникУИД Тогда
				ЗаполнитьЗначенияСвойств(СтрокаСвязи, СтрокаТаблицы, "НаименованиеЗадачи, КодСДР");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыбранаЗадача" И Источник.ВладелецФормы = ЭтаФорма Тогда
		Если Параметр.Свойство("ОперацияВыбора") И Параметр.ОперацияВыбора = "ВыборРодителя" Тогда
			Если Параметр.Свойство("ТекущийУИД") И Параметр.Свойство("НаименованиеЗадачи") Тогда
				РодительЗадачи = Параметр.НаименованиеЗадачи;
				РодительЗадачиУИД = Параметр.ТекущийУИД;
			КонецЕсли;
		ИначеЕсли Параметр.Свойство("ТекущийУИД") И Параметр.Свойство("НаименованиеЗадачи") Тогда
			ТекущиеДанные = Элементы.ТаблицаСвязей.ТекущиеДанные;
			ТекущиеДанные.ПредшественникУИД = Параметр.ТекущийУИД;
			ТекущиеДанные.НаименованиеЗадачи = Параметр.НаименованиеЗадачи;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписатьИЗакрыть(Команда)
	Если НЕ ПроверкаПередЗаписью() Тогда
		Возврат;
	КонецЕсли;
	СтруктураОповещения = СформироватьСтруктуруОповещенияНаКлиенте();
	Оповестить("ИзмененаЗадачаВДиалоге", СтруктураОповещения, ЭтаФорма);
	ЭтаФорма.Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Функция СформироватьСтруктуруОповещенияНаКлиенте()
	СтруктураОповещения = Новый Структура("УИД, НаименованиеЗадачи, ДатаНачала, ДатаОкончания, Длительность, ЕдиницаВремени, Календарь, РучнойВвод, ВидОперации, ВидЭлемента, РодительЗадачиУИД, ТипОграничения, ДатаОграничения");
	ЗаполнитьЗначенияСвойств(СтруктураОповещения, ЭтаФорма);
	
	МассивПредшественник = Новый Массив;
	Для Каждого СтрокаПредшественник ИЗ ТаблицаСвязей Цикл
		СтруктураПредшественник = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи, НаименованиеЗадачи, Внешний, ДатаНачала, ДатаОкончания, КодСДР, НомерСтрокиПроекта");
		ЗаполнитьЗначенияСвойств(СтруктураПредшественник, СтрокаПредшественник);
		МассивПредшественник.Добавить(СтруктураПредшественник);
	КонецЦикла;
	СтруктураОповещения.Вставить("МассивПредшественники", МассивПредшественник);
	
	МассивДДС = Новый Массив;
	Для Каждого СтрокаДДС ИЗ ТаблицаПланДвиженияДенежныхСредств Цикл
		СтруктураДДС = Новый Структура("Направление, Контрагент, ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств, ПрофильРаспределения, Сумма, Валюта, УИД, СпособПривязки, ДатаПривязки, Организация, Подразделение, Номенклатура, ЗонаРасчета");
		ЗаполнитьЗначенияСвойств(СтруктураДДС, СтрокаДДС);
		МассивДДС.Добавить(СтруктураДДС);
	КонецЦикла;
	СтруктураОповещения.Вставить("МассивДДС", МассивДДС);
	
	МассивД= Новый Массив;
	Для Каждого СтрокаД ИЗ ТаблицаПланДоходов Цикл
		СтруктураД = Новый Структура("Контрагент, ДоговорКонтрагента, Статья, ПрофильРаспределения, Сумма, Валюта, УИД, СпособПривязки, ДатаПривязки, Организация, Подразделение, Номенклатура, ЗонаРасчета");
		ЗаполнитьЗначенияСвойств(СтруктураД, СтрокаД);
		МассивД.Добавить(СтруктураД);
	КонецЦикла;
	СтруктураОповещения.Вставить("МассивД", МассивД);
	
	МассивР = Новый Массив;
	Для Каждого СтрокаР ИЗ ТаблицаПланРасходов Цикл
		СтруктураР = Новый Структура("Контрагент, ДоговорКонтрагента, Статья, ПрофильРаспределения, Сумма, Валюта, УИД, СпособПривязки, ДатаПривязки, Организация, Подразделение, Номенклатура, ЗонаРасчета");
		ЗаполнитьЗначенияСвойств(СтруктураР, СтрокаР);
		МассивР.Добавить(СтруктураР);
	КонецЦикла;
	СтруктураОповещения.Вставить("МассивР", МассивР);
	
	МассивМатериалы = Новый Массив;
	Для Каждого СтрокаМатериалы ИЗ ТаблицаПланМатериалов Цикл
		СтруктураМатериалы = Новый Структура("Номенклатура, Количество, Сумма, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, УИД, СпособПривязки, ДатаПривязки, Организация, Подразделение, ЗонаРасчета");
		ЗаполнитьЗначенияСвойств(СтруктураМатериалы, СтрокаМатериалы);
		МассивМатериалы.Добавить(СтруктураМатериалы);
	КонецЦикла;
	СтруктураОповещения.Вставить("МассивМатериалы", МассивМатериалы);
	
	МассивРоли = Новый Массив;
	Для Каждого СтрокаРоли ИЗ ТаблицаПланРолей Цикл
		СтруктураРоли = Новый Структура("Роль, Количество, Сумма, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, УИД, СпособПривязки, ДатаПривязки, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета");
		ЗаполнитьЗначенияСвойств(СтруктураРоли, СтрокаРоли);
		МассивРоли.Добавить(СтруктураРоли);
	КонецЦикла;
	СтруктураОповещения.Вставить("МассивРоли", МассивРоли);
	
	МассивРесурсы = Новый Массив;
	Для Каждого СтрокаРесурсы ИЗ ТаблицаПланРесурсов Цикл
		СтруктураРесурсы = Новый Структура("Роль, Количество, Сумма, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, ТрудовойРесурс, УИД, СпособПривязки, ДатаПривязки, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета");
		ЗаполнитьЗначенияСвойств(СтруктураРесурсы, СтрокаРесурсы);
		МассивРесурсы.Добавить(СтруктураРесурсы);
	КонецЦикла;
	СтруктураОповещения.Вставить("МассивРесурсы", МассивРесурсы);
	
	Возврат СтруктураОповещения;
КонецФункции

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	Если НЕ ПроверкаПередЗаписью() Тогда
		Возврат;
	КонецЕсли;
	СтруктураОповещения = СформироватьСтруктуруОповещенияНаКлиенте();
	Оповестить("ИзмененаЗадачаВДиалоге", СтруктураОповещения, ЭтаФорма);
	ЭтаФорма.Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		Если НЕ ПроверкаПередЗаписью() Тогда
			Возврат;
		КонецЕсли;
		Оповещение = Новый ОписаниеОповещения("ПередЗакрытиемПродолжение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Задача была изменена. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора = КодВозвратаДиалога.Нет Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	Если ЗначениеВыбора = КодВозвратаДиалога.Да Тогда
		ЭтаФорма.Модифицированность = Ложь;
		СтруктураОповещения = СформироватьСтруктуруОповещенияНаКлиенте();
		Оповестить("ИзмененаЗадачаВДиалоге", СтруктураОповещения, ЭтаФорма);
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СобытияШапки

&НаКлиенте
Процедура РучнойВводПриИзменении(Элемент)
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РодительЗадачиОчистка(Элемент, СтандартнаяОбработка)
	Если ВладелецФормы.ДеревоПроекта.ПолучитьЭлементы().Количество() > 0 И ВладелецФормы.ДеревоПроекта.ПолучитьЭлементы().Получить(0).КодСДР = "0" Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	РодительЗадачиУИД = "";
	РодительЗадачи = "";
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РодительЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	//ИмяФормыРедактирования = ПолучитьИмяФормы();
	СтруктураПараметров = ПодготовитьСтруктуруПараметровДляОткрытияФормыНаКлиенте(РодительЗадачиУИД);
	СтруктураПараметров.Вставить("ОперацияВыбора", "ВыборРодителя");
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура РодительЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ПустаяСтрока(ВыбранноеЗначение) Тогда
		Если ВладелецФормы.ДеревоПроекта.ПолучитьЭлементы().Количество() > 0 И ВладелецФормы.ДеревоПроекта.ПолучитьЭлементы().Получить(0).КодСДР = "0" Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		РодительЗадачиУИД = "";
	Иначе
		РодительЗадачиУИД = ВыбранноеЗначение;
		СтрокаЗадача = Новый Массив;
		Для Каждого СтрокаТаблицы ИЗ ВладелецФормы.ТаблицаПроектаКопия Цикл
			Если СтрокаТаблицы.УИД = ВыбранноеЗначение Тогда
				ВыбранноеЗначение = СтрокаТаблицы.НаименованиеЗадачи;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДлительностьПриИзменении(Элемент)
	//Если ЗначениеЗаполнено(ДатаНачала) И Длительность > 0 Тогда
	//	//НоваяДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ДатаНачала, Длительность, ЕдиницаВремени, ?(ЗначениеЗаполнено(Календарь), Календарь, КалендарьПроекта), Истина, Ложь);
	//ИначеЕсли ЗначениеЗаполнено(ДатаНачала) Тогда
	//	НоваяДатаОкончания = ДатаНачала;
	//КонецЕсли;
	//Если НоваяДатаОкончания <> ДатаОкончания Тогда	
	//	ДатаОкончания = НоваяДатаОкончания;
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЭлементаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЕстьПодчиненные = Ложь;
	Для Каждого СтрокаПроекта ИЗ ТаблицаПроекта Цикл
		Если СтрокаПроекта.Родитель = УИД Тогда
			ЕстьПодчиненные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") И НЕ ЕстьПодчиненные Тогда
		ПоказатьПредупреждение(, "Нельзя выбирать вид элемента ""Группа задач"" для задачи, не являющейся группой");
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ЕстьПодчиненные И ВыбранноеЗначение <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
		ПоказатьПредупреждение(, "Нельзя выбирать вид элемента кроме ""Группа задач"" для задачи, являющейся группой");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидЭлементаПриИзменении(Элемент)
	Если ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
		Длительность = 0;
	ИначеЕсли Длительность = 0 Тогда
		Длительность = 1;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПолноеНаименованиеПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТипОграниченияПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОграниченияПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаВремениПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область СобытияТабличныхЧастей

&НаКлиенте
Процедура ТаблицаСвязейНаименованиеЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураПараметров = ПодготовитьСтруктуруПараметровДляОткрытияФормыНаКлиенте(Элементы.ТаблицаСвязей.ТекущиеДанные.ПредшественникУИД);
	СтруктураПараметров.Вставить("ОперацияВыбора", "ВыборПредшественника");
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
		ТекущиеДанные.Направление = ПредопределенноеЗначение("Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление");
		ТекущиеДанные.Картинка = 0;
		ТекущиеДанные.Валюта = мВалютаУчета;
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "Организация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "Подразделение");
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
		ТекущиеДанные.УИД = УИД;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствНаправлениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
	ТекущиеДанные.Картинка = ?(ТекущиеДанные.Направление = ПредопределенноеЗначение("Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"), 0, 1);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаПланДоходов.ТекущиеДанные;
		ТекущиеДанные.Валюта = мВалютаУчета;
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "Организация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "Подразделение");
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
		ТекущиеДанные.УИД = УИД;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаПланРасходов.ТекущиеДанные;
		ТекущиеДанные.Валюта = мВалютаУчета;
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "Организация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "Подразделение");
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
		ТекущиеДанные.УИД = УИД;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаПланРолей.ТекущиеДанные;
		ТекущиеДанные.Валюта = мВалютаУчета;
		ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Час");
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "Организация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "Подразделение");
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
		ТекущиеДанные.УИД = УИД;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаПланРесурсов.ТекущиеДанные;
		ТекущиеДанные.Валюта = мВалютаУчета;
		ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Час");
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "Организация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "Подразделение");
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
		ТекущиеДанные.УИД = УИД;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаПланМатериалов.ТекущиеДанные;
		ТекущиеДанные.Валюта = мВалютаУчета;
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "Организация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "Подразделение");
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязейПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаСвязей.ТекущиеДанные;
	//СтрокиПредшественники = ТаблицаПредшественники.НайтиСтроки(Новый Структура("УИД, ПредшественникУИД", УИД, ТекущиеДанные.ПредшественникУИД));
	//Для Каждого СТрокаПредшественник ИЗ СтрокиПредшественники Цикл
	//	ТаблицаПредшественники.Удалить(СТрокаПредшественник);
	//КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаСвязей.ТекущиеДанные;
		Если СокрЛП(ВладелецФормы.КалендарьПроекта) = "24 часа" Тогда
			ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Сутки");
		Иначе
			ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень");
		КонецЕсли;
		ТекущиеДанные.УИД = УИД;
		ТекущиеДанные.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязейНаименованиеЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаСвязей.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Внешний") И ВыбранноеЗначение.Внешний Тогда
		ТекущиеДанные.КодСДР = ВыбранноеЗначение.ПроектПредставление;
		ТекущиеДанные.НомерСтрокиПроекта = 0;
		ТекущиеДанные.ПредшественникУИД = ВыбранноеЗначение.ЗадачаУИД;
		ТекущиеДанные.Внешний = Истина;
		ТекущиеДанные.ДатаНачала = ВыбранноеЗначение.ДатаНачала;
		ТекущиеДанные.ДатаОкончания = ВыбранноеЗначение.ДатаОкончания;
		//ВыбранноеЗначение = "" + ВыбранноеЗначение.ПроектПредставление + " / " + ВыбранноеЗначение.ЗадачаПредставление;
		ВыбранноеЗначение = ВыбранноеЗначение.ЗадачаПредставление;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если ПустаяСтрока(ВыбранноеЗначение) Тогда
			ТекущиеДанные.ПредшественникУИД = "";
			ТекущиеДанные.КодСДР = "";
			ТекущиеДанные.КодСДР = 0;
		Иначе
			ТекущиеДанные.ПредшественникУИД = ВыбранноеЗначение;
			Для каждого СтрокаПредшественник из ВладелецФормы.ТаблицаПроектаКопия Цикл
				Если СтрокаПредшественник.УИД = ВыбранноеЗначение Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			ВыбранноеЗначение = СтрокаПредшественник.НаименованиеЗадачи;
			ТекущиеДанные.КодСДР = СтрокаПредшественник.КодСДР;
			ТекущиеДанные.НомерСтрокиПроекта = СтрокаПредшественник.НомерСтрокиПроекта;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСвязейПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если КонтрагентДоговора <> ТекущиеДанные.Контрагент Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДоходов.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если КонтрагентДоговора <> ТекущиеДанные.Контрагент Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРасходов.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если КонтрагентДоговора <> ТекущиеДанные.Контрагент Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРолей.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если КонтрагентДоговора <> ТекущиеДанные.Контрагент Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсов.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если КонтрагентДоговора <> ТекущиеДанные.Контрагент Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланМатериалов.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если КонтрагентДоговора <> ТекущиеДанные.Контрагент Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьДоступность()
	Элементы.ДатаНачала.Доступность = РучнойВвод;
	Элементы.ДатаОкончания.Доступность = РучнойВвод;
	Элементы.ВидЭлемента.ТолькоПросмотр = ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровДляОткрытияФормыНаКлиенте(ТекущийУИД)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииОкнаВладельца", Истина);
	СтруктураПараметров.Вставить("ТекущийУИД", УИД);
	СтруктураПараметров.Вставить("ПредшественникУИД", ТекущийУИД);
	СтруктураПараметров.Вставить("Проект", Проект);
	СтруктураПараметров.Вставить("ИмяФормыРедактирования", ВладелецФормы.ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаВыбораЗадачи");
	Возврат СтруктураПараметров;
КонецФункции

&НаКлиенте
Функция ПроверкаПередЗаписью()
	Результат = Истина;
	СтруктураОбязательныхПолей = Новый Структура("ЕдиницаВремени, ТипСвязи, ПредшественникУИД");
	Результат = Результат И ПроверитьОбязательныеПоляТаблицы(ТаблицаСвязей, СтруктураОбязательныхПолей, "Предшественники");
	
	СоответствиеСпособаПривязки = Новый Соответствие;
	СоответствиеСпособаПривязки.Вставить(ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения"), Новый Структура("ПрофильРаспределения"));
	СоответствиеСпособаПривязки.Вставить(ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.НаДату"), Новый Структура("ДатаПривязки"));
	
	СтруктураОбязательныхПолей = Новый Структура("Валюта, СпособПривязки", Неопределено, СоответствиеСпособаПривязки);
	Результат = ПроверитьОбязательныеПоляТаблицы(ТаблицаПланДвиженияДенежныхСредств, СтруктураОбязательныхПолей, "План ДДС") И Результат;
	
	Результат = ПроверитьОбязательныеПоляТаблицы(ТаблицаПланДоходов, СтруктураОбязательныхПолей, "План доходов") И Результат;
	Результат = ПроверитьОбязательныеПоляТаблицы(ТаблицаПланРасходов, СтруктураОбязательныхПолей, "План расходов") И Результат;
	
	СтруктураОбязательныхПолей = Новый Структура("ЕдиницаВремени, СпособПривязки", Неопределено, Неопределено, СоответствиеСпособаПривязки);
	Результат = ПроверитьОбязательныеПоляТаблицы(ТаблицаПланРолей, СтруктураОбязательныхПолей, "План трудозатрат ролей") И Результат;
	
	Результат = ПроверитьОбязательныеПоляТаблицы(ТаблицаПланРесурсов, СтруктураОбязательныхПолей, "План трудовых ресурсов") И Результат;
	
	СтруктураОбязательныхПолей = Новый Структура("СпособПривязки", Неопределено, Неопределено, СоответствиеСпособаПривязки);
	Результат = ПроверитьОбязательныеПоляТаблицы(ТаблицаПланМатериалов, СтруктураОбязательныхПолей, "План материалов") И Результат;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПроверитьОбязательныеПоляТаблицы(ТаблицаДляПроверки, СтруктураПолей, НаименованиеТабличнойЧасти)
	Результат = Истина;
	СтруктураОтбора = Новый Структура("УИД", УИД);
	СтрокиТаблицыПроверки = ТаблицаДляПроверки.НайтиСтроки(СтруктураОтбора);
	Для Каждого КлючИЗначение ИЗ СтруктураПолей Цикл
		Для Каждого СтрокаТаблицы ИЗ СтрокиТаблицыПроверки Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КлючИЗначение.Ключ]) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + (ТаблицаДляПроверки.Индекс(СтрокаТаблицы) + 1) + " табличной части """ + НаименованиеТабличнойЧасти + """ не заполнен реквизит """ + КлючИЗначение.Ключ + """";
				Сообщение.УстановитьДанные(ТаблицаДляПроверки);
				Сообщение.ПутьКДанным = КлючИЗначение.Ключ;
				Сообщение.Сообщить();
				Результат = Ложь;
			ИначеЕсли КлючИЗначение.Значение <> Неопределено Тогда // Если в структуре проверки у нас соответствие, то проверяем
				СтруктураПроверкиЗначения = КлючИЗначение.Значение[СтрокаТаблицы[КлючИЗначение.Ключ]]; 
				Если СтруктураПроверкиЗначения <> Неопределено Тогда // Если в соответствии предусмотрено наше значение 
					Для Каждого КлючИЗначениеЗначения ИЗ СтруктураПроверкиЗначения Цикл // Получаем новую структуру проверки характерную именно для этого значения
						Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[КлючИЗначениеЗначения.Ключ]) Тогда
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "В строке " + (ТаблицаДляПроверки.Индекс(СтрокаТаблицы) + 1) + " табличной части """ + НаименованиеТабличнойЧасти + """ не заполнен реквизит """ + КлючИЗначениеЗначения.Ключ + """";
							Сообщение.УстановитьДанные(ТаблицаДляПроверки);
							Сообщение.ПутьКДанным = КлючИЗначение.Ключ;
							Сообщение.Сообщить();
							Результат = Ложь;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(ОбъектИсточник, ИмяРеквизита)
	Попытка
		Возврат ОбъектИсточник[ИмяРеквизита];
	Исключение
		Возврат 0;
	КонецПопытки;
КонецФункции

&НаСервере
Процедура НастроитьФормуПоПравамПользователя()

	// СДР 
	ИмяПрава = "РегистрСведений.грзнтСДРПроектов";
	ИзменениеСДР = ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ГруппаШапка.ТолькоПросмотр 					= Не ИзменениеСДР;
	Элементы.ТаблицаСвязей.КоманднаяПанель.ТолькоПросмотр 	= Не ИзменениеСДР;
	Элементы.ТаблицаСвязей.ТолькоПросмотр 					= Не ИзменениеСДР;
	
	// Сроки
	ИмяПрава = "РегистрСведений.грзнтСрокиПроектов";
	ЧтениеСроков 	= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеСроков = ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ГруппаСроки.Видимость 			= ЧтениеСроков;	
	
	Элементы.ГруппаСроки.ТолькоПросмотр 	= НЕ ИзменениеСроков;
	                                      	
	// Финансы БДР	
	ИмяПрава = "РегистрНакопления.грзнтПланыДоходовРасходов"; 
	ЧтениеПлановБДР 	= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПлановБДР 	= ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.СтраницаДоходы.Видимость 		= ЧтениеПлановБДР;
	Элементы.СтраницаРасходы.Видимость 		= ЧтениеПлановБДР;
		
	Элементы.СтраницаДоходы.ТолькоПросмотр 	= НЕ ИзменениеПлановБДР;
	Элементы.СтраницаРасходы.ТолькоПросмотр	= НЕ ИзменениеПлановБДР;

	// Финансы ДДС
	ИмяПрава = "РегистрНакопления.грзнтПланыДвиженияДенежныхСредств";
	ЧтениеПлановДДС 	= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПлановДДС 	= ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.СтраницаДДС.Видимость 		= ЧтениеПлановДДС;
		
	Элементы.СтраницаДДС.ТолькоПросмотр = НЕ ИзменениеПлановДДС;
	                                                	
	// Трудозатраты предварительного уровня
	ИмяПраваЧасы 	= "РегистрНакопления.грзнтПланыЗатратРолейЧасы";
	ИмяПраваФинансы = "РегистрНакопления.грзнтПланыЗатратРолейФинансы";
	ЧтениеПлановРолейЧасы 		= ЕстьПраво(ИмяПраваЧасы, "Чтение");
	ИзменениеПлановРолейЧасы 	= ЕстьПраво(ИмяПраваЧасы, "Изменение");
	ЧтениеПлановРолейФинансы 	= ЕстьПраво(ИмяПраваФинансы, "Чтение");
	ИзменениеПлановРолейФинансы	= ЕстьПраво(ИмяПраваФинансы, "Изменение");
	
	Элементы.СтраницаТрудозатратыРолей.Видимость = ?(ЧтениеПлановРолейЧасы И ЧтениеПлановРолейФинансы, Истина, Ложь);
	
	Элементы.СтраницаТрудозатратыРолей.ТолькоПросмотр = НЕ ?(ИзменениеПлановРолейЧасы И ИзменениеПлановРолейФинансы, Истина, Ложь);
	
	// Трудозатраты окончательного уровня
	ИмяПраваЧасы 	= "РегистрНакопления.грзнтПланыЗатратТрудовыхРесурсовЧасы";
	ИмяПраваФинансы = "РегистрНакопления.грзнтПланыЗатратТрудовыхРесурсовФинансы";
	ЧтениеПлановРесурсовЧасы 		= ЕстьПраво(ИмяПраваЧасы, "Чтение");
	ИзменениеПлановРесурсовЧасы 	= ЕстьПраво(ИмяПраваЧасы, "Изменение");
	ЧтениеПлановРесурсовФинансы 	= ЕстьПраво(ИмяПраваФинансы, "Чтение");
	ИзменениеПлановРесурсовФинансы	= ЕстьПраво(ИмяПраваФинансы, "Изменение");
	
	Элементы.СтраницаТрудозатратыРесурсов.Видимость = ?(ЧтениеПлановРесурсовЧасы И ЧтениеПлановРесурсовФинансы, Истина, Ложь);
	
	Элементы.СтраницаТрудозатратыРесурсов.ТолькоПросмотр = НЕ ?(ИзменениеПлановРесурсовЧасы И ИзменениеПлановРесурсовФинансы, Истина, Ложь);

	// Материалы
	ИмяТаблицыСумма 		= "РегистрНакопления.грзнтПланыЗатратМатериаловКоличество";
	ИмяТаблицыКоличество 	= "РегистрНакопления.грзнтПланыЗатратМатериаловСумма";
	ЧтениеПлановМатериаловКоличество 	= ЕстьПраво(ИмяТаблицыКоличество, "Чтение");
	ИзменениеПлановМатериаловКоличество = ЕстьПраво(ИмяТаблицыКоличество, "Изменение");
	ЧтениеПлановМатериаловСумма 		= ЕстьПраво(ИмяТаблицыСумма, "Чтение");
	ИзменениеПлановМатериаловСумма 		= ЕстьПраво(ИмяТаблицыСумма, "Изменение");
	
	Элементы.СтраницаМатериалы.Видимость = ?(ЧтениеПлановМатериаловКоличество И ЧтениеПлановМатериаловСумма, Истина, Ложь);
	
	Элементы.СтраницаМатериалы.ТолькоПросмотр = НЕ ?(ИзменениеПлановМатериаловКоличество И ИзменениеПлановМатериаловСумма, Истина, Ложь);
													
КонецПроцедуры // НастроитьФормуПоПравамПользователя()
	
&НаСервере
Функция ЕстьПраво(ИмяТаблицы, Право)

	Возврат НЕ ПраваПользователяПоПроекту.НайтиСтроки(Новый Структура("ИмяТаблицы, " + Право, ИмяТаблицы, Истина)).Количество() = 0;
	
КонецФункции // ЕстьПраво()

#КонецОбласти