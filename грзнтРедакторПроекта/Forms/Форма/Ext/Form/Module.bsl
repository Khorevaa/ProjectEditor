&НаКлиенте
Перем тСоответствиеПредшественникиПредшественникУИД Экспорт;
&НаКлиенте
Перем тСоответствиеПредшественникиУИД Экспорт;
&НаКлиенте
Перем тСоответствиеТаблицыРодитель Экспорт;
&НаКлиенте
Перем тСоответствиеТаблицыУИД Экспорт;

#Область СобытияФормыИЭлементов

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	стрКолонкиТаблицыИсключение = "ТаблицаПредшественники, ПланДвиженияДенежныхСредств, ПланДоходов, ПланРасходов, ПланРолейОбщая, ПланРесурсовОбщая, ПланМатериаловОбщая, ПланРесурсовОперативный, КомментарииКЗадаче";
	СтруктураПланПредшественники = Новый Структура("НаименованиеЗадачи, Внешний, ТипСвязи, ПредшественникУИД, Задержка, ЕдиницаВремени, КодСДР, НомерСтрокиПроекта, ГУИД");
	СтруктураПланДДС = Новый Структура("Направление, Контрагент, ДоговорКонтрагента, СтатьяДвиженияДенежныхСредств, ПрофильРаспределения, Сумма, Валюта, СуммаУпр, СпособПривязки, ДатаПривязки, Организация, Подразделение, Номенклатура, ЗонаРасчета, Картинка, ГУИД");
	СтруктураПланДоходы = Новый Структура("Сумма, Валюта, СуммаУпр, ПрофильРаспределения, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, Организация, Подразделение, Номенклатура, ЗонаРасчета, ГУИД");
	СтруктураПланРасходы = Новый Структура("Сумма, Валюта, СуммаУпр, ПрофильРаспределения, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, Организация, Подразделение, Номенклатура, ЗонаРасчета, ГУИД");
	СтруктураПланРоли = Новый Структура("Роль, Количество, Сумма, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета, ГУИД");
	СтруктураПланРесурсы = Новый Структура("Роль, Количество, Сумма, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета, ТрудовойРесурс, ГУИД");
	СтруктураПланРесурсыОперативный = Новый Структура("Количество, Сумма, Валюта, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета, ТрудовойРесурс, ВидСтавки, СуммаУпр, Роль");
	СтруктураПланМатериалы = Новый Структура("Количество, Сумма, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаИзмерения, Организация, Подразделение, Номенклатура, ЗонаРасчета, ГУИД");
	СтруктураКомментарииКЗадаче = Новый Структура("ДатаВремя, Пользователь, Комментарий, Собственный, ГУИД");
	
	РежимУчитыватьФакт = 1;
	
	КонстантаКритическийПределОтклоненияКонтрактныхСроков = Константы.грзнтКритическийПределОтклоненияОтКонтрактныхСроков.Получить();
	Для Каждого ЭлементУсловногоОформления ИЗ УсловноеОформление.Элементы Цикл
		Если Найти(ЭлементУсловногоОформления.Представление, "КритическоеОтклонениеКонтрактных") > 0 Тогда
			Для Каждого ОтборОформления ИЗ ЭлементУсловногоОформления.Отбор.Элементы Цикл
				Если ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно ИЛИ ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
					ОтборОформления.ПравоеЗначение = КонстантаКритическийПределОтклоненияКонтрактныхСроков;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	КонстантаКритическийПределОтклоненияСроковАктуализации = Константы.грзнтКритическийПределОтклоненияСроковДляАктуализации.Получить();
	Для Каждого ЭлементУсловногоОформления ИЗ УсловноеОформление.Элементы Цикл
		Если Найти(ЭлементУсловногоОформления.Представление, "КритическоеОтклонениеАктуализации") > 0 Тогда
			Для Каждого ОтборОформления ИЗ ЭлементУсловногоОформления.Отбор.Элементы Цикл
				Если ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно ИЛИ ОтборОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
					ОтборОформления.ПравоеЗначение = КонстантаКритическийПределОтклоненияСроковАктуализации;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТекущийПользователь = ПараметрыСеанса.ТекущийПользователь;
	
	Если НЕ РольДоступна("грзнтЭкспортПланаПроектаВMSP") И НЕ РольДоступна("ПолныеПрава") Тогда
		Элементы.КомандаЭкспортПроекта.Видимость = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("Проект") И ЗначениеЗаполнено(Параметры.Проект) Тогда
		Проект = Параметры.Проект;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЭкземплярВерсии) Тогда
		ЭкземплярВерсии = Параметры.ЭкземплярВерсии;
		Если НЕ ЗначениеЗаполнено(Проект) Тогда
			Проект = Параметры.ЭкземплярВерсии.Владелец;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВидВерсииПлана) Тогда
			ВидВерсииПлана = Параметры.ЭкземплярВерсии.ВидВерсии;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Параметры.Проект) Тогда
		ЭкземплярВерсии = Параметры.Проект.грзнтРедактируемыйЭкземплярВерсии;
		ВидВерсииПлана = ЭкземплярВерсии.ВидВерсии;
	КонецЕсли;
	
	Если Параметры.Свойство("Задача") И ЗначениеЗаполнено(Параметры.Задача) Тогда
		ЗадачаПриОткрытии = Параметры.Задача;
	КонецЕсли;
	
	Если Константы.грзнтИспользоватьРазграничениеПоПроектам.Получить() И НЕ грзнтПраваДоступаСервер.ТекущийПользовательБезРЛС() Тогда
		ПроверятьПраваНаТаблицы = Истина;
	Иначе
		ПроверятьПраваНаТаблицы = Ложь;
	КонецЕсли;	
	Если ПроверятьПраваНаТаблицы Тогда
		Если НЕ грзнтПраваДоступаСервер.ЕстьПравоСДРПроекта(Проект, ЭкземплярВерсии, Истина) Тогда
			//Отказ = Истина;
			//Возврат;
		КонецЕсли;
		ПраваПользователяПоПроекту.Загрузить(грзнтПраваДоступаСервер.ПраваПользователяПоПроекту(Проект, ЭкземплярВерсии, Неопределено));
		НастроитьФормуПоПравамПользователя();
		ЗаполнитьДоступныеТаблицы();
		
		Если НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "РегистрСведений", "грзнтСДРПроектов") Тогда
			//Отказ = Истина;
			ТекстОшибки = "У Вас нет прав просмотра структуры работ проектов, потому отображение данных проекта невозможно.
							|Обратитесь к администратору проектного офиса.";
			Сообщить(ТекстОшибки);
			//Возврат;
		КонецЕсли;
	КонецЕсли;
	НастроитьВидимостьПлановПоРесурсам();
	
	ЗаполнитьСписокВыбораФильтра();
	
	ВалютаУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	КлючОбъекта = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
	
	ВосстановитьНастройкуПриОткрытии();
	
	ПрименитьНастройкиФормы();
	СформироватьТаблицуПроектаПоЭкземпляруНаСервере();
	
	ПоказатьКнопкиКоличествоУровнейНаСервере();
	
	СформироватьДеревоЭкземпляровВерсийПланов(Проект);
	
	УстановитьНастройкуКолонок();
	
	ОбновитьБлокировкуПроектаНаСервере(Проект, ЭкземплярВерсии);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	СформироватьЗаголовокОкна();
	Элементы.ГруппаСтраницыЛеваяПанель.Видимость = Ложь;
	
	ПодключитьОбработчикОжидания("ОбновитьБлокировкуПроекта", 30, Ложь);
	
	Для Каждого ЭлементДерева ИЗ ДеревоПроекта.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПроекта.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	ПоказатьУровеньДерева(ДеревоПроекта, 2, 1);
	
	СформироватьСоответствияДеревоСДРИтоги();
	
	Если НЕ ЗадачаПриОткрытии.Пустая() Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаПроектаКопия Цикл
			Если СтрокаТаблицы.Задача = ЗадачаПриОткрытии Тогда
				Элементы.ДеревоПроекта.ТекущаяСтрока = СтрокаТаблицы.Идентификатор;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЗадачаПриОткрытии = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ЭтаФорма.Модифицированность Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемПродолжение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения, "Сохранить сделанные изменения перед закрытием?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ТаблицаПредшественники.Очистить();
		ТаблицаПроектаКопия.Очистить();
		ДеревоПроекта.ПолучитьЭлементы().Очистить();
		ДеревоСДР.ПолучитьЭлементы().Очистить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	СохранитьНастройкуПриЗакрытии();
	СнятьБлокировкуПроекта();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Ложь;
	Если РезультатВыбора = КодВозвратаДиалога.Да Тогда
		КомандаЗаписатьСтруктуруПроекта(Неопределено);
	КонецЕсли;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПроектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ПроверятьПраваНаТаблицы И НЕ грзнтПраваДоступаСервер.ЕстьПравоСДРПроекта(ВыбранноеЗначение, ПолучитьРеквизитОбъекта(ВыбранноеЗначение, "грзнтРедактируемыйЭкземплярВерсии"), Истина) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение <> Проект И ЗначениеЗаполнено(Проект) И ЭтаФорма.Модифицированность Тогда
		ОбработкаОповещения = Новый ОписаниеОповещения("ИзменениеПроектаВидаВариантаПродолжение", ЭтаФорма, Новый Структура("Проект", ВыбранноеЗначение));
		ПоказатьВопрос(ОбработкаОповещения, "Сохранить изменения проекта?", РежимДиалогаВопрос.ДаНетОтмена);
		СтандартнаяОбработка = Ложь
	ИначеЕсли ВыбранноеЗначение <> Проект Тогда
		СтандартнаяОбработка = Ложь;
		ИзменениеПроектаВидаВариантаПродолжение(КодВозвратаДиалога.Да, Новый Структура("Проект", ВыбранноеЗначение));
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкземплярВерсииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ПроверятьПраваНаТаблицы И НЕ грзнтПраваДоступаСервер.ЕстьПравоСДРПроекта(ПолучитьРеквизитОбъекта(ВыбранноеЗначение, "Владелец"), ВыбранноеЗначение, Истина) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> ЭкземплярВерсии И ЗначениеЗаполнено(ЭкземплярВерсии) И ЭтаФорма.Модифицированность Тогда
		ОбработкаОповещения = Новый ОписаниеОповещения("ИзменениеПроектаВидаВариантаПродолжение", ЭтаФорма, Новый Структура("ЭкземплярВерсии", ВыбранноеЗначение));
		ПоказатьВопрос(ОбработкаОповещения, "Сохранить изменения проекта?", РежимДиалогаВопрос.ДаНетОтмена);
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ВыбранноеЗначение <> ЭкземплярВерсии Тогда
		//Если НЕ СтандартнаяОбработка Тогда
			ИзменениеПроектаВидаВариантаПродолжение(КодВозвратаДиалога.Нет, Новый  Структура("ЭкземплярВерсии", ВыбранноеЗначение));
			//ЭкземплярВерсии = ВыбранноеЗначение;
			//ЭкземплярВерсииПриИзменении(Элементы.ЭкземплярВерсии);
		//КонецЕсли;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкземплярВерсииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.грзнтЭкземплярыВерсийПланаПроекта.ФормаВыбора", Новый Структура("Проект, ВидВерсииПлана, ЭкземплярВерсии", Проект, ВидВерсииПлана, ЭкземплярВерсии), Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПроектаВидаВариантаПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да И ЭтаФорма.Модифицированность Тогда
		КомандаЗаписатьСтруктуруПроекта(Неопределено);
	КонецЕсли;
	Если РезультатВопроса <> КодВозвратаДиалога.Отмена Тогда
		Описание = Новый ОписаниеОповещения("ИзменениеПроектаВидаВариантаБлокировкаПродолжение", ЭтаФорма, ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("Проект") И ДополнительныеПараметры.Свойство("ЭкземплярВерсии") Тогда
			грзнтПроцедурыИФункцииКлиент.ЗаблокироватьДляРедактирования(ДополнительныеПараметры.Проект, ДополнительныеПараметры.ЭкземплярВерсии, Описание);
		ИначеЕсли ДополнительныеПараметры.Свойство("Проект") Тогда
			грзнтПроцедурыИФункцииКлиент.ЗаблокироватьДляРедактирования(ДополнительныеПараметры.Проект, Неопределено, Описание);
		ИначеЕсли ДополнительныеПараметры.Свойство("ЭкземплярВерсии") Тогда
			грзнтПроцедурыИФункцииКлиент.ЗаблокироватьДляРедактирования(Неопределено, ДополнительныеПараметры.ЭкземплярВерсии, Описание);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПроектаВидаВариантаБлокировкаПродолжение(Заблокирована, ДополнительныеПараметры) Экспорт
	Если Заблокирована = Истина Тогда
		СнятьБлокировкуПроекта();
		ЭтаФорма.Модифицированность = Ложь;
		Если ДополнительныеПараметры.Свойство("Проект") Тогда 
			Проект = ДополнительныеПараметры.Проект;
			ПроектПриИзменении(Элементы.Проект);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ЭкземплярВерсии") Тогда
			ЭкземплярВерсии = ДополнительныеПараметры.ЭкземплярВерсии;
			ЭкземплярВерсииПриИзменении(Элементы.ЭкземплярВерсии);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПроектаПриИзменении(Элемент)
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеДатыНачалаПроекта");
	СообщениеСерверу.Вставить("ДанныеПроекта", Новый Структура("ДатаНачала", ДатаНачалаПроекта));
	МассивВозврата = Неопределено;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СообщениеСерверу, МассивВозврата, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьПроектаПриИзменении(Элемент)
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеКалендаряПроекта");
	СообщениеСерверу.Вставить("ДанныеПроекта", Новый Структура("Календарь", КалендарьПроекта));
	МассивВозврата = Неопределено;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СообщениеСерверу, МассивВозврата, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭкземпляровВерсийПлановВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоЭкземпляровВерсийПланов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ Не ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	//Если ПолучитьФорму("Обработка.грзнтРедакторПроекта.Форма.Форма", , , ТекущиеДанные.Ссылка.УникальныйИдентификатор()).Открыта() Тогда
	//	//Предупреждение("Выбранная версия открыта в другом редакторе проекта! Выберите другую версию!");
	//	ПоказатьПредупреждение(, "Выбранная версия открыта в другом редакторе проекта! Выберите другую версию!");
	//	Возврат;
	//КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ЭкземплярВерсииОбработкаВыбора(Элементы.ЭкземплярВерсии, ТекущиеДанные.Ссылка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ИзмененаЗадачаВДиалоге" И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма  Тогда
		ИзменитьДанныеЗадачиНаКлиентеИзСтруктуры(Параметр);
	ИначеЕсли ИмяСобытия = "ИзмененЭкземплярВерсииПроекта" И ТипЗнч(Параметр) = Тип("СправочникСсылка.грзнтЭкземплярыВерсийПланаПроекта") Тогда
		ТекущиеДанные = Элементы.ДеревоЭкземпляровВерсийПланов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		КомандаОбновитьДеревоЭкземпляровВерсий(Неопределено);
	ИначеЕсли ИмяСобытия = "ИзмененПроцентГотовности" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Задача") Тогда
		Если ТипЗнч(Параметр.Задача) = Тип("СправочникСсылка.Проекты") Тогда
			СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(Строка(Параметр.Задача.УникальныйИдентификатор()));
			Если СтрокаТаблицы <> Неопределено Тогда
				Если СтрокаТаблицы.Задача = Параметр.Задача И СтрокаТаблицы.Идентификатор >= 0 Тогда
					ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
					Если ЭлементДерева <> Неопределено Тогда
						ЭлементДерева.ПроцентГотовности = Параметр.ПроцентГотовности;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОпубликованаЗадача" И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Задача") Тогда
		Если ТипЗнч(Параметр.Задача) = Тип("СправочникСсылка.Проекты") Тогда
			СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(Строка(Параметр.Задача.УникальныйИдентификатор()));
			Если СтрокаТаблицы <> Неопределено Тогда
				Если СтрокаТаблицы.Задача = Параметр.Задача Тогда
					СтрокаТаблицы.КартинкаОпубликована = КартинкаЗадачаОпубликована(Параметр.Задача);
					Если НЕ СтрокаТаблицы.Внешний И СтрокаТаблицы.Идентификатор >= 0 Тогда
						ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
						Если ЭлементДерева <> Неопределено Тогда
							ЭлементДерева.КартинкаОпубликована = СтрокаТаблицы.КартинкаОпубликована;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзмененСоставКолонок" И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма Тогда
		КомандаНастроитьПорядокИВидимостьКолонокПродолжение(Параметр, Неопределено);
	ИначеЕсли ИмяСобытия = "ВыборЗадачиИсточникаЗаполнения" И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			СкопироватьДанныеУзла(Параметр.Приемник, Параметр.Источник);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВыборЗадачиИсточникаЗаполненияПлана" И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			СкопироватьПланУзла(Параметр.Приемник, Параметр.Источник, Параметр.ВидПлана);
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВыборРодителя" И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма Тогда
		ОбработкаВыбора(Параметр, Неопределено);
	ИначеЕсли ИмяСобытия = "ВыборЗадачиДляДобавления" И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма Тогда
		ДобавитьЗадачиДругогоПроекта(Параметр);
	ИначеЕсли ИмяСобытия = "ВыборЭлементаСтруктурыДляДобавления" И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма Тогда
		ДобавитьЭлементыСтруктурыПроекта(Параметр);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	// Осталась процедура только для выбора родителя
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			ПоказатьПредупреждение(, "В дереве проекта нет активной строки, не удаётся установить принадлежность задачи!");
			//Предупреждение("В дереве проекта нет активной строки, не удаётся установить принадлежность задачи!");
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
		
		РезультатПроверки = "";
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПроверитьВозможностьПеремещения(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтрокаТаблицы.УИД, ВыбранноеЗначение, РезультатПроверки);
		Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
			ПоказатьПредупреждение(, "При перемещении задачи """ + ТекущиеДанные.КодСДР + """, №""" + ТекущиеДанные.НомерСтрокиПроекта + """ возникла ошибка: " + РезультатПроверки);
			//Предупреждение("При перемещении задачи """ + ТекущиеДанные.КодСДР + """, №""" + ТекущиеДанные.НомерСтрокиПроекта + """ возникла ошибка: " + РезультатПроверки);
			Возврат;
		КонецЕсли;
		НачатьДействие();
		
		СтарыйРодительУИД = ТекущиеДанные.Родитель;
		НовыйРодительУИД = ВыбранноеЗначение;
		
		// Перестроим дерево СДР и пересчитаем коды
		ТекущиеДанныеСДР = ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
		ТекущийРодительСДР = ТекущиеДанныеСДР.ПолучитьРодителя();
		Если ТекущийРодительСДР = Неопределено Тогда
			ТекущийРодительСДР = ДеревоСДР;
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтрокаТаблицы.Родитель) Тогда
			СтрокаРодитель = тСоответствиеТаблицыУИД.Получить(СтрокаТаблицы.Родитель);
			//Для Каждого СтрокаРодитель ИЗ ТаблицаПроектаКопия Цикл
			//	Если СтрокаРодитель.УИД = СтрокаТаблицы.Родитель Тогда
			//		Прервать;
			//	КонецЕсли;
			//КонецЦикла;
		КонецЕсли;
		
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "Родитель", ВыбранноеЗначение);
		
		ПереместитьСтрокуДереваСДРВНовогоРодителя(СтрокаТаблицы, "");
		
		Если ТекущийРодительСДР.ПолучитьЭлементы().Количество() = 0 Тогда
			Если СтрокаРодитель.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
				ВидЗадача = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача");
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаРодитель, "ВидЭлемента", ВидЗадача);
			КонецЕсли;
		КонецЕсли;
		
		// ((( grznt.Solntsev 29.08.2016
		//ПересчитатьСДРДерева(ДеревоСДР, Истина, ЭтаФорма);
		ПересчитатьСДРДерева(, Истина);
		// ))) grznt.Solntsev 29.08.2016
		
		// Сообщим о наших изменениях на сервер
		
		МассивСообщенийСерверу = Новый Массив;
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "Родитель");
		СообщениеСерверу.Вставить("НовоеЗначение", СтрокаТаблицы.Родитель);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
		
		Если РежимОтображенияСписок Тогда
			НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
			ТекущийИндекс = НаборЭлементовДерева.Индекс(ТекущиеДанные);
			МассивПодчиненныхУИД = ПолучитьМассивПодчиненныхУИД(ТекущиеДанные.УИД);
			МассивПодчиненныхУИД.Добавить(ТекущиеДанные.УИД);
			МассивСтрокДляСдвига = Новый Массив;
			КонечныйИндекс = ТекущийИндекс;
			Пока КонечныйИндекс < НаборЭлементовДерева.Количество() - 1 И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(КонечныйИндекс).УИД) <> Неопределено Цикл
				МассивСтрокДляСдвига.Вставить(0, НаборЭлементовДерева.Получить(КонечныйИндекс));
				КонечныйИндекс = КонечныйИндекс + 1;
			КонецЦикла;
			Если ПустаяСтрока(ВыбранноеЗначение) Тогда
				ИндексСмещения = НаборЭлементовДерева.Количество() - КонечныйИндекс;
				Если ИндексСмещения > 0 Тогда
					Для Каждого СтрокаМассива ИЗ МассивСтрокДляСдвига Цикл
						НаборЭлементовДерева.Сдвинуть(НаборЭлементовДерева.Индекс(СтрокаМассива), ИндексСмещения);
					КонецЦикла;
				КонецЕсли;
				НовыйРодитель = ДеревоПроекта;
			Иначе
				// Нужно определить, куда нам двигаться - вверх или вниз
				ДвижемсяНаверх = Ложь;
				Если ТекущийИндекс > 0 Тогда
					Если НаборЭлементовДерева.Получить(ТекущийИндекс - 1).КодСДР > ТекущиеДанные.КодСДР Тогда
						// Нужно двигаться вверх
						ДвижемсяНаверх = Истина;
					КонецЕсли;
				КонецЕсли;
				Если ДвижемсяНаверх Тогда
					// посчитаем сколько по индексам нам двигаться вверх
					Для ИндексСмещения = 1 По ТекущийИндекс Цикл
						Если НаборЭлементовДерева.Получить(ТекущийИндекс - ИндексСмещения).КодСДР < ТекущиеДанные.КодСДР Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					ИндексСмещения = ИндексСмещения - 1;
					Пока ТекущийИндекс < НаборЭлементовДерева.Количество() И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(ТекущийИндекс).УИД) <> Неопределено Цикл
						НаборЭлементовДерева.Сдвинуть(ТекущийИндекс, - ИндексСмещения);
						ТекущийИндекс = ТекущийИндекс + 1;
					КонецЦикла;
				Иначе
					ИндексСмещения = КонечныйИндекс;
					Пока ИндексСмещения <= НаборЭлементовДерева.Количество() - 1 И НаборЭлементовДерева.Получить(ИндексСмещения).КодСДР < ТекущиеДанные.КодСДР Цикл
						ИндексСмещения = ИндексСмещения + 1;
					КонецЦикла;
					ИндексСмещения = ИндексСмещения - КонечныйИндекс;
					Если ИндексСмещения > 0 Тогда
						Для Каждого СтрокаМассива ИЗ МассивСтрокДляСдвига Цикл
							НаборЭлементовДерева.Сдвинуть(НаборЭлементовДерева.Индекс(СтрокаМассива), ИндексСмещения);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				СтрокаНовыйРодитель = тСоответствиеТаблицыУИД.Получить(ВыбранноеЗначение);
				Если СтрокаНовыйРодитель.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаНовыйРодитель, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач"));
				КонецЕсли;
			КонецЕсли;
		Иначе
			//----------------------------------------
			Если НЕ ПустаяСтрока(ВыбранноеЗначение) Тогда
				// проверить видимость нового родителя
				СтрокаНовыйРодитель = тСоответствиеТаблицыУИД.Получить(ВыбранноеЗначение);
				Если СтрокаНовыйРодитель.Идентификатор < 0 Тогда
					НовыйРодитель = ВставитьГруппуРодителяВДеревоПроекта(СтрокаНовыйРодитель);
				Иначе
					НовыйРодитель = ДеревоПроекта.НайтиПоИдентификатору(СтрокаНовыйРодитель.Идентификатор);
				КонецЕсли;
			Иначе
				НовыйРодитель = ДеревоПроекта;
			КонецЕсли;
			
			МассивВыделенныхСтрок = Новый Массив;
			НовыйЭлемент = ПереместитьУзелДереваПроектаВНовогоРодителя(ТекущиеДанные, НовыйРодитель, ЭтаФорма, МассивВыделенныхСтрок);
			СтрокаТаблицы.Идентификатор = НовыйЭлемент.ПолучитьИдентификатор();
			
			Если НовыйРодитель <> ДеревоПроекта Тогда
				Если НовыйРодитель.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
					НовыйРодитель.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
					ОписаниеСобытия = Новый Структура;
					ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизита");
					ОписаниеСобытия.Вставить("ИдентификаторСтроки", НовыйРодитель.ПолучитьИдентификатор());
					ОписаниеСобытия.Вставить("Реквизит", "ВидЭлемента");
					ДобавитьСобытиеДерева(ОписаниеСобытия);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаТаблицы.Идентификатор >= 0 Тогда
			Элементы.ДеревоПроекта.ТекущаяСтрока = СтрокаТаблицы.Идентификатор;
			Элементы.ДеревоПроекта.Развернуть(СтрокаТаблицы.Идентификатор);
		КонецЕсли;
		
		ПоказатьКнопкиКоличествоУровней();
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьДиаграммуГанта(ЭтаФорма);
		
		Если НЕ ПустаяСтрока(СтарыйРодительУИД) Тогда
			ПосчитатьИтогиПоКолонкам( "", СтарыйРодительУИД);
			ПосчитатьИтогиВалютыПоКолонкам("", СтарыйРодительУИД);
			//ПосчитатьИтогиПроцентовПоКолонкам("", СтарыйРодительУИД);
			ПосчитатьИтогиПроцентовПоКолонкам("", );
			ПосчитатьФактическуюДлительностьПоКолонкам("", СтарыйРодительУИД);
		КонецЕсли;
		Если НЕ ПустаяСтрока(НовыйРодительУИД) Тогда
			ПосчитатьИтогиПоКолонкам("", НовыйРодительУИД);
			ПосчитатьИтогиВалютыПоКолонкам("", НовыйРодительУИД);
			//ПосчитатьИтогиПроцентовПоКолонкам("", НовыйРодительУИД);
			ПосчитатьИтогиПроцентовПоКолонкам("", );
			ПосчитатьФактическуюДлительностьПоКолонкам("", НовыйРодительУИД);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроектПриИзменении(Элемент)
	ЭкземплярВерсии = ПолучитьРеквизитОбъекта(Проект, "грзнтРедактируемыйЭкземплярВерсии");
	ВидВерсииПлана = ПолучитьРеквизитОбъекта(ЭкземплярВерсии, "ВидВерсии");
	ИзменениеПроектаЭкземпляраВерсии();
	
	Для Каждого ЭлементДерева ИЗ ДеревоЭкземпляровВерсийПланов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЭкземпляровВерсийПланов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроектПриИзмененииНаСервере()
	//ПраваПользователяПоПроекту.Загрузить(грзнтПраваДоступаСервер.ПраваПользователяПоПроекту(Проект, Проект.грзнтРедактируемыйЭкземплярВерсии, Неопределено));
	ПраваПользователяПоПроекту.Загрузить(грзнтПраваДоступаСервер.ПраваПользователяПоПроекту(Проект, ЭкземплярВерсии, Неопределено));
	НастроитьФормуПоПравамПользователя();
	НастроитьВидимостьПлановПоРесурсам();
КонецФункции

&НаКлиенте
Процедура ЭкземплярВерсииПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(Проект) Тогда
		Проект = ПолучитьРеквизитОбъекта(ЭкземплярВерсии, "Владелец");
	КонецЕсли;
	ВидВерсииПлана = ПолучитьРеквизитОбъекта(ЭкземплярВерсии, "ВидВерсии");
	ИзменениеПроектаЭкземпляраВерсии();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПроектаНаСервере()
	Если ЗначениеЗаполнено(Проект) И ЗначениеЗаполнено(ЭкземплярВерсии) Тогда
		СформироватьТаблицуПроектаПоЭкземпляруНаСервере();
	Иначе
	КонецЕсли;
	
	СформироватьДеревоЭкземпляровВерсийПланов(Проект);
	
	ПоказатьКнопкиКоличествоУровнейНаСервере();
	
	ОбновитьДиаграммуГанта(ЭтаФорма);
	
	Если ПроверятьПраваНаТаблицы Тогда
		ПроектПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеПроектаЭкземпляраВерсии()
	ДеревоПроекта.ПолучитьЭлементы().Очистить();
	
	ДеревоЭкземпляровВерсийПланов.ПолучитьЭлементы().Очистить();
	
	СписокДействийДляИстории.Очистить();
	
	ПраваПользователяПоПроекту.Очистить();
	
	ТаблицаПредшественники.Очистить();
	ТаблицаПроектаКопия.Очистить();
	ДеревоСДР.ПолучитьЭлементы().Очистить();
	
	ПриИзмененииПроектаНаСервере();
	
	СформироватьСоответствияДеревоСДРИтоги();
	
	Если ЗначениеЗаполнено(ЭкземплярВерсии) Тогда
		ЭтаФорма.КлючУникальности = ЭкземплярВерсии.УникальныйИдентификатор();
	Иначе
		ЭтаФорма.КлючУникальности = Неопределено;
	КонецЕсли;
	
	Для Каждого ЭлементДерева ИЗ ДеревоЭкземпляровВерсийПланов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоЭкземпляровВерсийПланов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	Для Каждого ЭлементДерева ИЗ ДеревоПроекта.ПолучитьЭлементы() Цикл
		Если НЕ Элементы.ДеревоПроекта.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда Элементы.ДеревоПроекта.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина); КонецЕсли;
	КонецЦикла;
	
	СформироватьЗаголовокОкна();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСоответствияДеревоСДРИтоги()
	тСоответствиеТаблицыУИД = Новый Соответствие;
	тСоответствиеТаблицыРодитель = Новый Соответствие;
	Для Каждого СтрокаТаблицыПроекта ИЗ ТаблицаПроектаКопия Цикл
		тСоответствиеТаблицыУИД.Вставить(СтрокаТаблицыПроекта.УИД, СтрокаТаблицыПроекта);
		
		СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыПроекта.Родитель), " ", СтрокаТаблицыПроекта.Родитель);
		МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
		Если МассивРодитель = Неопределено Тогда
			МассивРодитель = Новый Массив;
		КонецЕсли;
		МассивРодитель.Добавить(СтрокаТаблицыПроекта);
		
		тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
	КонецЦикла;
	
	тСоответствиеПредшественникиУИД = Новый Соответствие;
	тСоответствиеПредшественникиПредшественникУИД = Новый Соответствие;
	Для Каждого СтрокаПлана ИЗ ТаблицаПредшественники Цикл
		МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПлана.УИД);
		Если МассивПредшественники = Неопределено Тогда
			МассивПредшественники = Новый Массив;
		КонецЕсли;
		МассивПредшественники.Добавить(СтрокаПлана);
		тСоответствиеПредшественникиУИД.Вставить(СтрокаПлана.УИД, МассивПредшественники);
		
		МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПлана.ПредшественникУИД);
		Если МассивПредшественники = Неопределено Тогда
			МассивПредшественники = Новый Массив;
		КонецЕсли;
		МассивПредшественники.Добавить(СтрокаПлана);
		тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПлана.ПредшественникУИД, МассивПредшественники);
	КонецЦикла;
	
	ПересчитатьСДРДерева(, Истина);
	
	ПосчитатьИтогиПоКолонкам("", );
	ПосчитатьИтогиВалютыПоКолонкам("", );
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	ПосчитатьФактическуюДлительностьПоКолонкам("", );
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФормы 

&НаКлиенте
Процедура СформироватьЗаголовокОкна()
	Если НЕ Проект.Пустая() И ПолучитьРеквизитОбъекта(Проект, "грзнтЭтоШаблонПроекта") = Истина Тогда
		ЭтаФорма.Заголовок = "Редактор шаблона: " + СокрЛП(Проект);
	ИначеЕсли ЗначениеЗаполнено(Проект) Тогда
		ЭтаФорма.Заголовок = "Редактор проекта: " + СокрЛП(Проект);
	Иначе
		ЭтаФорма.Заголовок = "Редактор проекта";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроекКолонок(Очищать) Экспорт
	Если Очищать Тогда
		НастройкаКолонок.Очистить();
	КонецЕсли;
	СписокКолонок = ПолучитьСписокКолонокСИтогамиСумм();
	
	// Порядок по умолчанию
	//МассивНаименований = Новый Массив;
	СписокНаименований = Новый СписокЗначений;
	СписокНаименований.Добавить("ДеревоПроектаНаименованиеЗадачи", "Наименование задачи");
	СписокНаименований.Добавить("ДеревоПроектаНомерСтроки", "Номер строки");
	СписокНаименований.Добавить("ДеревоПроектаКодСДР", "Код СДР");
	СписокНаименований.Добавить("ДеревоПроектаКартинкаОпубликована", "Публикация задачи");
	СписокНаименований.Добавить("ДеревоПроектаРучнойВвод", "РВ");
	СписокНаименований.Добавить("ДеревоПроектаДатаНачала", "Дата начала");
	СписокНаименований.Добавить("ДеревоПроектаДатаОкончания", "Дата окончания");
	СписокНаименований.Добавить("ДеревоПроектаФактическаяДатаНачала", "Факт. дата начала");
	СписокНаименований.Добавить("ДеревоПроектаФактическаяДатаОкончания", "Факт. дата окончания");
	СписокНаименований.Добавить("ДеревоПроектаДлительность", "Длительность");
	СписокНаименований.Добавить("ДеревоПроектаЕдиницаВремени", "Единица времени");
	СписокНаименований.Добавить("ДеревоПроектаФактическаяДлительность", "Факт. длительность");
	СписокНаименований.Добавить("ДеревоПроектаКалендарь", "Календарь");
	СписокНаименований.Добавить("ДеревоПроектаПроцентГотовности", "%");
	СписокНаименований.Добавить("ДеревоПроектаПроцентПлановойДлительности", "% по плановой длительности");
	СписокНаименований.Добавить("ДеревоПроектаПроцентПлановыхТрудозатрат", "% по плановым трудозатратам");
	СписокНаименований.Добавить("ДеревоПроектаВидОперации", "Вид операции");
	СписокНаименований.Добавить("ДеревоПроектаТипОграничения", "Тип ограничения");
	СписокНаименований.Добавить("ДеревоПроектаКартинкаПредшественники", "Предшественники");
	СписокНаименований.Добавить("ДеревоПроектаНадписьПредшественники", "Предшественники СДР");
	СписокНаименований.Добавить("ДеревоПроектаНадписьПредшественникиПоНомеруСтроки", "Предшественники №");
	СписокНаименований.Добавить("ДеревоПроектаНадписьПоследователи", "Последователи СДР");
	СписокНаименований.Добавить("ДеревоПроектаНадписьПоследователиПоНомеруСтроки", "Последователи №");
	СписокНаименований.Добавить("ДеревоПроектаКонтрактныйДатаНачала", "КН");
	СписокНаименований.Добавить("ДеревоПроектаКонтрактныйДатаОкончания", "КО");
	СписокНаименований.Добавить("ДеревоПроектаКонтрактныйДатаНачалаОтклонение", "КН - ТН");
	СписокНаименований.Добавить("ДеревоПроектаКонтрактныйДатаОкончанияОтклонение", "КН - ТО");
	СписокНаименований.Добавить("ДеревоПроектаАктуализацияДатаНачалаОтклонение", "ТН - ТД");
	СписокНаименований.Добавить("ДеревоПроектаАктуализацияДатаОкончанияОтклонение", "ТО - ТД");
	СписокНаименований.Добавить("ДеревоПроектаСуммаПоступление", "Поступление");
	СписокНаименований.Добавить("ДеревоПроектаВалютаПоступлений", "Валюта поступлений");
	СписокНаименований.Добавить("ДеревоПроектаСуммаПоступлениеУпр", "Поступление (упр)");
	СписокНаименований.Добавить("ДеревоПроектаСуммаВыплата", "Выплата");
	СписокНаименований.Добавить("ДеревоПроектаВалютаВыплат", "Валюта выплат");
	СписокНаименований.Добавить("ДеревоПроектаСуммаВыплатаУпр", "Выплата (упр)");
	СписокНаименований.Добавить("ДеревоПроектаСуммаДоход", "Доход");
	СписокНаименований.Добавить("ДеревоПроектаВалютаДоходов", "Валюта доходов");
	СписокНаименований.Добавить("ДеревоПроектаСуммаДоходУпр", "Доход (упр)");
	СписокНаименований.Добавить("ДеревоПроектаСуммаРасход", "Расход");
	СписокНаименований.Добавить("ДеревоПроектаВалютаРасходов", "Валюта расходов");
	СписокНаименований.Добавить("ДеревоПроектаСуммаРасходУпр", "Расход (упр)");
	СписокНаименований.Добавить("ДеревоПроектаСуммаРоли", "Роли (финансы)");
	СписокНаименований.Добавить("ДеревоПроектаКоличествоРоли", "Роли (часы)");
	СписокНаименований.Добавить("ДеревоПроектаНадписьРоли", "Роли (список)");
	СписокНаименований.Добавить("ДеревоПроектаСуммаРесурсы", "Ресурсы (финансы)");
	СписокНаименований.Добавить("ДеревоПроектаКоличествоРесурсы", "Ресурсы (часы)");
	СписокНаименований.Добавить("ДеревоПроектаНадписьРесурсы", "Ресурсы (список)");
	СписокНаименований.Добавить("ДеревоПроектаСуммаРесурсыОперативный", "Ресурсы оперативные (финансы)");
	СписокНаименований.Добавить("ДеревоПроектаКоличествоРесурсыОперативный", "Ресурсы оперативные (часы)");
	СписокНаименований.Добавить("ДеревоПроектаНадписьРесурсыОперативный", "Ресурсы оперативные (список)");
	СписокНаименований.Добавить("ДеревоПроектаСуммаМатериалы", "Материалы (сумма)");
	СписокНаименований.Добавить("ДеревоПроектаЕстьКомментарий", "Есть комментарий");
	
	
	// Добавим все новые колонки, которых раньше не было. Чисто теоретически
	Для Каждого ЭлементСписка ИЗ СписокНаименований Цикл
		ЭлементКолонка = Элементы[ЭлементСписка.Значение];
		СтрокиНастройкиКолонок = НастройкаКолонок.НайтиСтроки(Новый Структура("ИмяКолонки", ЭлементКолонка.Имя));
		Если ТипЗнч(ЭлементКолонка) = Тип("ГруппаФормы") Тогда
		ИначеЕсли НастройкаКолонок.НайтиСтроки(Новый Структура("ИмяКолонки", ЭлементКолонка.Имя)).Количество() = 0 Тогда
			СтрокаНастройки = НастройкаКолонок.Добавить();
			СтрокаНастройки.ИмяКолонки = ЭлементКолонка.Имя;
			СтрокаНастройки.Заголовок = ЭлементСписка.Представление;
			СтрокаНастройки.Видимость = ЭлементКолонка.Видимость ИЛИ Очищать;
			Если СписокКолонок.НайтиПоЗначению(СтрокаНастройки.ИмяКолонки) = Неопределено Тогда
				СтрокаНастройки.Функция = "----";
			Иначе
				СтрокаНастройки.Функция = "СУММА";
			КонецЕсли;
		ИначеЕсли ПустаяСтрока(СтрокиНастройкиКолонок.Получить(0).Заголовок) Тогда
			СтрокиНастройкиКолонок.Получить(0).Заголовок = ЭлементКолонка.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	// он спятил, не слушайте его
	//// Сначала пройдёмся по колонкам дерева как они есть, чтобы сохранить текущий порядок
	//Для Каждого ЭлементКолонка ИЗ Элементы.ДеревоПроекта.ПодчиненныеЭлементы Цикл
	//	ЭлементСписка = СписокНаименований.НайтиПоЗначению(ЭлементКолонка);
	//	СтрокиНастройкиКолонок = НастройкаКолонок.НайтиСтроки(Новый Структура("ИмяКолонки", ЭлементКолонка.Имя));
	//	Если ЭлементСписка = Неопределено Тогда
	//		Продолжить;
	//		// Пропустим, т.к. это может быть группа, меню и прочее
	//	ИначеЕсли СтрокиНастройкиКолонок.Количество() = 0 Тогда
	//		СтрокаНастройки = НастройкаКолонок.Добавить();
	//		СтрокаНастройки.ИмяКолонки = ЭлементКолонка.Имя;
	//		СтрокаНастройки.Заголовок = ЭлементСписка.Представление;
	//		СтрокаНастройки.Видимость = ЭлементКолонка.Видимость ИЛИ Очищать;
	//		Если СписокКолонок.НайтиПоЗначению(СтрокаНастройки.ИмяКолонки) = Неопределено Тогда
	//			СтрокаНастройки.Функция = "----";
	//		Иначе
	//			СтрокаНастройки.Функция = "СУММА";
	//		КонецЕсли;
	//	ИначеЕсли ПустаяСтрока(СтрокиНастройкиКолонок.Получить(0).Заголовок) Тогда
	//		СтрокиНастройкиКолонок.Получить(0).Заголовок = ЭлементКолонка.Заголовок;
	//	КонецЕсли;
	//	СписокНаименований.Удалить(ЭлементСписка);
	//КонецЦикла;
	Возврат СписокКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокКолонокСИтогамиСумм() Экспорт
	СписокКолонок = Новый СписокЗначений;
	СписокКолонок.Добавить("ДеревоПроектаСуммаПоступление");
	СписокКолонок.Добавить("ДеревоПроектаСуммаПоступлениеУпр");
	СписокКолонок.Добавить("ДеревоПроектаСуммаВыплата");
	СписокКолонок.Добавить("ДеревоПроектаСуммаВыплатаУпр");
	СписокКолонок.Добавить("ДеревоПроектаСуммаДоход");
	СписокКолонок.Добавить("ДеревоПроектаСуммаДоходУпр");
	СписокКолонок.Добавить("ДеревоПроектаСуммаРасход");
	СписокКолонок.Добавить("ДеревоПроектаСуммаРасходУпр");
	СписокКолонок.Добавить("ДеревоПроектаСуммаРоли");
	СписокКолонок.Добавить("ДеревоПроектаКоличествоРоли");
	СписокКолонок.Добавить("ДеревоПроектаСуммаРесурсы");
	СписокКолонок.Добавить("ДеревоПроектаКоличествоРесурсы");
	СписокКолонок.Добавить("ДеревоПроектаСуммаРесурсыОперативный");
	СписокКолонок.Добавить("ДеревоПроектаКоличествоРесурсыОперативный");
	СписокКолонок.Добавить("ДеревоПроектаСуммаМатериалы");
	Возврат СписокКолонок;
КонецФункции

&НаСервере
Функция УстановитьНастройкуКолонок() Экспорт
	Для Каждого СтрокаКолонки ИЗ НастройкаКолонок Цикл
		Если СтрокаКолонки.ИмяКолонки = "ДеревоПроектаКартинкаОпубликована" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ТаблицаПроектаКопия";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "КартинкаОпубликована";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаПроцентГотовности" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ТаблицаПроектаКопия";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "ПроцентГотовности";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаПоступление" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланДвиженияДенежныхСредств";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Сумма";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаПоступлениеУпр" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланДвиженияДенежныхСредств";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "СуммаУпр";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаВыплата" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланДвиженияДенежныхСредств";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Сумма";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаВыплатаУпр" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланДвиженияДенежныхСредств";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "СуммаУпр";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаДоход" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланДоходов";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Сумма";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаДоходУпр" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланДоходов";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "СуммаУпр";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаРасход" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланРасходов";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Сумма";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаРасходУпр" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланРасходов";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "СуммаУпр";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаРоли" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланРолейОбщая";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Сумма";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаКоличествоРоли" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланРолейОбщая";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Количество";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаРесурсы" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланРесурсовОбщая";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Сумма";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаКоличествоРесурсы" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланРесурсовОбщая";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Количество";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаРесурсыОперативный" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланРесурсовОперативный";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Сумма";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаКоличествоРесурсыОперативный" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланРесурсовОперативный";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Количество";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "ДеревоПроектаСуммаМатериалы" Тогда
			СтрокаКолонки.ИмяТаблицыФормы = "ПланМатериаловОбщая";
			СтрокаКолонки.ИмяРеквизитаТаблицы = "Сумма";
		ИначеЕсли СтрокаКолонки.ИмяКолонки = "----" Тогда
			НастройкаКолонок.Удалить(СтрокаКолонки);
		КонецЕсли;
	КонецЦикла;
	
	КолонкиПересчет = "";
	КолонкиПересчетВалюты = "";
	КолонкиПересчетПроценты = "";
	КолонкиПересчетФактическаяДлительность = "";
	
	Для Каждого ЭлементСписка ИЗ НастройкаКолонок Цикл
		// ((( grznt.Solntsev 06.10.2016
		Если Элементы.Найти(ЭлементСписка.ИмяКолонки) <> Неопределено Тогда
			// ))) grznt.Solntsev 06.10.2016
			Если Элементы[ЭлементСписка.ИмяКолонки].Видимость = Ложь И ЭлементСписка.Видимость = Истина Тогда
				Если ЭлементСписка.ИмяКолонки = "ДеревоПроектаСуммаПоступление" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаСуммаВыплата"
					ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаСуммаДоход" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаСуммаРасход"
					ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаСуммаРоли" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаКоличествоРоли"
					ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаСуммаРесурсы" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаКоличествоРесурсы"
					ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаСуммаРесурсыОперативный" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаКоличествоРесурсыОперативный"
					ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаСуммаМатериалы" Тогда
					КолонкиПересчет = КолонкиПересчет + ", " + СтрЗаменить(ЭлементСписка.ИмяКолонки, "ДеревоПроекта", "");;
					
				ИначеЕсли ЭлементСписка.ИмяКолонки = "ДеревоПроектаНадписьРесурсыОперативный" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаВалютаДоходов" 
					ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаНадписьРесурсы" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаВалютаВыплат"
					ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаНадписьРоли" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаВалютаПоступлений" 
					ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаВалютаРасходов" Тогда
					КолонкиПересчетВалюты = КолонкиПересчетВалюты + ", " + СтрЗаменить(ЭлементСписка.ИмяКолонки, "ДеревоПроекта", "");
					
				ИначеЕсли ЭлементСписка.ИмяКолонки = "ДеревоПроектаПроцентПлановыхТрудозатрат" ИЛИ ЭлементСписка.ИмяКолонки = "ДеревоПроектаПроцентПлановойДлительности" Тогда
					КолонкиПересчетПроценты = КолонкиПересчетПроценты + ", " + СтрЗаменить(ЭлементСписка.ИмяКолонки, "ДеревоПроекта", "");
				ИначеЕсли ЭлементСписка.ИмяКолонки = "ДеревоПроектаФактическаяДлительность" Тогда
					КолонкиПересчетФактическаяДлительность = КолонкиПересчетФактическаяДлительность + ", " + СтрЗаменить(ЭлементСписка.ИмяКолонки, "ДеревоПроекта", "");
				КонецЕсли;
			КонецЕсли;
			Элементы[ЭлементСписка.ИмяКолонки].Видимость = ЭлементСписка.Видимость;
			Элементы[ЭлементСписка.ИмяКолонки].Заголовок = ЭлементСписка.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 0 По НастройкаКолонок.Количество() - 2 Цикл
		К = НастройкаКолонок.Количество() - 2 - Сч;
		// ((( grznt.Solntsev 06.10.2016
		Если Элементы.Найти(НастройкаКолонок.Получить(К).ИмяКолонки) <> Неопределено И Элементы.Найти(НастройкаКолонок.Получить(К+1).ИмяКолонки) <> Неопределено Тогда
			// ))) grznt.Solntsev 06.10.2016
			Элементы.Переместить(Элементы[НастройкаКолонок.Получить(К).ИмяКолонки], Элементы.ДеревоПроекта, Элементы[НастройкаКолонок.Получить(К+1).ИмяКолонки]);
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 0 По Элементы.ДеревоПроекта.ПодчиненныеЭлементы.Количество() - 1 Цикл
		ЭлементДерева = Элементы.ДеревоПроекта.ПодчиненныеЭлементы.Получить(Сч);
		Если Сч < КоличествоФиксированныхКолонок Тогда
			ЭлементДерева.ФиксацияВТаблице = ФиксацияВТаблице.Лево;
		Иначе
			ЭлементДерева.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("КолонкиПересчет, КолонкиПересчетВалюты, КолонкиПересчетПроценты, КолонкиПересчетФактическаяДлительность", Сред(КолонкиПересчет, 3), Сред(КолонкиПересчетВалюты, 3), Сред(КолонкиПересчетПроценты, 3), Сред(КолонкиПересчетФактическаяДлительность, 3));
КонецФункции

&НаКлиенте
Процедура ПоказатьУровеньДерева(УзелДерева, Уровень, ТекущийУровень)
	Для Каждого ЭлементДерева ИЗ УзелДерева.ПолучитьЭлементы() Цикл
		Если Уровень <= ТекущийУровень Тогда
			Если Элементы.ДеревоПроекта.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда
				ПоказатьУровеньДерева(ЭлементДерева, Уровень, ТекущийУровень +1);
				Элементы.ДеревоПроекта.Свернуть(ЭлементДерева.ПолучитьИдентификатор());
			КонецЕсли;
		Иначе
			Если НЕ Элементы.ДеревоПроекта.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда
				Элементы.ДеревоПроекта.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
			КонецЕсли;
			ПоказатьУровеньДерева(ЭлементДерева, Уровень, ТекущийУровень + 1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКнопкиКоличествоУровней()
	Если РежимОтображенияСписок Тогда
		Для К = 1 По 999 Цикл
			ИмяКнопки = "КнопкаПоказатьУровень" + Формат(К, "ЧГ=;ЧН=");
			КнопкаУровня = Элементы.Найти(ИмяКнопки);
			Если КнопкаУровня = Неопределено  Тогда
				Возврат;
			КонецЕсли; 
			КнопкаУровня.Видимость = Ложь;
		КонецЦикла;
	Иначе
		мУровень = ВернутьМаксимальныйУровень(ДеревоПроекта, 0);
		Для К = 1 По мУровень Цикл
			ИмяКнопки = "КнопкаПоказатьУровень" + Формат(К, "ЧГ=;ЧН=");
			КнопкаУровня = Элементы.Найти(ИмяКнопки);
			Если КнопкаУровня = Неопределено  Тогда
				ПоказатьКнопкиКоличествоУровнейНаСервере();
				Возврат;
			КонецЕсли; 
		КонецЦикла;
		К = мУровень + 1;
		Пока Элементы.Найти("КнопкаПоказатьУровень" + Формат(К, "ЧГ=;ЧН=")) <> Неопределено Цикл
			ПоказатьКнопкиКоличествоУровнейНаСервере();
			Возврат;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьКнопкиКоличествоУровнейНаСервере()
	мУровень = ВернутьМаксимальныйУровень(ДеревоПроекта, 0);
	Для К = 1 По мУровень Цикл
		ИмяКнопки = "КнопкаПоказатьУровень" + Формат(К, "ЧГ=;ЧН=");
		КнопкаУровня = Элементы.Найти(ИмяКнопки);
		Если КнопкаУровня = Неопределено  Тогда
			КнопкаУровня = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), Элементы.ГруппаКнопокУровней);
			КнопкаУровня.Заголовок = К;
			КнопкаУровня.Отображение = ОтображениеКнопки.Текст;
			КнопкаУровня.ИмяКоманды = "КомандаПоказатьУровень";
		КонецЕсли; 
	КонецЦикла;
	К = мУровень + 1;
	Пока Элементы.Найти("КнопкаПоказатьУровень" + Формат(К, "ЧГ=;ЧН=")) <> Неопределено Цикл
		Элементы.Удалить(Элементы.Найти("КнопкаПоказатьУровень" + Формат(К, "ЧГ=;ЧН=")));
		К = К + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоПравамПользователя()
	
	// Версии
	ИмяПрва = "Версии проекта";
	ЧтениеВерсий 	= ЕстьПраво(ИмяПрва, "Чтение");
	ИзменениеВерсий = ЕстьПраво(ИмяПрва, "Изменение");
	
	Элементы.КомандаПоказатьСпрятатьДеревоЭкземпляров.Видимость 								= ЧтениеВерсий;
	Элементы.ФормаКомандаЗаписатьСтруктуруПроектаВДругойЭкземпляр.Видимость 					= ЧтениеВерсий;
	Элементы.ДеревоПроектаКомандаДереваОтобразитьЗадачуВДругойВерсии.Видимость 					= ЧтениеВерсий;
	Элементы.ГруппаЭкземплярВерсии.ТолькоПросмотр 												= НЕ ЧтениеВерсий;
	Элементы.ГруппаСтраницыЛеваяПанель.Видимость 												= ЧтениеВерсий;
	Элементы.ГруппаСтраницыЛеваяПанель.ТекущаяСтраница 											= Элементы.СтраницаДереваЭкземпляров;
	Элементы.ДеревоПроектаКомандаДереваОтобразитьЗадачуВДругойВерсии.Видимость 					= ЧтениеВерсий;
	
	Элементы.ФормаКомандаЗаписатьСтруктуруПроектаВДругойЭкземпляр.Видимость 					= ИзменениеВерсий;
	Элементы.ДеревоПроектаКомандаДереваОтобразитьЗадачуВДругойВерсии.Видимость 					= ИзменениеВерсий;
	Элементы.ДеревоПроектаКонтекстноеМенюКомандаДереваОтобразитьЗадачуВДругойВерсии.Видимость 	= ИзменениеВерсий;
	
	// Сроки
	ИмяПрава = "РегистрСведений.грзнтСрокиПроектов";
	ЧтениеСроков = ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеСроков = ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ГруппаДатаКалендарь.Видимость 			= ЧтениеСроков;
	Элементы.ДеревоПроектаРучнойВвод.Видимость 		= ЧтениеСроков;
	Элементы.ДеревоПроектаДатаНачала.Видимость 		= ЧтениеСроков;
	Элементы.ДеревоПроектаДатаОкончания.Видимость 	= ЧтениеСроков;
	Элементы.ДеревоПроектаДлительность.Видимость 	= ЧтениеСроков;
	Элементы.ДеревоПроектаЕдиницаВремени.Видимость 	= ЧтениеСроков;
	Элементы.ДеревоПроектаТипОграничения.Видимость 	= ЧтениеСроков;
	Элементы.ДеревоПроектаКалендарь.Видимость 		= ЧтениеСроков;
	Элементы.ДеревоПроектаТипОграниченияПанельЗадач.Видимость	= ЧтениеСроков;
	Элементы.ДеревоПроектаДатаОграниченияПанельЗадач.Видимость	= ЧтениеСроков;
	
	Элементы.ГруппаДатаКалендарь.ТолькоПросмотр 			= НЕ ИзменениеСроков;
	Элементы.ДеревоПроектаРучнойВвод.ТолькоПросмотр 		= НЕ ИзменениеСроков;
	Элементы.ДеревоПроектаДатаНачала.ТолькоПросмотр 		= НЕ ИзменениеСроков;
	Элементы.ДеревоПроектаДатаОкончания.ТолькоПросмотр 		= НЕ ИзменениеСроков;
	Элементы.ДеревоПроектаДлительность.ТолькоПросмотр 		= НЕ ИзменениеСроков;
	Элементы.ДеревоПроектаЕдиницаВремени.ТолькоПросмотр		= НЕ ИзменениеСроков;
	Элементы.ДеревоПроектаТипОграничения.ТолькоПросмотр 	= НЕ ИзменениеСроков;
	Элементы.ДеревоПроектаКалендарь.ТолькоПросмотр 			= НЕ ИзменениеСроков;
	
	Элементы.ДеревоПроектаТипОграниченияПанельЗадач.ТолькоПросмотр 	= НЕ ИзменениеСроков;
	Элементы.ДеревоПроектаДатаОграниченияПанельЗадач.ТолькоПросмотр = НЕ ИзменениеСроков;
	
	// СДР
	ИмяПрва = "РегистрСведений.грзнтСДРПроектов";
	ИзменениеСДР = ЕстьПраво(ИмяПрва, "Изменение");
	
	Элементы.ДеревоПроекта.КоманднаяПанель.Доступность 				= ИзменениеСДР;
	Элементы.ДеревоПроекта.ИзменятьСоставСтрок						= ИзменениеСДР;
	Элементы.ДеревоПроекта.ИзменятьПорядокСтрок						= ИзменениеСДР;
	Элементы.ДеревоПроектаНаименованиеЗадачи.ТолькоПросмотр			= НЕ ИзменениеСДР;
	Элементы.НаименованиеРодителяПанельЗадач.ТолькоПросмотр			= НЕ ИзменениеСДР;
	
	ИмяПрва = "РегистрСведений.грзнтОпубликованныеЗадачи";
	ЧтениеОпубликована = ЕстьПраво(ИмяПрва, "Чтение");
	Элементы.ДеревоПроектаКартинкаОпубликована.Видимость = ЧтениеОпубликована;
	Элементы.ДеревоПроектаКонтекстноеМенюКомандаИсторияПубликацииЗадачи.Видимость = ЧтениеОпубликована;
	ИзменениеОпубликована = ЕстьПраво(ИмяПрва, "Изменение");
	Элементы.ДеревоПроектаКонтекстноеМенюКомандаОпубликоватьЗадачу.Видимость = ИзменениеОпубликована;
	Элементы.ДеревоПроектаКонтекстноеМенюКомандаСнятьЗадачуСПубликации.Видимость = ИзменениеОпубликована;
	
	ИмяПрва = "РегистрСведений.грзнтВнешниеСвязиЗадачПроекта";
	ЧтениеВнешние = ЕстьПраво(ИмяПрва, "Чтение");
	Элементы.ДеревоПроектаКартинкаПредшественники.Видимость = ЧтениеВнешние;
	
	// Фактические сроки
	ИмяПрава = "РегистрСведений.грзнтФактическиеСрокиПроектов";
	ЧтениеФактическихСроков 	= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеФактическихСроков 	= ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ДеревоПроектаФактическаяДатаНачала.Видимость = ЧтениеФактическихСроков;
	Элементы.ДеревоПроектаФактическаяДатаОкончания.Видимость = ЧтениеФактическихСроков;
	Элементы.ДеревоПроектаФактическаяДлительность.Видимость = ЧтениеФактическихСроков;
	
	Элементы.ДеревоПроектаФактическаяДатаНачалаПанельЗадач.Видимость = ЧтениеФактическихСроков;
	Элементы.ДеревоПроектаФактическаяДатаОкончанияПанельЗадач.Видимость = ЧтениеФактическихСроков;
	Элементы.ДеревоПроектаФактическаяДлительностьПанельЗадач.Видимость = ЧтениеФактическихСроков;
	
	Элементы.ДеревоПроектаФактическаяДатаНачалаПанельЗадач.Доступность = ИзменениеФактическихСроков;
	Элементы.ДеревоПроектаФактическаяДатаОкончанияПанельЗадач.Доступность = ИзменениеФактическихСроков;
	
	// Процент выполнения
	ИмяПрава = "РегистрСведений.грзнтФактическиеПроцентыГотовности";
	ЧтениеПроцентаВыполнения 	= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПроцентаВыполнения = ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ДеревоПроектаПроцентГотовности.Видимость 									= ЧтениеПроцентаВыполнения;
	Элементы.ДеревоПроектаПроцентГотовностиПанельЗадач.Видимость						= ЧтениеПроцентаВыполнения;
	Элементы.ДеревоПроектаПроцентПлановойДлительности.Видимость 						= ЧтениеПроцентаВыполнения;
	Элементы.ДеревоПроектаПроцентПлановойДлительностиПанельЗадач.Видимость				= ЧтениеПроцентаВыполнения;
	Элементы.ДеревоПроектаПроцентПлановыхТрудозатрат.Видимость 							= ЧтениеПроцентаВыполнения;
	Элементы.ДеревоПроектаПроцентПлановыхТрудозатратПанельЗадач.Видимость				= ЧтениеПроцентаВыполнения;
	Элементы.ДеревоПроектаФлагПроцентГотовностиПанельЗадач.Видимость 					= ЧтениеПроцентаВыполнения;
	
	Элементы.ДеревоПроектаПроцентГотовностиПанельЗадач.Доступность						= ИзменениеПроцентаВыполнения;
	Элементы.ДеревоПроектаФлагПроцентГотовностиПанельЗадач.Доступность 					= ИзменениеПроцентаВыполнения;
	
	// Финансы БДР	
	ИмяПрава = "РегистрНакопления.грзнтПланыДоходовРасходов";
	ЧтениеПлановБДР 	= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПлановБДР 	= ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ДеревоПроектаСуммаДоход.Видимость 		= ЧтениеПлановБДР;
	Элементы.ДеревоПроектаСуммаДоходУпр.Видимость 		= ЧтениеПлановБДР;
	Элементы.ДеревоПроектаСуммаРасход.Видимость 	= ЧтениеПлановБДР;
	Элементы.ДеревоПроектаСуммаРасходУпр.Видимость 	= ЧтениеПлановБДР;
	
	Элементы.ДеревоПроектаВалютаДоходов.Видимость 	= ЧтениеПлановБДР;
	Элементы.ДеревоПроектаВалютаРасходов.Видимость 	= ЧтениеПлановБДР;
	Элементы.СтраницаПланДоходов.Видимость = ЧтениеПлановБДР;
	Элементы.СтраницаПланДоходов.ТолькоПросмотр = НЕ ИзменениеПлановБДР;
	Элементы.СтраницаПланРасходов.Видимость = ЧтениеПлановБДР;
	Элементы.СтраницаПланРасходов.ТолькоПросмотр = НЕ ИзменениеПлановБДР;
	
	// Финансы ДДС
	ИмяПрава = "РегистрНакопления.грзнтПланыДвиженияДенежныхСредств";
	ЧтениеПлановДДС 	= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПлановДДС 	= ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ДеревоПроектаСуммаПоступление.Видимость 	= ЧтениеПлановДДС;
	Элементы.ДеревоПроектаСуммаПоступлениеУпр.Видимость 	= ЧтениеПлановДДС;
	Элементы.ДеревоПроектаСуммаВыплата.Видимость 		= ЧтениеПлановДДС;
	Элементы.ДеревоПроектаСуммаВыплатаУпр.Видимость 		= ЧтениеПлановДДС;
	
	Элементы.ДеревоПроектаВалютаПоступлений.Видимость 	= ЧтениеПлановДДС;
	Элементы.ДеревоПроектаВалютаВыплат.Видимость 	= ЧтениеПлановДДС;
	Элементы.СтраницаПланДДС.Видимость = ЧтениеПлановДДС;
	Элементы.СтраницаПланДДС.ТолькоПросмотр = НЕ ИзменениеПлановДДС;
	
	// Трудозатраты предварительного уровня (часы)
	ИмяПрава = "РегистрНакопления.грзнтПланыЗатратРолейЧасы";
	ЧтениеПлановРолейЧасы 		= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПлановРолейЧасы 	= ЕстьПраво(ИмяПрава, "Изменение");
	Элементы.ДеревоПроектаКоличествоРоли.Видимость 		= ЧтениеПлановРолейЧасы;
	Элементы.ТаблицаПланРесурсовОбщаяКоличество.Видимость = ЧтениеПлановРолейЧасы;
	Элементы.ТаблицаПланРесурсовОбщаяКоличество.ТолькоПросмотр = НЕ ИзменениеПлановРолейЧасы;
	                                                	
	// Трудозатраты предварительного уровня (финансы)
	ИмяПрава = "РегистрНакопления.грзнтПланыЗатратРолейФинансы";
	ЧтениеПлановРолейФинансы 		= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПлановРолейФинансы 	= ЕстьПраво(ИмяПрава, "Изменение");
	Элементы.ДеревоПроектаСуммаРоли.Видимость 			= ЧтениеПлановРолейФинансы;
	Элементы.ДеревоПроектаСуммаРоли.ТолькоПросмотр 		= НЕ ИзменениеПлановРолейФинансы;
	
	Элементы.ТаблицаПланРесурсовОбщаяСумма.Видимость = ЧтениеПлановРолейФинансы;
	Элементы.ТаблицаПланРесурсовОбщаяСумма.ТолькоПросмотр = НЕ ИзменениеПлановРолейФинансы;
	Элементы.ТаблицаПланРесурсовОбщаяВалюта.Видимость = ЧтениеПлановРолейФинансы;
	Элементы.ТаблицаПланРесурсовОбщаяВалюта.ТолькоПросмотр = НЕ ИзменениеПлановРолейФинансы;
	
	Элементы.ДеревоПроектаНадписьРоли.Видимость = ЧтениеПлановРолейЧасы ИЛИ ЧтениеПлановРолейФинансы;
	
	Элементы.СтраницаПланРолей.Видимость = ЧтениеПлановРолейЧасы ИЛИ ЧтениеПлановРолейФинансы;
	Элементы.СтраницаПланРолей.ТолькоПросмотр = НЕ (ИзменениеПлановРолейФинансы ИЛИ ИзменениеПлановРолейЧасы);
	
	// Трудозатраты окончательного уровня (часы)
	ИмяПрава = "РегистрНакопления.грзнтПланыЗатратТрудовыхРесурсовЧасы";
	ЧтениеПлановРесурсовЧасы 		= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПлановРесурсовЧасы 	= ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ДеревоПроектаКоличествоРесурсы.Видимость = ЧтениеПлановРесурсовЧасы;
	Элементы.ДеревоПроектаКоличествоРесурсыОперативный.Видимость = ЧтениеПлановРесурсовЧасы;
	
	Элементы.ТаблицаПланРесурсовОбщаяКоличество.Видимость = ЧтениеПлановРесурсовЧасы;
	Элементы.ТаблицаПланРесурсовОбщаяКоличество.ТолькоПросмотр = НЕ ИзменениеПлановРесурсовЧасы;
	
	// Трудозатраты окончательного уровня (финансы)
	ИмяПрава = "РегистрНакопления.грзнтПланыЗатратТрудовыхРесурсовФинансы";
	ЧтениеПлановРесурсовФинансы 	= ЕстьПраво(ИмяПрава, "Чтение");
	ИзменениеПлановРесурсовФинансы	= ЕстьПраво(ИмяПрава, "Изменение");
	
	Элементы.ДеревоПроектаСуммаРесурсы.Видимость = ЧтениеПлановРесурсовФинансы;
	Элементы.ДеревоПроектаСуммаРесурсыОперативный.Видимость = ЧтениеПлановРесурсовФинансы;
	
	Элементы.ТаблицаПланРесурсовОбщаяСумма.Видимость = ЧтениеПлановРесурсовФинансы;
	Элементы.ТаблицаПланРесурсовОбщаяСумма.ТолькоПросмотр = НЕ ИзменениеПлановРесурсовФинансы;
	Элементы.ТаблицаПланРесурсовОбщаяВалюта.Видимость = ЧтениеПлановРесурсовФинансы;
	Элементы.ТаблицаПланРесурсовОбщаяВалюта.ТолькоПросмотр = НЕ ИзменениеПлановРесурсовФинансы;
	
	Элементы.ДеревоПроектаНадписьРесурсы.Видимость = ЧтениеПлановРолейЧасы ИЛИ ЧтениеПлановРолейФинансы;
	Элементы.ДеревоПроектаНадписьРесурсыОперативный.Видимость = ЧтениеПлановРесурсовЧасы ИЛИ ЧтениеПлановРесурсовФинансы;
	
	Элементы.СтраницаПланТрудовыхРесурсов.Видимость = ЧтениеПлановРесурсовЧасы ИЛИ ЧтениеПлановРесурсовФинансы;
	Элементы.СтраницаПланТрудовыхРесурсов.ТолькоПросмотр = НЕ (ИзменениеПлановРесурсовФинансы ИЛИ ИзменениеПлановРесурсовФинансы);
	
	// Материалы (количество и сумма)
	ИмяПраваКоличество 	= "РегистрНакопления.грзнтПланыЗатратМатериаловКоличество";
	ИмяПраваСумма 		= "РегистрНакопления.грзнтПланыЗатратМатериаловСумма";
	ЧтениеПлановМатериаловКоличество 	= ЕстьПраво(ИмяПраваКоличество, "Чтение");
	ИзменениеПлановМатериаловКоличество = ЕстьПраво(ИмяПраваКоличество, "Изменение");
	ЧтениеПлановМатериаловСумма			= ЕстьПраво(ИмяПраваСумма, "Чтение");
	ИзменениеПлановМатериаловСумма 		= ЕстьПраво(ИмяПраваСумма, "Изменение");
	
	Элементы.ДеревоПроектаСуммаМатериалы.Видимость = ?(ЧтениеПлановМатериаловКоличество И ЧтениеПлановМатериаловСумма, Истина, Ложь);
	Элементы.ТаблицаПланМатериаловОбщаяКоличество.Видимость = ЧтениеПлановМатериаловКоличество;
	Элементы.ТаблицаПланМатериаловОбщаяКоличество.ТолькоПросмотр = ИзменениеПлановМатериаловКоличество;
	Элементы.ТаблицаПланМатериаловОбщаяСумма.Видимость = ЧтениеПлановМатериаловСумма;
	Элементы.ТаблицаПланМатериаловОбщаяСумма.ТолькоПросмотр = ИзменениеПлановМатериаловСумма;
	Элементы.ТаблицаПланМатериаловОбщаяВалюта.Видимость = ЧтениеПлановМатериаловСумма;
	Элементы.ТаблицаПланМатериаловОбщаяВалюта.ТолькоПросмотр = ИзменениеПлановМатериаловСумма;
	
	Элементы.СтраницаПланМатериалов.Видимость = ЧтениеПлановМатериаловКоличество ИЛИ ЧтениеПлановМатериаловСумма;
	Элементы.СтраницаПланМатериалов.ТолькоПросмотр = НЕ (ИзменениеПлановМатериаловКоличество ИЛИ ИзменениеПлановМатериаловСумма);
	
КонецПроцедуры // НастроитьФормуПоПравамПользователя()

&НаСервере
Процедура НастроитьВидимостьПлановПоРесурсам()
	Элементы.СтраницаПланТрудовыхРесурсов.Видимость = Элементы.СтраницаПланТрудовыхРесурсов.Видимость И 
		Константы.грзнтОтображениеОперативногПланаРесурсовВРедакторе.Получить() <> ПредопределенноеЗначение("Перечисление.грзнтОтображениеОперативныхЗатратРесурсовВРедактореПроекта.ТолькоОперативныйПлан");
	Элементы.СтраницаПланОперативный.Видимость = Элементы.СтраницаПланОперативный.Видимость И 
		(Константы.грзнтОтображениеОперативногПланаРесурсовВРедакторе.Получить() = ПредопределенноеЗначение("Перечисление.грзнтОтображениеОперативныхЗатратРесурсовВРедактореПроекта.ОкончательныйИОперативныйПланы")
		ИЛИ Константы.грзнтОтображениеОперативногПланаРесурсовВРедакторе.Получить() = ПредопределенноеЗначение("Перечисление.грзнтОтображениеОперативныхЗатратРесурсовВРедактореПроекта.ТолькоОперативныйПлан"));
КонецПроцедуры

&НаСервере
Функция ЕстьПраво(ИмяТаблицы, Право)

	Если НЕ ПроверятьПраваНаТаблицы Тогда Возврат Истина; КонецЕсли;
	Возврат НЕ ПраваПользователяПоПроекту.НайтиСтроки(Новый Структура("ИмяТаблицы, " + Право, ИмяТаблицы, Истина)).Количество() = 0;
	
КонецФункции // ЕстьПраво()

&НаСервере
Процедура ЗаполнитьДоступныеТаблицы()

	Если НЕ ПроверятьПраваНаТаблицы Тогда Возврат; КонецЕсли;
	
	ДоступныеТаблицыЧтение.Очистить();
	ДоступныеТаблицыИзменение.Очистить();
	
	// Документы
	ПраваДляПроверки = Новый Массив;
	ПраваДляПроверки.Добавить("грзнтПланДвиженияДенежныхСредствПроекта");
	ПраваДляПроверки.Добавить("грзнтПланДоходовРасходовПроекта");
	ПраваДляПроверки.Добавить("грзнтПланДоходовРасходовПроекта");
	ПраваДляПроверки.Добавить("грзнтПланТрудозатратРолейЧасы");
	ПраваДляПроверки.Добавить("грзнтПланТрудозатратРесурсовЧасы");
	ПраваДляПроверки.Добавить("грзнтПланЗатратМатериаловКоличество");
	ПраваДляПроверки.Добавить("грзнтПланТрудозатратРолейФинансы");
	ПраваДляПроверки.Добавить("грзнтПланТрудозатратРесурсовФинансы");
	ПраваДляПроверки.Добавить("грзнтПланЗатратМатериаловСумма");
	ПраваДляПроверки.Добавить("грзнтСДРПроекта");
	ПраваДляПроверки.Добавить("грзнтПлановыеСрокиПроекта");
	ПраваДляПроверки.Добавить("грзнтПубликацияЗадачПроекта");
	ПраваДляПроверки.Добавить("грзнтСнятиеСПубликацииЗадачПроекта");
	ПраваДляПроверки.Добавить("грзнтФактическийПроцентГотовности");
	ПраваДляПроверки.Добавить("грзнтФактическиеСрокиПроекта");
	
	Для Каждого ИмяПрава Из ПраваДляПроверки Цикл
		Если ПравоДоступа("Чтение", Метаданные.Документы[ИмяПрава]) Тогда
			ДоступныеТаблицыЧтение.Добавить("Документ." + ИмяПрава);
		КонецЕсли;
		Если ПравоДоступа("Изменение", Метаданные.Документы[ИмяПрава]) Тогда
			ДоступныеТаблицыИзменение.Добавить("Документ." + ИмяПрава);
		КонецЕсли;
	КонецЦикла;	
	
	// Регистры накопления
	ПраваДляПроверки = Новый Массив;
	ПраваДляПроверки.Добавить("грзнтПланыЗатратРолейЧасы");
	ПраваДляПроверки.Добавить("грзнтПланыЗатратТрудовыхРесурсовЧасы");
	ПраваДляПроверки.Добавить("грзнтПланыЗатратМатериаловКоличество");
	ПраваДляПроверки.Добавить("грзнтПланыЗатратРолейФинансы");
	ПраваДляПроверки.Добавить("грзнтПланыЗатратТрудовыхРесурсовФинансы");
	ПраваДляПроверки.Добавить("грзнтПланыЗатратМатериаловСумма");
	ПраваДляПроверки.Добавить("грзнтПланыДвиженияДенежныхСредств");
	ПраваДляПроверки.Добавить("грзнтПланыДоходовРасходов");
	
	Для Каждого ИмяПрава Из ПраваДляПроверки Цикл
		Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления[ИмяПрава]) Тогда
			ДоступныеТаблицыЧтение.Добавить("РегистрНакопления." + ИмяПрава);
		КонецЕсли;
		Если ПравоДоступа("Изменение", Метаданные.РегистрыНакопления[ИмяПрава]) Тогда
			ДоступныеТаблицыИзменение.Добавить("РегистрНакопления." + ИмяПрава);
		КонецЕсли;
	КонецЦикла;	
	
	// Регистры сведений
	ПраваДляПроверки = Новый Массив;
	ПраваДляПроверки.Добавить("грзнтФактическиеСрокиПроектов");
	ПраваДляПроверки.Добавить("грзнтСДРПроектов");
	ПраваДляПроверки.Добавить("грзнтКалендариЗадач");
	ПраваДляПроверки.Добавить("грзнтСрокиПроектов");
	ПраваДляПроверки.Добавить("грзнтОпубликованныеЗадачи");
	ПраваДляПроверки.Добавить("грзнтВнешниеСвязиЗадачПроекта");
	ПраваДляПроверки.Добавить("грзнтФактическиеПроцентыГотовности");
	
	Для Каждого ИмяПрава Из ПраваДляПроверки Цикл
		Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений[ИмяПрава]) Тогда
			ДоступныеТаблицыЧтение.Добавить("РегистрСведений." + ИмяПрава);
		КонецЕсли;
		Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений[ИмяПрава]) Тогда
			ДоступныеТаблицыИзменение.Добавить("РегистрСведений." + ИмяПрава);
		КонецЕсли;
	КонецЦикла;	
	
	// Справчоники
	ПраваДляПроверки = Новый Массив;
	ПраваДляПроверки.Добавить("Проекты");
	
	Для Каждого ИмяПрава Из ПраваДляПроверки Цикл
		Если ПравоДоступа("Чтение", Метаданные.Справочники[ИмяПрава]) Тогда
			ДоступныеТаблицыЧтение.Добавить("Справочник." + ИмяПрава);
		КонецЕсли;
		Если ПравоДоступа("Изменение", Метаданные.Справочники[ИмяПрава]) Тогда
			ДоступныеТаблицыИзменение.Добавить("Справочник." + ИмяПрава);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры // ЗаполнитьДоступныеТаблицы()

&НаСервере
Процедура ПрочитатьПраваПользователяНаЗаписьПлана(СтрПрав)

	СтрПрав.Вставить("Право_СДРПроекта", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтСДРПроекта"));
	СтрПрав.Вставить("Право_ПлановыеСрокиПроекта", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПлановыеСрокиПроекта"));
	СтрПрав.Вставить("Право_ПланДвиженияДенежныхСредствПроекта", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПланДвиженияДенежныхСредствПроекта"));
	СтрПрав.Вставить("Право_ПланДоходовРасходовПроекта", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПланДоходовРасходовПроекта"));
	СтрПрав.Вставить("Право_ПланЗатратМатериаловКоличество", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПланЗатратМатериаловКоличество"));
	СтрПрав.Вставить("Право_ПланТрудозатратРолейЧасы", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПланТрудозатратРолейЧасы"));
	СтрПрав.Вставить("Право_ПланТрудозатратРесурсовЧасы", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПланТрудозатратРесурсовЧасы"));
	СтрПрав.Вставить("Право_ПланЗатратМатериаловСумма", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПланЗатратМатериаловСумма"));
	СтрПрав.Вставить("Право_ПланТрудозатратРолейФинансы", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПланТрудозатратРолейФинансы"));
	СтрПрав.Вставить("Право_ПланТрудозатратРесурсовФинансы", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтПланТрудозатратРесурсовФинансы"));	
	СтрПрав.Вставить("Право_ФактическийПроцентГотовности", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтФактическийПроцентГотовности"));
	СтрПрав.Вставить("Право_ФактическиеСроки", грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Документ", "грзнтФактическиеСрокиПроекта"));
	
КонецПроцедуры // ПрочитатьПраваПользователяНаЗаписьПлана()

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура КомандаСохранитьРедактируемуюВерсиюВХранилище(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтменитьПоследнееДействие(Команда)
	ОтменитьДействие();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьСпрятатьДеревоЭкземпляров(Команда)
	Элементы.КомандаПоказатьСпрятатьДеревоЭкземпляров.Пометка = НЕ Элементы.КомандаПоказатьСпрятатьДеревоЭкземпляров.Пометка;
	Элементы.ГруппаСтраницыЛеваяПанель.Видимость = Элементы.КомандаПоказатьСпрятатьДеревоЭкземпляров.Пометка;
	Элементы.ГруппаСтраницыЛеваяПанель.ТекущаяСтраница = Элементы.СтраницаДереваЭкземпляров;
КонецПроцедуры

&НаКлиенте
Функция КомандаЗаписатьСтруктуруПроекта(Команда)
	Если НЕ ЗначениеЗаполнено(ЭкземплярВерсии) Тогда
		ПоказатьПредупреждение(,"Не выбран экземпляр версии, записать проект невозможно!", , "Ошибка записи проекта");
		//Предупреждение("Не выбран экземпляр версии, записать проект невозможно!", , "Ошибка записи проекта");
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаНачалаПроекта) Тогда
		ПоказатьПредупреждение(,"Не заполнена дата начала проекта, распределение будет произведено некорректно!", , "Ошибка записи проекта");
		//Предупреждение("Не заполнена дата начала проекта, распределение будет произведено некорректно!", , "Ошибка записи проекта");
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КалендарьПроекта) Тогда
		ПоказатьПредупреждение(,"Не заполнен календарь проекта, распределение будет произведено некорректно!", , "Ошибка записи проекта");
		//Предупреждение("Не заполнен календарь проекта, распределение будет произведено некорректно!", , "Ошибка записи проекта");
		Возврат Ложь;
	КонецЕсли;
	ПередЗаписьюПроверкаЗаполнения();
	УдачноЗаписали = Ложь;
	Пока НЕ УдачноЗаписали Цикл
		ТекстСообщения = "";
		Если ЗаписатьСтруктуруПроектаНаСервере(ТекстСообщения) Тогда
			УдачноЗаписали = Истина;
			ЭтаФорма.Модифицированность = Ложь;
		Иначе
			Ответ = Вопрос("Неудачная попытка записи проекта. " + Символы.ПС + ТекстСообщения, РежимДиалогаВопрос.ПовторитьОтмена);
			УдачноЗаписали = Ответ = КодВозвратаДиалога.Отмена;
		КонецЕсли;
	КонецЦикла;
	Возврат УдачноЗаписали;
КонецФункции

&НаКлиенте
Процедура КомандаЗаписатьСтруктуруПроектаВДругойЭкземпляр(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьСтруктуруПроектаВДругойЭкземплярПродолжение", ЭтаФорма, Новый Структура);
	ОткрытьФорму("Справочник.грзнтЭкземплярыВерсийПланаПроекта.Форма.ФормаВыбора", Новый Структура("Проект, ЭкземплярВерсии", Проект, ЭкземплярВерсии), ЭтаФорма, ,, , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтруктуруПроектаВДругойЭкземплярПродолжение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(ЗначениеВыбора) <> Тип("СправочникСсылка.грзнтЭкземплярыВерсийПланаПроекта") ИЛИ НЕ ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Возврат;
	КонецЕсли;
	ЭкземплярВерсии = ЗначениеВыбора;
	КомандаЗаписатьСтруктуруПроекта(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПересчетВсехСроков(Команда)
	Если НЕ ЗначениеЗаполнено(ДатаНачалаПроекта) Тогда
		ПоказатьПредупреждение(, "Не задана дата начала проекта. Пересчёт сроков невозможен!");
		//Предупреждение("Не задана дата начала проекта. Пересчёт сроков невозможен!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КалендарьПроекта) Тогда
		ПоказатьПредупреждение(, "Не задан календарь проекта. Пересчёт сроков невозможен!");
		//Предупреждение("Не задан календарь проекта. Пересчёт сроков невозможен!");
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	Элементы.КомандаПересчетВсехСроков.Картинка = Новый Картинка;
	Для Каждого СтрокаДереваВерсий из ДеревоЭкземпляровВерсийПланов.ПолучитьЭлементы() Цикл
		НашлиПометку = Ложь;
		Для Каждого ЭкземплярДерева ИЗ СтрокаДереваВерсий.ПолучитьЭлементы() Цикл
			Если ЭкземплярДерева.Ссылка = ЭкземплярВерсии Тогда
				Если ЭкземплярДерева.Картинка > 3 Тогда
					ЭкземплярДерева.Картинка = ЭкземплярДерева.Картинка - 4;
				КонецЕсли;
			КонецЕсли;
			Если ЭкземплярДерева.Картинка > 3 Тогда
				НашлиПометку = Истина;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаДереваВерсий.Картинка > 3 И НЕ НашлиПометку Тогда 
			СтрокаДереваВерсий.Картинка = СтрокаДереваВерсий.Картинка - 4;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКопииТаблицы ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаКопииТаблицы.КартинкаПредшественники > 1 Тогда
			СтрокаКопииТаблицы.КартинкаПредшественники = 1;
			Если СтрокаКопииТаблицы.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаКопииТаблицы.Идентификатор);
				Если СтрокаДерева <> Неопределено Тогда
					СтрокаДерева.КартинкаПредшественники = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	МассивВозврата = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетВсехСроковПересчетПоУровням(АдресВременногоХранилищаДанныхНаСервере, УникальныйИдентификатор, МассивВозврата, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоказатьУровень(Команда)
	Если Найти(ТекущийЭлемент.Имя, "КнопкаПоказатьУровень") = 0 Тогда
		Возврат;
	КонецЕсли;
	Уровень = Число(СтрЗаменить(ТекущийЭлемент.Имя, "КнопкаПоказатьУровень", ""));
	ПоказатьУровеньДерева(ДеревоПроекта, Уровень, 1);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтображатьПанельЗадачи(Команда)
	ПанельЗадачОтображатьПанель = НЕ ПанельЗадачОтображатьПанель;
	Элементы.ФормаКомандаОтображатьПанельЗадачи.Пометка = ПанельЗадачОтображатьПанель;
	Элементы.ГруппаПанельЗадачи.Видимость = ПанельЗадачОтображатьПанель;
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьПорядокИВидимостьКолонок(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастроитьПорядокИВидимостьКолонокПродолжение", ЭтаФорма);
	ОткрытьФорму(ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаНастройкаСоставаКолонок", , ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастроитьПорядокИВидимостьКолонокПродолжение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НастройкаКолонок.Очистить();
	МассивНастройки = ВыбранноеЗначение.НастройкиКолонок;
	КоличествоФиксированныхКолонок = ВыбранноеЗначение.КоличествоФиксированныхКолонок;
	Для Каждого СтрокаФормы ИЗ МассивНастройки Цикл
		ЗаполнитьЗначенияСвойств(НастройкаКолонок.Добавить(), СтрокаФормы);
	КонецЦикла;
	СтруктураКолонкиПересчета = УстановитьНастройкуКолонок();
	Если НЕ ПустаяСтрока(СтруктураКолонкиПересчета.КолонкиПересчет) Тогда
		ПосчитатьИтогиПоКолонкам(СтруктураКолонкиПересчета.КолонкиПересчет, );
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтруктураКолонкиПересчета.КолонкиПересчетВалюты) Тогда
		ПосчитатьИтогиВалютыПоКолонкам(СтруктураКолонкиПересчета.КолонкиПересчетВалюты, );
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтруктураКолонкиПересчета.КолонкиПересчетПроценты) Тогда
		ПосчитатьИтогиПроцентовПоКолонкам(СтруктураКолонкиПересчета.КолонкиПересчетПроценты, );
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтруктураКолонкиПересчета.КолонкиПересчетФактическаяДлительность) Тогда
		ПосчитатьФактическуюДлительностьПоКолонкам("", );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоСписок(Команда)
	РежимОтображенияСписок = НЕ РежимОтображенияСписок;
	Элементы.ФормаКомандаДеревоСписок.Заголовок = ?(РежимОтображенияСписок, "Отображать деревом", "Отображать списком");
	
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтрокаПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	КонецЕсли;
	СформироватьДеревоПроектаПоТаблицеПроектаСФильтром(Истина, Новый Массив);
	Для Каждого ЭлементДерева ИЗ ДеревоПроекта.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПроекта.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;;
	Если СтрокаПроекта <> Неопределено И СтрокаПроекта.Идентификатор >= 0 Тогда
		Элементы.ДеревоПроекта.ТекущаяСтрока = СтрокаПроекта.Идентификатор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтображатьФильтр(Команда)
	Элементы.ГруппаФильтрПроекта.Видимость = НЕ Элементы.ГруппаФильтрПроекта.Видимость;
	Элементы.ФормаКомандаОтображатьФильтр.Пометка = Элементы.ГруппаФильтрПроекта.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура КомандаЭкспортПроекта(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ЭкспортПроектаПродолжение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, "Перед экспортом проекта его нужно записать. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФорму("Обработка.грзнтЭкспортПроектаВMSProject.Форма", Новый Структура("Проект, ЭкземплярВерсии", Проект, ЭкземплярВерсии));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортПроектаПродолжение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = КодВозвратаДиалога.Да Тогда
		КомандаЗаписатьСтруктуруПроекта(Неопределено);
		ОткрытьФорму("Обработка.грзнтЭкспортПроектаВMSProject.Форма", Новый Структура("Проект, ЭкземплярВерсии", Проект, ЭкземплярВерсии));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьЗадачиПроекта(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ДополнительныеПараметры = Новый Структура("УИД", ТекущиеДанные.УИД);
	КонецЕсли;
	Если Модифицированность Тогда
		Описание = Новый ОписаниеОповещения("КомандаДобавитьЗадачиПроектаПродолжение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Описание, "Перед добавлением задач другого проекта необходимо записать текущий. Продолжить?", РежимДиалогаВопрос.ДаНет);		
	Иначе
		КомандаДобавитьЗадачиПроектаПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьЗадачиПроектаПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		Если НЕ КомандаЗаписатьСтруктуруПроекта(Неопределено) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииОкнаВладельца", Истина);
	СтруктураПараметров.Вставить("ИмяФормыРедактирования", ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаВыбораДобавленияЗадачи");
	СтруктураПараметров.Вставить("Проект", Проект);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("УИД") Тогда
		СтрокаПроекта = тСоответствиеТаблицыУИД.Получить(ДополнительныеПараметры.УИД);
		Если СтрокаПроекта <> Неопределено Тогда
			СтруктураПараметров.Вставить("УИД", СтрокаПроекта.УИД);
			СтруктураПараметров.Вставить("НаименованиеЗадачи", СтрокаПроекта.НаименованиеЗадачи);
			СтруктураПараметров.Вставить("КодСДР", СтрокаПроекта.КодСДР);
			СтруктураПараметров.Вставить("НомерСтрокиПроекта", СтрокаПроекта.НомерСтрокиПроекта);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьПродукт(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура("Справочник", "грзнтПродукты");
	Если ТекущиеДанные <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("УИД", ТекущиеДанные.УИД);
	КонецЕсли;
	
	Если Модифицированность Тогда
		Описание = Новый ОписаниеОповещения("КомандаДобавитьЭлементыСтруктурыПродолжение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Описание, "Перед добавлением продуктов необходимо записать текущий проект. Продолжить?", РежимДиалогаВопрос.ДаНет);		
	Иначе
		КомандаДобавитьЭлементыСтруктурыПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьТехпроцесс(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура("Справочник", "грзнтТехнологическиеПроцессы");
	Если ТекущиеДанные <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("УИД", ТекущиеДанные.УИД);
	КонецЕсли;
	
	Если Модифицированность Тогда
		Описание = Новый ОписаниеОповещения("КомандаДобавитьЭлементыСтруктурыПродолжение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Описание, "Перед добавлением техпроцессов необходимо записать текущий проект. Продолжить?", РежимДиалогаВопрос.ДаНет);		
	Иначе
		КомандаДобавитьЭлементыСтруктурыПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьУправленческиеРаботы(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура("Справочник", "грзнтУправленческиеРаботы");
	Если ТекущиеДанные <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("УИД", ТекущиеДанные.УИД);
	КонецЕсли;
	
	Если Модифицированность Тогда
		Описание = Новый ОписаниеОповещения("КомандаДобавитьЭлементыСтруктурыПродолжение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Описание, "Перед добавлением управленческих работ необходимо записать текущий проект. Продолжить?", РежимДиалогаВопрос.ДаНет);		
	Иначе
		КомандаДобавитьЭлементыСтруктурыПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьЮридическийДоговор(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура("Справочник", "грзнтЮридическиеДоговоры");
	Если ТекущиеДанные <> Неопределено Тогда
		ДополнительныеПараметры.Вставить("УИД", ТекущиеДанные.УИД);
	КонецЕсли;
	
	Если Модифицированность Тогда
		Описание = Новый ОписаниеОповещения("КомандаДобавитьЭлементыСтруктурыПродолжение", ЭтаФорма, ДополнительныеПараметры);
		ПоказатьВопрос(Описание, "Перед добавлением юридических договоров необходимо записать текущий проект. Продолжить?", РежимДиалогаВопрос.ДаНет);		
	Иначе
		КомандаДобавитьЭлементыСтруктурыПродолжение(КодВозвратаДиалога.Да, ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДобавитьЭлементыСтруктурыПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		Если НЕ КомандаЗаписатьСтруктуруПроекта(Неопределено) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииОкнаВладельца", Истина);
	СтруктураПараметров.Вставить("ИмяФормыРедактирования", ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаВыбораДобавленияЭлементаСтруктуры");
	СтруктураПараметров.Вставить("Проект", Проект);
	СтруктураПараметров.Вставить("Справочник", ДополнительныеПараметры.Справочник);
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("УИД") Тогда
		СтрокаПроекта = тСоответствиеТаблицыУИД.Получить(ДополнительныеПараметры.УИД);
		Если СтрокаПроекта <> Неопределено Тогда
			СтруктураПараметров.Вставить("УИД", СтрокаПроекта.УИД);
			СтруктураПараметров.Вставить("НаименованиеЗадачи", СтрокаПроекта.НаименованиеЗадачи);
			СтруктураПараметров.Вставить("КодСДР", СтрокаПроекта.КодСДР);
			СтруктураПараметров.Вставить("НомерСтрокиПроекта", СтрокаПроекта.НомерСтрокиПроекта);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКонтрольФинансовыхПланов(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Описание = Новый ОписаниеОповещения("КомандаОткрытьКонтрольФинансовыхПлановПродолжение", ЭтаФорма);
		ПоказатьВопрос(Описание, "Перед открытием обработки контроля финансовых планов необходимо записать проект. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		КомандаОткрытьКонтрольФинансовыхПлановПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКонтрольФинансовыхПлановПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Если Этаформа.Модифицированность Тогда
		Если Не КомандаЗаписатьСтруктуруПроекта(Неопределено) Тогда
			ВОзврат;
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Обработка.грзнтКонтрольФинансовыхПлановПоДоговорам.Форма", Новый Структура("Проект, ЭкземплярВерсии", Проект, ЭкземплярВерсии));
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСравнениеВерсийПланов(Команда)
	Если ЭтаФорма.Модифицированность Тогда
		Описание = Новый ОписаниеОповещения("КомандаОткрытьКонтрольСравнениеВерсийПлановПродолжение", ЭтаФорма);
		ПоказатьВопрос(Описание, "Перед открытием обработки сравнения версий планов необходимо записать проект. Продолжить?", РежимДиалогаВопрос.ДаНет);
	Иначе
		КомандаОткрытьКонтрольСравнениеВерсийПлановПродолжение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьКонтрольСравнениеВерсийПлановПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Если Этаформа.Модифицированность Тогда
		Если Не КомандаЗаписатьСтруктуруПроекта(Неопределено) Тогда
			ВОзврат;
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Обработка.грзнтСравнениеВерсийПлановПроекта.Форма", Новый Структура("Проект, ЭкземплярВерсии", Проект, ЭкземплярВерсии));
КонецПроцедуры

#КонецОбласти

#Область СохранениеВосстановлениеНастроек

&НаКлиенте
Процедура КомандаВосстановитьНастройку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ВосстановитьНастройкиПродолжение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.грзнтВосстановитьВариантОтчета", Новый Структура("КлючОбъекта", КлючОбъекта), , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСохранитьНастройку(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьНастройкиПродолжение", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.грзнтСохранитьВариантОтчета", Новый Структура("КлючОбъекта, НеПоказыватьПриЗакрытии, НеПоказыватьПриОткрытии", КлючОбъекта), , , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкуПриОткрытии()
	СтруктураНастройки = грзнтНастройкиОбработокСервер.ПолучитьНастройкуПоУмолчанию(КлючОбъекта);
	ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки.СтруктураНастройки);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкуПриЗакрытии()
	РезультатЗакрытия = Новый Структура("КлючНастройки, СохранятьПриЗакрытии, ИспользоватьПриОткрытии", "Текущая настройка", Истина, "Текущая настройка");
	СохранитьНастройкиПродолжениеНаСервере(РезультатЗакрытия);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СохранитьНастройкиПродолжениеНаСервере(РезультатЗакрытия);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПродолжениеНаСервере(РезультатЗакрытия)
	СтруктураСохранения = Новый Структура;
	СтруктураСохранения.Вставить("КлючОбъекта", КлючОбъекта);
	СтруктураСохранения.Вставить("СтруктураНастройки", РезультатЗакрытия);
	
	СтруктураСохранения.Вставить("СинхронизироватьСДеревом", ДиаграммаГантаСинхронизироватьСДеревом);
	СтруктураСохранения.Вставить("ОтображатьДиаграмму", ДиаграммаГантаОтображатьДиаграмму);
	СтруктураСохранения.Вставить("ОтображатьКритическийПуть", ДиаграммаГантаОтображатьКритическийПуть);
	СтруктураСохранения.Вставить("ПанельЗадачОтображатьПанель", ПанельЗадачОтображатьПанель);
	СтруктураСохранения.Вставить("ФиксацияПанелиЗадач", ФиксацияПанелиЗадач);
	СтруктураСохранения.Вставить("НеУдалятьПоДелит", НеУдалятьПоДелит);
	СтруктураСохранения.Вставить("НастройкаКолонок", НастройкаКолонок.Выгрузить());
	СтруктураСохранения.Вставить("ТаблицаФильтрРедактора", ТаблицаФильтрРедактора.Выгрузить());
	СтруктураСохранения.Вставить("КоличествоФиксированныхКолонок", КоличествоФиксированныхКолонок);
	
	грзнтНастройкиОбработокСервер.СохранитьНастройку(СтруктураСохранения);
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВосстановитьНастройкиПродолжениеНаСервере(РезультатЗакрытия);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиПродолжениеНаСервере(РезультатЗакрытия)
	СтруктураСохранения = грзнтНастройкиОбработокСервер.ЗагрузитьНастройку(КлючОбъекта, РезультатЗакрытия.КлючНастройки);
	ВосстановитьНастройкиИзСтруктуры(СтруктураСохранения.СтруктураНастройки);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиИзСтруктуры(СтруктураНастройки)
	Если ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
		СтруктураНастройки.Свойство("СинхронизироватьСДеревом", ДиаграммаГантаСинхронизироватьСДеревом);
		СтруктураНастройки.Свойство("ОтображатьДиаграмму", ДиаграммаГантаОтображатьДиаграмму);
		ДиаграммаГантаОтображатьДиаграмму = Ложь;
		СтруктураНастройки.Свойство("ОтображатьКритическийПуть", ДиаграммаГантаОтображатьКритическийПуть);
		СтруктураНастройки.Свойство("ПанельЗадачОтображатьПанель", ПанельЗадачОтображатьПанель);
		СтруктураНастройки.Свойство("ФиксацияПанелиЗадач", ФиксацияПанелиЗадач);
		СтруктураНастройки.Свойство("НеУдалятьПоДелит", НеУдалятьПоДелит);
		СтруктураНастройки.Свойство("КоличествоФиксированныхКолонок", КоличествоФиксированныхКолонок);
		
		Таблица = Неопределено;
		СтруктураНастройки.Свойство("НастройкаКолонок", Таблица);
		Если Таблица <> Неопределено Тогда
			НастройкаКолонок.Загрузить(Таблица);
			ПолучитьСтруктуруНастроекКолонок(Ложь);
		Иначе
			ПолучитьСтруктуруНастроекКолонок(Истина);
		КонецЕсли;
		СтруктураНастройки.Свойство("ТаблицаФильтрРедактора", Таблица);
		Если Таблица <> Неопределено Тогда
			ТаблицаФильтрРедактора.Загрузить(Таблица);
			МассивИдентификаторы = Новый Массив;
			СформироватьДеревоПроектаПоТаблицеПроектаСФильтром(Ложь, МассивИдентификаторы);
			Если ТаблицаФильтрРедактора.Количество() > 0 Тогда
				Элементы.ГруппаФильтрПроекта.Видимость = Истина;
				Элементы.ФормаКомандаОтображатьФильтр.Пометка = Элементы.ГруппаФильтрПроекта.Видимость;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПолучитьСтруктуруНастроекКолонок(Истина);
	КонецЕсли;
	ПрименитьНастройкиФормы();
КонецПроцедуры

&НаСервере
Процедура ПрименитьНастройкиФормы()
	УстановитьНастройкуКолонок();
	
	Элементы.КомандаДиаграммаГантаСинхронизироватьСДеревом.Пометка = ДиаграммаГантаСинхронизироватьСДеревом;
	Элементы.ФормаКомандаПоказатьСкрытьДиаграммуГанта.Пометка = ДиаграммаГантаОтображатьДиаграмму;
	Элементы.ГруппаДиаграммаГанта.Видимость = ДиаграммаГантаОтображатьДиаграмму;
	Элементы.КомандаОтображатьКритическийПуть.Пометка = ДиаграммаГантаОтображатьКритическийПуть;
	Если ДиаграммаГантаОтображатьДиаграмму Тогда
		ОбновитьДиаграммуГанта(ЭтаФорма);
	КонецЕсли;
	Элементы.ГруппаПанельЗадачи.Видимость = ПанельЗадачОтображатьПанель;
	Элементы.ФормаКомандаОтображатьПанельЗадачи.Пометка = ПанельЗадачОтображатьПанель;
	
	Элементы.ГруппаПанельЗадачи.РастягиватьПоВертикали = НЕ ФиксацияПанелиЗадач;
	Элементы.КомандаФиксацияПанелиЗадачи.Пометка = ФиксацияПанелиЗадач;
	Элементы.КомандаНеУдалятьКнопкойДелит.Пометка = НеУдалятьПоДелит;
КонецПроцедуры

#КонецОбласти

#Область ОбработкаПоследовательностиСобытий

&НаКлиенте
Процедура НачатьДействие()
	Если бФлагПередУдалением Тогда
		бФлагПередУдалением = Ложь;
	Иначе
		СписокДействийДляИстории.Добавить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьДействие()
	Если СписокДействийДляИстории.Количество() > 0 Тогда
		СписокСобытий = СписокДействийДляИстории.Получить(СписокДействийДляИстории.Количество() - 1);
		СтруктураВозврата = Новый Структура("МассивСообщенийСервер", Новый Массив);
		Пока СписокСобытий.Значение.Количество() > 0 Цикл
			ОтменитьСобытие(СписокСобытий.Значение.Получить(СписокСобытий.Значение.Количество() -1).Значение, СтруктураВозврата);
			СписокСобытий.Значение.Удалить(СписокСобытий.Значение.Количество() -1);
		КонецЦикла;
		
		Если СтруктураВозврата.МассивСообщенийСервер.Количество() > 0 Тогда
			АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииРеквизитаБезПересчета(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтруктураВозврата.МассивСообщенийСервер, РежимУчитыватьФакт);
		КонецЕсли;
		
		СписокДействийДляИстории.Удалить(СписокДействийДляИстории.Количество() - 1);
		Если СписокДействийДляИстории.Количество() = 0 Тогда
			ЭтаФорма.Модифицированность = Ложь;
		КонецЕсли;
		ПоказатьКнопкиКоличествоУровней();
	Иначе
		ЭтаФорма.Модифицированность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытиеДерева(ОписаниеСобытия)
	Если ТипЗнч(ОписаниеСобытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	ДанныеДерева = ДеревоПроекта.НайтиПоИдентификатору(ОписаниеСобытия.ИдентификаторСтроки);
	ОписаниеСобытия.ИдентификаторСтроки = ДанныеДерева.УИД;
	ОписаниеСобытия.Вставить("УИД", ДанныеДерева.УИД);
	Если ДанныеДерева.ИндексТаблицы >= 0 И ДанныеДерева.ИндексТаблицы < ТаблицаПроектаКопия.Количество() Тогда
		СтрокаТаблицыКопия = ТаблицаПроектаКопия.Получить(ДанныеДерева.ИндексТаблицы);
	КонецЕсли;
	
	Если ОписаниеСобытия.Событие = "ДобавлениеЗадачи" Тогда
		СтрокаТаблицыКопия = ТаблицаПроектаКопия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыКопия, ДанныеДерева, , стрКолонкиТаблицыИсключение);
		СтрокаТаблицыКопия.Идентификатор = ДанныеДерева.ПолучитьИдентификатор();
		ДанныеДерева.ИндексТаблицы = ТаблицаПроектаКопия.Индекс(СтрокаТаблицыКопия);
		
		тСоответствиеТаблицыУИД.Вставить(СтрокаТаблицыКопия.УИД, СтрокаТаблицыКопия);
		
		СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыКопия.Родитель), " ", СтрокаТаблицыКопия.Родитель);
		МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
		Если МассивРодитель = Неопределено Тогда
			МассивРодитель = Новый Массив;
		КонецЕсли;
		МассивРодитель.Добавить(СтрокаТаблицыКопия);
		тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
		
		ДобавитьСтрокуВДеревоСДР(СтрокаТаблицыКопия, Истина);
	ИначеЕсли ОписаниеСобытия.Событие = "ИзменениеРеквизита" Тогда
		Если СтрокаТаблицыКопия <> Неопределено Тогда
			Если СтрокаТаблицыКопия[ОписаниеСобытия.Реквизит] = ДанныеДерева[ОписаниеСобытия.Реквизит] Тогда
				Возврат;
			Иначе
				Если ОписаниеСобытия.Реквизит = "Родитель" Тогда
					СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыКопия.Родитель), " ", СтрокаТаблицыКопия.Родитель);
					МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
					Если МассивРодитель = Неопределено Тогда
						МассивРодитель = Новый Массив;
					КонецЕсли;
					Если МассивРодитель.Найти(СтрокаТаблицыКопия) <> Неопределено Тогда
						МассивРодитель.Удалить(МассивРодитель.Найти(СтрокаТаблицыКопия));
					КонецЕсли;
					тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
					
					СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(ДанныеДерева.Родитель), " ", ДанныеДерева.Родитель);
					МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
					Если МассивРодитель = Неопределено Тогда
						МассивРодитель = Новый Массив;
					КонецЕсли;
					МассивРодитель.Добавить(СтрокаТаблицыКопия);
					тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
				КонецЕсли;
				
				ОписаниеСобытия.Вставить("СтароеЗначение", СтрокаТаблицыКопия[ОписаниеСобытия.Реквизит]);
				ОписаниеСобытия.Вставить("НовоеЗначение", ДанныеДерева[ОписаниеСобытия.Реквизит]);
				СтрокаТаблицыКопия[ОписаниеСобытия.Реквизит] = ДанныеДерева[ОписаниеСобытия.Реквизит];
				
				Если ОписаниеСобытия.Реквизит = "НаименованиеЗадачи" ИЛИ ОписаниеСобытия.Реквизит = "ВидЭлемента" ИЛИ ОписаниеСобытия.Реквизит = "ВидОперации" ИЛИ ОписаниеСобытия.Реквизит = "КодСДР"
					ИЛИ ОписаниеСобытия.Реквизит = "Продукт" ИЛИ ОписаниеСобытия.Реквизит = "Договор" ИЛИ ОписаниеСобытия.Реквизит = "Техпроцесс" ИЛИ ОписаниеСобытия.Реквизит = "Работа" Тогда
					СтрокаТаблицыКопия.ИзменилисьРеквизиты = Истина;
				КонецЕсли;
				
				Если ОписаниеСобытия.Реквизит = "НаименованиеЗадачи" ИЛИ ОписаниеСобытия.Реквизит = "КодСДР" ИЛИ ОписаниеСобытия.Реквизит = "НомерСтрокиПроекта" Тогда
					МассивСтрокиПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(ОписаниеСобытия.УИД);
					Если МассивСтрокиПредшественники = Неопределено Тогда
						МассивСтрокиПредшественники = Новый Массив;
					КонецЕсли;
					Для Каждого СтрокаТаблицыПредшественники ИЗ МассивСтрокиПредшественники Цикл
						Если ОписаниеСобытия.Реквизит = "НаименованиеЗадачи" Тогда
							СтрокаТаблицыПредшественники.НаименованиеЗадачи = ОписаниеСобытия.НовоеЗначение;
						ИначеЕсли ОписаниеСобытия.Реквизит = "КодСДР" Тогда
							СтрокаТаблицыПредшественники.КодСДР = ОписаниеСобытия.НовоеЗначение;
						ИначеЕсли ОписаниеСобытия.Реквизит = "НомерСтрокиПроекта" Тогда
							СтрокаТаблицыПредшественники.НомерСтрокиПроекта = ОписаниеСобытия.НовоеЗначение;
						КонецЕсли;
						
						СтрокаТаблицыПереименования = тСоответствиеТаблицыУИД.Получить(СтрокаТаблицыПредшественники.УИД);
						Если СтрокаТаблицыПереименования <> Неопределено Тогда
							Для Каждого СтрокаТаблицыПредшественники ИЗ СтрокаТаблицыПереименования.ТаблицаПредшественники Цикл
								Если СтрокаТаблицыПредшественники.ПредшественникУИД = ОписаниеСобытия.УИД Тогда
									Если ОписаниеСобытия.Реквизит = "НаименованиеЗадачи" Тогда
										СтрокаТаблицыПредшественники.НаименованиеЗадачи = ОписаниеСобытия.НовоеЗначение;
									ИначеЕсли ОписаниеСобытия.Реквизит = "КодСДР" Тогда
										СтрокаТаблицыПредшественники.КодСДР = ОписаниеСобытия.НовоеЗначение;
									ИначеЕсли ОписаниеСобытия.Реквизит = "НомерСтрокиПроекта" Тогда
										СтрокаТаблицыПредшественники.НомерСтрокиПроекта = ОписаниеСобытия.НовоеЗначение;
									КонецЕсли;
									Если СтрокаТаблицыПереименования.Идентификатор >= 0 Тогда
										ЭлементДереваПереименования = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПереименования.Идентификатор);
										Для Каждого СтрокаТаблицыПредшественники ИЗ ЭлементДереваПереименования.ТаблицаПредшественники Цикл
											Если СтрокаТаблицыПредшественники.ПредшественникУИД = ОписаниеСобытия.УИД Тогда
												Если ОписаниеСобытия.Реквизит = "НаименованиеЗадачи" Тогда
													СтрокаТаблицыПредшественники.НаименованиеЗадачи = ОписаниеСобытия.НовоеЗначение;
												ИначеЕсли ОписаниеСобытия.Реквизит = "КодСДР" Тогда
													СтрокаТаблицыПредшественники.КодСДР = ОписаниеСобытия.НовоеЗначение;
												ИначеЕсли ОписаниеСобытия.Реквизит = "НомерСтрокиПроекта" Тогда
													СтрокаТаблицыПредшественники.НомерСтрокиПроекта = ОписаниеСобытия.НовоеЗначение;
												КонецЕсли;
												Прервать;
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Не нашли строку проекта в таблице проекта! Ошибка выполнения обработки 416!";
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	ИначеЕсли ОписаниеСобытия.Событие = "УдалениеЗадачи" Тогда
		СтруктураСохранения = Новый Структура("УИД, НаименованиеЗадачи, ВидЭлемента, Задача, КодСДР, НомерСтрокиПроекта, ДатаНачала, ДатаОкончания, РДО, ПДО, РДН, ПДН, РучнойВвод, Длительность, КартинкаОпубликована, КартинкаПредшественники,
				| ЕдиницаВремени, Календарь, Родитель, Картинка, СуммаПоступление, ВалютаПоступлений, СуммаПоступлениеУпр, СуммаВыплата, ВалютаВыплат, СуммаВыплатаУпр, СуммаДоход, ВалютаДоходов, СуммаДоходУпр, СуммаРасход,
				| ВалютаРасходов, СуммаРасходУпр, СуммаМатериалы, СуммаРоли, КоличествоРоли, НадписьРоли, СуммаРесурсы, КоличествоРесурсы, НадписьРесурсы, СуммаРесурсыОперативный, КоличествоРесурсыОперативный, ВидОперации,
				| НадписьПредшественники, НадписьПредшественникиПоНомеруСтроки, НадписьПоследователиПоНомеруСтроки, НадписьПоследователи, ЕстьКомментарий,
				| НадписьРесурсыОперативный, КонтрактныйДатаНачала, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, КонтрактныйДатаОкончания, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение");
		ЗаполнитьЗначенияСвойств(СтруктураСохранения, СтрокаТаблицыКопия, , ЭтаФорма.стрКолонкиТаблицыИсключение);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.ТаблицаПредшественники Цикл
			СтруктураПлана = Новый Структура("НаименованиеЗадачи, Внешний, ТипСвязи, ПредшественникУИД, Задержка, ЕдиницаВремени, КодСДР, НомерСтрокиПроекта");
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ТаблицаПредшественники", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.ПланДвиженияДенежныхСредств Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланДДС));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланДвиженияДенежныхСредств", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.ПланДоходов Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланДоходы));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланДоходов", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.ПланРасходов Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРасходы));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланРасходов", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.ПланРолейОбщая Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРоли));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланРолейОбщая", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.ПланРесурсовОбщая Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРесурсы));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланРесурсовОбщая", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.ПланРесурсовОперативный Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРесурсыОперативный));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланРесурсовОперативный",);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.КомментарииКЗадаче Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураКомментарииКЗадаче));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("КомментарииКЗадаче", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыКопия.ПланМатериаловОбщая Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланМатериалы));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланМатериаловОбщая", МассивПлана);
		
		ОписаниеСобытия.Вставить("ДанныеСтроки", СтруктураСохранения);
		УдалитьСтрокуВДеревеСДР(ОписаниеСобытия.СтрокаТаблицы, ЭтаФорма);
		ТекущийИндекс = ТаблицаПроектаКопия.Индекс(СтрокаТаблицыКопия);
		
		тСоответствиеТаблицыУИД.Удалить(СтрокаТаблицыКопия.УИД);
		
		СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыКопия.Родитель), " ", СтрокаТаблицыКопия.Родитель);
		МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
		Если МассивРодитель = Неопределено Тогда
			МассивРодитель = Новый Массив;
		КонецЕсли;
		Если МассивРодитель.Найти(СтрокаТаблицыКопия) <> Неопределено Тогда
			МассивРодитель.Удалить(МассивРодитель.Найти(СтрокаТаблицыКопия));
		КонецЕсли;
		тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
		
		ТаблицаПроектаКопия.Удалить(СтрокаТаблицыКопия);
		Для К = ТекущийИндекс По ТаблицаПроектаКопия.Количество() - 1 Цикл
			НоваяСтрокаПроекта = ТаблицаПроектаКопия.Получить(К);
			Если НоваяСтрокаПроекта.Идентификатор > -1 Тогда 
				ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(НоваяСтрокаПроекта.Идентификатор);
				Если ЭлементДерева <> Неопределено Тогда
					ЭлементДерева.ИндексТаблицы = К;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если СписокДействийДляИстории.Количество() > 0 Тогда
		СписокДействийДляИстории.Получить(СписокДействийДляИстории.Количество() - 1).Значение.Добавить(ОписаниеСобытия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытиеИзменениеРеквизитаДерева(НаименованиеРеквизита)
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизита");
	ОписаниеСобытия.Вставить("ИдентификаторСтроки", Элементы.ДеревоПроекта.ТекущиеДанные.ПолучитьИдентификатор());
	ОписаниеСобытия.Вставить("Реквизит", НаименованиеРеквизита);
	ДобавитьСобытиеДерева(ОписаниеСобытия);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытиеУдалениеЗадачиИзТаблицы(СтрокаТаблицы, МассивСообщенийСерверу)
	
	ПодчиненныеСтроки = тСоответствиеТаблицыРодитель.Получить(СтрокаТаблицы.УИД);
	Если ПодчиненныеСтроки = Неопределено Тогда
		ПодчиненныеСтроки = Новый Массив;
	КонецЕсли;
	
	// ((( grznt.Solntsev 06.10.2016
	// Получим все строки на которые ссылается удаляемая
	МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаТаблицы.УИД);
	Если МассивПредшественники = Неопределено Тогда
		МассивПредшественники = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаПредшественник ИЗ МассивПредшественники Цикл
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
		СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", СтрокаПредшественник.УИД, СтрокаПредшественник.ПредшественникУИД));
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		МассивПоследователи = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПредшественник.ПредшественникУИД);
		Если МассивПоследователи = Неопределено Тогда
			МассивПоследователи = Новый Массив;
		КонецЕсли;
		Если МассивПоследователи.Найти(СтрокаПредшественник) <> Неопределено Тогда
			МассивПоследователи.Удалить(МассивПоследователи.Найти(СтрокаПредшественник));
		КонецЕсли;
		тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПредшественник.ПредшественникУИД, МассивПоследователи);
		
		СтрокаТаблицыПредшественник = тСоответствиеТаблицыУИД.Получить(СтрокаПредшественник.ПредшественникУИД);
		Если НЕ СтрокаТаблицыПредшественник = Неопределено И НЕ СтрокаТаблицыПредшественник.Внешний Тогда
			СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаТаблицыПредшественник);
			СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПредшественник, "НадписьПоследователи", СтруктураНадписи.Надпись);
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПредшественник, "НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.НадписьПоНомеруСтроки);
		КонецЕсли;
		
		ТаблицаПредшественники.Удалить(СтрокаПредшественник);
	КонецЦикла;
	МассивПредшественники.Очистить();
	тСоответствиеПредшественникиУИД.Вставить(СтрокаТаблицы.УИД, МассивПредшественники);
	
	// Получим все строки, которые ссылаются  на удаляемую
	МассивПоследователи = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаТаблицы.УИД);
	Если МассивПоследователи = Неопределено Тогда
		МассивПоследователи = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаПоследователь ИЗ МассивПоследователи Цикл
		СтрокаТаблицыПоследователь = тСоответствиеТаблицыУИД.Получить(СтрокаПоследователь.УИД);
		// Если элемент отображён, то удаляем в дереве через события
		Если СтрокаТаблицыПоследователь.Идентификатор >= 0 Тогда
			СтрокаДереваПоследователь = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПоследователь.Идентификатор);
			Для Каждого СтрокаПлан ИЗ СтрокаДереваПоследователь.ТаблицаПредшественники Цикл
				Если СтрокаПлан.ПредшественникУИД = СтрокаТаблицы.УИД Тогда
					СтрокаДереваПоследователь.ТаблицаПредшественники.Удалить(СтрокаПлан);
					ОписаниеСобытия = Новый Структура;
					ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
					ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
					ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПоследователь);
					ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Если элемент не отображён, то удаляем втихушку
		Для Каждого СтрокаПлан ИЗ СтрокаТаблицыПоследователь.ТаблицаПредшественники Цикл
			Если СтрокаПлан.ПредшественникУИД = СтрокаТаблицы.УИД Тогда
				СтрокаТаблицыПоследователь.ТаблицаПредшественники.Удалить(СтрокаПлан);
				
				МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаТаблицыПоследователь.УИД);
				Если МассивПредшественники = Неопределено Тогда
					МассивПредшественники = Новый Массив;
				КонецЕсли;
				Если МассивПредшественники.Найти(СтрокаПоследователь) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПоследователь));
				КонецЕсли;
				тСоответствиеПредшественникиУИД.Вставить(СтрокаТаблицыПоследователь.УИД, МассивПредшественники);
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
		СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", СтрокаПоследователь.УИД, СтрокаПоследователь.ПредшественникУИД));
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		ТаблицаПредшественники.Удалить(СтрокаПоследователь);
		
		СтруктураНадписи = СформироватьНадписьПредшественники(СтрокаТаблицыПоследователь);
		СтруктураИзменения = Новый Структура("НадписьПредшественники, НадписьПредшественникиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
		ОписаниеСобытия.Вставить("УИД", СтрокаТаблицыПоследователь.УИД);
		ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЦикла;
	МассивПоследователи.Очистить();
	тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаТаблицы.УИД, МассивПоследователи);
	Пока ПодчиненныеСтроки.Количество() > 0 Цикл
		ПодчиненнаяСтрока = ПодчиненныеСтроки.Получить(0);
		ДобавитьСобытиеУдалениеЗадачиИзТаблицы(ПодчиненнаяСтрока, МассивСообщенийСерверу);
	КонецЦикла;
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "УдалениеЗадачи");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицы);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, ИмяРеквизита, НовоеЗначение)
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизита");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицы);
	ОписаниеСобытия.Вставить("Реквизит", ИмяРеквизита);
	ОписаниеСобытия.Вставить("СтароеЗначение", СтрокаТаблицы[ИмяРеквизита]);
	ОписаниеСобытия.Вставить("НовоеЗначение", НовоеЗначение);
	Если ИмяРеквизита = "НаименованиеЗадачи" ИЛИ ИмяРеквизита = "ВидЭлемента" ИЛИ ИмяРеквизита = "ВидОперации" ИЛИ ИмяРеквизита = "КодСДР" Тогда
		СтрокаТаблицы.ИзменилисьРеквизиты = Истина;
	КонецЕсли;
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьСобытиеТаблицы(ОписаниеСобытия)
	Если НЕ ОписаниеСобытия.Свойство("УИД") Тогда
		Если ОписаниеСобытия.Свойство("СтрокаТаблицы") Тогда
			ОписаниеСобытия.Вставить("УИД", ОписаниеСобытия.СтрокаТаблицы.УИД);
		Иначе 
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Ошибка системы отмены последнего действия - отсутствует идентификатор строки. Событие: """ + ОписаниеСобытия.Событие + """";
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	Если ОписаниеСобытия.Событие = "УдалениеЗадачи" Тогда
		СтруктураСохранения = Новый Структура("УИД, НаименованиеЗадачи, ВидЭлемента, Задача, КодСДР, НомерСтрокиПроекта, ДатаНачала, ДатаОкончания, РДО, ПДО, РДН, ПДН, РучнойВвод, Длительность, КартинкаОпубликована, КартинкаПредшественники,
				| ЕдиницаВремени, Календарь, Родитель, Картинка, СуммаПоступление, ВалютаПоступлений, СуммаПоступлениеУпр, СуммаВыплата, ВалютаВыплат, СуммаВыплатаУпр, СуммаДоход, ВалютаДоходов, СуммаДоходУпр, СуммаРасход,
				| ВалютаРасходов, СуммаРасходУпр, СуммаМатериалы, СуммаРоли, КоличествоРоли, НадписьРоли, СуммаРесурсы, КоличествоРесурсы, НадписьРесурсы, СуммаРесурсыОперативный, КоличествоРесурсыОперативный, ВидОперации,
				| НадписьПредшественники, НадписьПредшественникиПоНомеруСтроки, НадписьПоследователиПоНомеруСтроки, НадписьПоследователи, ЕстьКомментарий,
				| НадписьРесурсыОперативный, КонтрактныйДатаНачала, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, КонтрактныйДатаОкончания, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение");
		
		ЗаполнитьЗначенияСвойств(СтруктураСохранения, ОписаниеСобытия.СтрокаТаблицы);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.ТаблицаПредшественники Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланПредшественники));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ТаблицаПредшественники", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.ПланДвиженияДенежныхСредств Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланДДС));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланДвиженияДенежныхСредств", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.ПланДоходов Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланДоходы));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланДоходов", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.ПланРасходов Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРасходы));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланРасходов", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.ПланРолейОбщая Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРоли));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланРолейОбщая", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.ПланРесурсовОбщая Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРесурсы));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланРесурсовОбщая", МассивПлана);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.ПланРесурсовОперативный Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРесурсыОперативный));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланРесурсовОперативный",);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.КомментарииКЗадаче Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураКомментарииКЗадаче));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("КомментарииКЗадаче",);
		
		МассивПлана = Новый Массив;
		Для Каждого СтрокаПлана ИЗ ОписаниеСобытия.СтрокаТаблицы.ПланМатериаловОбщая Цикл
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланМатериалы));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			МассивПлана.Добавить(СтруктураПлана);
		КонецЦикла;
		СтруктураСохранения.Вставить("ПланМатериаловОбщая", МассивПлана);
		
		ОписаниеСобытия.Вставить("ДанныеСтроки", СтруктураСохранения);
		ОчиститьПлановыеДанные(ОписаниеСобытия.СтрокаТаблицы.УИД);
		УдалитьСтрокуВДеревеСДР(ОписаниеСобытия.СтрокаТаблицы, ЭтаФорма);
		ТекущийИндекс = ТаблицаПроектаКопия.Индекс(ОписаниеСобытия.СтрокаТаблицы);
		
		тСоответствиеТаблицыУИД.Удалить(ОписаниеСобытия.СтрокаТаблицы.УИД);
		
		СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(ОписаниеСобытия.СтрокаТаблицы.Родитель), " ", ОписаниеСобытия.СтрокаТаблицы.Родитель);
		МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
		Если МассивРодитель = Неопределено Тогда
			МассивРодитель = Новый Массив;
		КонецЕсли;
		Если МассивРодитель.Найти(ОписаниеСобытия.СтрокаТаблицы) <> Неопределено Тогда
			МассивРодитель.Удалить(МассивРодитель.Найти(ОписаниеСобытия.СтрокаТаблицы));
		КонецЕсли;
		тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
		
		ТаблицаПроектаКопия.Удалить(ОписаниеСобытия.СтрокаТаблицы);
		Для К = ТекущийИндекс По ТаблицаПроектаКопия.Количество() - 1 Цикл
			НоваяСтрокаПроекта = ТаблицаПроектаКопия.Получить(К);
			Если НоваяСтрокаПроекта.Идентификатор > -1 Тогда 
				ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(НоваяСтрокаПроекта.Идентификатор);
				Если ЭлементДерева <> Неопределено Тогда
					ЭлементДерева.ИндексТаблицы = К;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ОписаниеСобытия.Событие = "ИзменениеРеквизита" Тогда
		СтрокаТаблицы = ОписаниеСобытия.СтрокаТаблицы;
		Если ТипЗнч(ОписаниеСобытия.Реквизит) = Тип("Структура") Тогда
			Если СтрокаТаблицы.Идентификатор >= 0 Тогда
				ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
				Для Каждого КлючИЗначение ИЗ ОписаниеСобытия.Реквизит Цикл
					ЭлементДерева[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЦикла;
			КонецЕсли;
			Для Каждого КлючИЗначение ИЗ ОписаниеСобытия.Реквизит Цикл
				СтрокаТаблицы[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЦикла;
		Иначе
			Если СтрокаТаблицы.Идентификатор >= 0 Тогда
				ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
				ЭлементДерева[ОписаниеСобытия.Реквизит] = ОписаниеСобытия.НовоеЗначение;
			КонецЕсли;
			СтрокаТаблицы[ОписаниеСобытия.Реквизит] = ОписаниеСобытия.НовоеЗначение;
		КонецЕсли;
	ИначеЕсли ОписаниеСобытия.Событие = "ИзменениеРеквизитаУИД" Тогда
		ОписаниеСобытия.Событие = "ИзменениеРеквизита";
		СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(ОписаниеСобытия.УИД);
		Если ТипЗнч(ОписаниеСобытия.Реквизит) = Тип("Структура") Тогда
			Если ОписаниеСобытия.Свойство("СтрокаТаблицы") Тогда
				ОписаниеСобытия.Удалить("СтрокаТаблицы");
			КонецЕсли;
			Для Каждого КлючИЗначение ИЗ ОписаниеСобытия.Реквизит Цикл
				КопияСобытие = Новый Структура(Новый ФиксированнаяСтруктура(ОписаниеСобытия));
				КопияСобытие.Вставить("Реквизит", КлючИЗначение.Ключ);
				КопияСобытие.Вставить("НовоеЗначение", КлючИЗначение.Значение);
				
				КопияСобытие.Вставить("СтароеЗначение", СтрокаТаблицы[КопияСобытие.Реквизит]);
				
				СтрокаТаблицы[КопияСобытие.Реквизит] = КопияСобытие.НовоеЗначение;
				Если КопияСобытие.Реквизит = "НаименованиеЗадачи" ИЛИ КопияСобытие.Реквизит = "ВидЭлемента" ИЛИ КопияСобытие.Реквизит = "ВидОперации" ИЛИ КопияСобытие.Реквизит = "КодСДР" Тогда
					СтрокаТаблицы.ИзменилисьРеквизиты = Истина;
				КонецЕсли;
				Если СтрокаТаблицы.Идентификатор >= 0 Тогда
					ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
					ЭлементДерева[КопияСобытие.Реквизит] = КопияСобытие.НовоеЗначение;
				КонецЕсли;
				Если СписокДействийДляИстории.Количество() > 0 Тогда
					СписокДействийДляИстории.Получить(СписокДействийДляИстории.Количество() - 1).Значение.Добавить(КопияСобытие);
				КонецЕсли;
			КонецЦикла;
			Возврат;
		Иначе
			ОписаниеСобытия.Вставить("СтароеЗначение", СтрокаТаблицы[ОписаниеСобытия.Реквизит]);
		КонецЕсли;
	ИначеЕсли ОписаниеСобытия.Событие = "ИзменениеПлана" Тогда
		
	КонецЕсли;
	Если ОписаниеСобытия.Свойство("СтрокаТаблицы") Тогда
		ОписаниеСобытия.Удалить("СтрокаТаблицы");
	КонецЕсли;
	Если СписокДействийДляИстории.Количество() > 0 Тогда
		СписокДействийДляИстории.Получить(СписокДействийДляИстории.Количество() - 1).Значение.Добавить(ОписаниеСобытия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия)
	СтрокаТаблицы = ОписаниеСобытия.СтрокаТаблицы;
	СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
	Если СтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ОписаниеСобытия.ИмяТаблицы = "ТаблицаПредшественники" Тогда
		СтруктураШаблон = СтруктураПланПредшественники;
	ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланДвиженияДенежныхСредств" Тогда
		СтруктураШаблон = СтруктураПланДДС;
	ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланДоходов" Тогда
		СтруктураШаблон = СтруктураПланДоходы;
	ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланРасходов" Тогда
		СтруктураШаблон = СтруктураПланРасходы;
	ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланРолейОбщая" Тогда
		СтруктураШаблон = СтруктураПланРоли;
	ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланРесурсовОбщая" Тогда
		СтруктураШаблон = СтруктураПланРесурсы;
	ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланМатериаловОбщая" Тогда
		СтруктураШаблон = СтруктураПланМатериалы;
	ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "КомментарииКЗадаче" Тогда
		СтруктураШаблон = СтруктураКомментарииКЗадаче;
	КонецЕсли;
	
	Если СтрокаДерева[ОписаниеСобытия.ИмяТаблицы].Количество() = СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы].Количество() Тогда
		// изменение реквизита или порядка строк
		Для К = 0 ПО СтрокаДерева[ОписаниеСобытия.ИмяТаблицы].Количество() - 1 Цикл
			Если СтрокаДерева[ОписаниеСобытия.ИмяТаблицы][К].ГУИД <> СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы][К].ГУИД Тогда
				ОписаниеСобытия.Вставить("СобытиеПлана", "ИзменениеПорядкаСтроки");
				ОписаниеСобытия.Вставить("ГУИД", СтрокаДерева[ОписаниеСобытия.ИмяТаблицы][К].ГУИД);
				Если К < СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы].Количество() -1 Тогда
					СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы].Сдвинуть(К, 1);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ОписаниеСобытия.Свойство("СобытиеПлана") Тогда
			Для К = 0 ПО СтрокаДерева[ОписаниеСобытия.ИмяТаблицы].Количество() - 1 Цикл
				СтрокаПланДерева = СтрокаДерева[ОписаниеСобытия.ИмяТаблицы][К];
				СтрокаПланТаблицы = СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы][К];
				Для Каждого КлючИЗначение ИЗ СтруктураШаблон Цикл
					Если СтрокаПланДерева[КлючИЗначение.Ключ] <> СтрокаПланТаблицы[КлючИЗначение.Ключ] Тогда
						ОписаниеСобытия.Вставить("СобытиеПлана", "ИзменениеРеквизита");
						
						СобытиеПлана = Новый Структура;
						СобытиеПлана.Вставить("Реквизит", КлючИЗначение.Ключ);
						СобытиеПлана.Вставить("СтароеЗначение", СтрокаПланТаблицы[КлючИЗначение.Ключ]);
						СобытиеПлана.Вставить("ГУИД", СтрокаПланДерева.ГУИД);
						Если ОписаниеСобытия.Свойство("МассивСобытий") Тогда
							МассивСобытий = ОписаниеСобытия.МассивСобытий;
						Иначе
							МассивСобытий = Новый Массив;
						КонецЕсли;
						МассивСобытий.Добавить(СобытиеПлана);
						ОписаниеСобытия.Вставить("МассивСобытий", МассивСобытий);
						
						ОписаниеСобытия.Вставить("Реквизит", КлючИЗначение.Ключ);
						ОписаниеСобытия.Вставить("СтароеЗначение", СтрокаПланТаблицы[КлючИЗначение.Ключ]);
						ОписаниеСобытия.Вставить("ГУИД", СтрокаПланДерева.ГУИД);
						
						СтрокаПланТаблицы[КлючИЗначение.Ключ] = СтрокаПланДерева[КлючИЗначение.Ключ];
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		Если НЕ ОписаниеСобытия.Свойство("СобытиеПлана") Тогда
			Возврат;
		КонецЕсли;
	ИначеЕсли СтрокаДерева[ОписаниеСобытия.ИмяТаблицы].Количество() > СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы].Количество() Тогда
		Возврат;
	ИначеЕсли СтрокаДерева[ОписаниеСобытия.ИмяТаблицы].Количество() < СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы].Количество() Тогда
		ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
		Для К = 0 По СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы].Количество() - 1 Цикл
			Если СтрокаДерева[ОписаниеСобытия.ИмяТаблицы].Количество() = К ИЛИ СтрокаДерева[ОписаниеСобытия.ИмяТаблицы][К].ГУИД <> СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы][К].ГУИД Тогда
				ОписаниеСобытия.Вставить("ГУИД", СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы][К].ГУИД);
				СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураШаблон));
				ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаТаблицы[ОписаниеСобытия.ИмяТаблицы][К]);
				ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСобытие(ОписаниеСобытия, СтруктураВозврата)
	Если ТипЗнч(ОписаниеСобытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыКопия = тСоответствиеТаблицыУИД.Получить(ОписаниеСобытия.УИД);
	Если СтрокаТаблицыКопия <> Неопределено И СтрокаТаблицыКопия.Идентификатор >= 0 Тогда
		ДанныеДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыКопия.Идентификатор);
	КонецЕсли;
	
	Если ОписаниеСобытия.Событие = "ДобавлениеЗадачи" Тогда
		Если ДанныеДерева <> Неопределено Тогда
			ТекущийРодитель = ?(ДанныеДерева.ПолучитьРодителя() = Неопределено, ДеревоПроекта, ДанныеДерева.ПолучитьРодителя());
			ТекущийРодитель.ПолучитьЭлементы().Удалить(ДанныеДерева);
		КонецЕсли;
		Если НЕ СтруктураВозврата.Свойство("ПересчитатьСДР") Тогда
			СтруктураВозврата.Вставить("ПересчитатьСДР");
		КонецЕсли;
		
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("Событие", "УдалениеЗадачи");
		СтруктураИзменения.Вставить("УИД", СтрокаТаблицыКопия.УИД);
		СтруктураВозврата.МассивСообщенийСервер.Добавить(СтруктураИзменения);
		
		УдалитьСтрокуВДеревеСДР(СтрокаТаблицыКопия, ЭтаФорма);
		ТекущийИндекс= ТаблицаПроектаКопия.Индекс(СтрокаТаблицыКопия);
		
		тСоответствиеТаблицыУИД.Удалить(СтрокаТаблицыКопия.УИД);
		
		СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыКопия.Родитель), " ", СтрокаТаблицыКопия.Родитель);
		МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
		Если МассивРодитель = Неопределено Тогда
			МассивРодитель = Новый Массив;
		КонецЕсли;
		Если МассивРодитель.Найти(СтрокаТаблицыКопия) <> Неопределено Тогда
			МассивРодитель.Удалить(МассивРодитель.Найти(СтрокаТаблицыКопия));
		КонецЕсли;
		тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
		
		ТаблицаПроектаКопия.Удалить(СтрокаТаблицыКопия);
		Пока ТекущийИндекс < ТаблицаПроектаКопия.Количество() - 1 Цикл
			СтрокаТаблицыКопия = ТаблицаПроектаКопия.Получить(ТекущийИндекс);
			Если СтрокаТаблицыКопия.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыКопия.Идентификатор);
				СтрокаДерева.ИндексТаблицы = ТекущийИндекс;
			КонецЕсли;
			ТекущийИндекс = ТекущийИндекс + 1;
		КонецЦикла;
		ТекущийИндекс = 0;
		Пока ТекущийИндекс < ТаблицаПредшественники.Количество() Цикл
			СтрокаПредшественники = ТаблицаПредшественники.Получить(ТекущийИндекс);
			Если СтрокаПредшественники.УИД = ОписаниеСобытия.УИД ИЛИ СтрокаПредшественники.ПредшественникУИД = ОписаниеСобытия.УИД Тогда
				МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПредшественники.УИД);
				Если МассивПредшественники <> Неопределено Тогда
					Если МассивПредшественники.Найти(СтрокаПредшественники) <> Неопределено Тогда
						МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПредшественники));
					КонецЕсли;
				КонецЕсли;
				тСоответствиеПредшественникиУИД.Вставить(СтрокаПредшественники.УИД, МассивПредшественники);
				
				МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПредшественники.ПредшественникУИД);
				Если МассивПредшественники <> Неопределено Тогда
					Если МассивПредшественники.Найти(СтрокаПредшественники) <> Неопределено Тогда
						МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПредшественники));
					КонецЕсли;
				КонецЕсли;
				тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПредшественники.ПредшественникУИД, МассивПредшественники);
				
				ТаблицаПредшественники.Удалить(ТекущийИндекс);
				Продолжить;
			КонецЕсли;
			ТекущийИндекс = ТекущийИндекс + 1;
		КонецЦикла;
		ПоказатьКнопкиКоличествоУровней();
	ИначеЕсли ОписаниеСобытия.Событие = "ИзменениеРеквизита" Тогда
		Если ОписаниеСобытия.Реквизит = "УИД" Тогда
			ЗаменитьУИДВоВсехТаблицах(СтрокаТаблицыКопия.УИД, ОписаниеСобытия.СтароеЗначение);
		КонецЕсли;
		
		Если ДанныеДерева <> Неопределено Тогда
			Если ТипЗнч(ОписаниеСобытия.Реквизит) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение ИЗ ОписаниеСобытия.Реквизит Цикл
					ДанныеДерева[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
				КонецЦикла;
			Иначе
				ДанныеДерева[ОписаниеСобытия.Реквизит] = ОписаниеСобытия.СтароеЗначение;
			КонецЕсли;
		КонецЕсли;
		
		Если ОписаниеСобытия.Реквизит = "Родитель" Тогда
			
			СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыКопия.Родитель), " ", СтрокаТаблицыКопия.Родитель);
			МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
			Если МассивРодитель = Неопределено Тогда
				МассивРодитель = Новый Массив;
			КонецЕсли;
			Если МассивРодитель.Найти(СтрокаТаблицыКопия) <> Неопределено Тогда
				МассивРодитель.Удалить(МассивРодитель.Найти(СтрокаТаблицыКопия));
			КонецЕсли;
			тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
			
			СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(ОписаниеСобытия.СтароеЗначение), " ", ОписаниеСобытия.СтароеЗначение);
			МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
			Если МассивРодитель = Неопределено Тогда
				МассивРодитель = Новый Массив;
			КонецЕсли;
			Если МассивРодитель.Найти(СтрокаТаблицыКопия) <> Неопределено Тогда
				МассивРодитель.Удалить(МассивРодитель.Найти(СтрокаТаблицыКопия));
			КонецЕсли;
			тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
		КонецЕсли;
		
		Если ТипЗнч(ОписаниеСобытия.Реквизит) = Тип("Структура") Тогда
			Возврат;
		Иначе
			СтрокаТаблицыКопия[ОписаниеСобытия.Реквизит] = ОписаниеСобытия.СтароеЗначение;
		КонецЕсли;
		
		Если ОписаниеСобытия.Реквизит = "Родитель" Тогда
			Если ДанныеДерева <> Неопределено Тогда
				ТекущийРодитель = ДанныеДерева.ПолучитьРодителя();
				Если ТекущийРодитель = Неопределено Тогда
					ТекущийРодитель = ДеревоПроекта;
				КонецЕсли;
				ТекущийРодитель.ПолучитьЭлементы().Удалить(ДанныеДерева);
				СтрокаТаблицыКопия.Идентификатор = -1;
				//СтрокаТаблицыКопия.ИдентификаторСДР = -1;
				ДанныеДерева = Неопределено;
			КонецЕсли;
			Если НЕ СтруктураВозврата.Свойство("ПересчитатьСДР") Тогда
				СтруктураВозврата.Вставить("ПересчитатьСДР");
			КонецЕсли;
			// перестроить узел в дереве сдр
			ПереместитьСтрокуДереваСДРВНовогоРодителя(СтрокаТаблицыКопия, ОписаниеСобытия.СтароеЗначение);
			
			ОчиститьИдентификаторРекурсивно(СтрокаТаблицыКопия);
			ПроверитьСтрокуНаФильтрОбновитьВДереве(СтрокаТаблицыКопия);
			
			СформироватьДеревоПроектаПоТаблицеПроектаСФильтром(Ложь, Новый Массив);
			ОтменитьСобытиеОтсортироватьСДР(СтрокаТаблицыКопия, ДанныеДерева);
		ИначеЕсли ОписаниеСобытия.Реквизит = "КодСДР" Тогда
			ОтменитьСобытиеОтсортироватьСДР(СтрокаТаблицыКопия, ДанныеДерева);
		ИначеЕсли ОписаниеСобытия.Реквизит = "НомерСтрокиПроекта" Тогда
			СтрокаСДР = ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицыКопия.ИдентификаторСДР);
			СтрокаСДР.НомерСтрокиПроекта = СтрокаТаблицыКопия.НомерСтрокиПроекта;
		КонецЕсли;
		
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("УИД", СтрокаТаблицыКопия.УИД);
		СтруктураИзменения.Вставить("Событие", "ИзменениеРеквизита");
		СтруктураИзменения.Вставить("ИмяРеквизита", ОписаниеСобытия.Реквизит);
		СтруктураИзменения.Вставить("НовоеЗначение", ОписаниеСобытия.СтароеЗначение);
		СтруктураВозврата.МассивСообщенийСервер.Добавить(СтруктураИзменения);
		
	ИначеЕсли ОписаниеСобытия.Событие = "УдалениеЗадачи" Тогда
		СтрокаТаблицыКопия = ТаблицаПроектаКопия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыКопия, ОписаниеСобытия.ДанныеСтроки, , стрКолонкиТаблицыИсключение);
		
		тСоответствиеТаблицыУИД.Вставить(СтрокаТаблицыКопия.УИД, СтрокаТаблицыКопия);
		
		СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыКопия.Родитель), " ", СтрокаТаблицыКопия.Родитель);
		МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
		Если МассивРодитель = Неопределено Тогда
			МассивРодитель = Новый Массив;
		КонецЕсли;
		МассивРодитель.Добавить(СтрокаТаблицыКопия);
		тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
		
		Для Каждого СтрокаПлан ИЗ ОписаниеСобытия.ДанныеСтроки.ТаблицаПредшественники Цикл
			НоваяСтрокаПлан = СтрокаТаблицыКопия.ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
			
			НоваяСтрокаПлан = ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
			НоваяСтрокаПлан.УИД = СтрокаТаблицыКопия.УИД;
			
			МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(НоваяСтрокаПлан.УИД);
			Если МассивПредшественники = Неопределено Тогда
				МассивПредшественники = Новый Массив;
			КонецЕсли;
			МассивПредшественники.Добавить(НоваяСтрокаПлан);
			тСоответствиеПредшественникиУИД.Вставить(НоваяСтрокаПлан.УИД, МассивПредшественники);
			
			МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(НоваяСтрокаПлан.ПредшественникУИД);
			Если МассивПредшественники = Неопределено Тогда
				МассивПредшественники = Новый Массив;
			КонецЕсли;
			МассивПредшественники.Добавить(НоваяСтрокаПлан);
			тСоответствиеПредшественникиПредшественникУИД.Вставить(НоваяСтрокаПлан.ПредшественникУИД, МассивПредшественники);
		КонецЦикла;
		Для Каждого СтрокаПлан ИЗ ОписаниеСобытия.ДанныеСтроки.ПланДвиженияДенежныхСредств Цикл
			НоваяСтрокаПлан = СтрокаТаблицыКопия.ПланДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		Для Каждого СтрокаПлан ИЗ ОписаниеСобытия.ДанныеСтроки.ПланДоходов Цикл
			НоваяСтрокаПлан = СтрокаТаблицыКопия.ПланДоходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		Для Каждого СтрокаПлан ИЗ ОписаниеСобытия.ДанныеСтроки.ПланРасходов Цикл
			НоваяСтрокаПлан = СтрокаТаблицыКопия.ПланРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		Для Каждого СтрокаПлан ИЗ ОписаниеСобытия.ДанныеСтроки.ПланРолейОбщая Цикл
			НоваяСтрокаПлан = СтрокаТаблицыКопия.ПланРолейОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		Для Каждого СтрокаПлан ИЗ ОписаниеСобытия.ДанныеСтроки.ПланРесурсовОбщая Цикл
			НоваяСтрокаПлан = СтрокаТаблицыКопия.ПланРесурсовОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		Для Каждого СтрокаПлан ИЗ ОписаниеСобытия.ДанныеСтроки.ПланМатериаловОбщая Цикл
			НоваяСтрокаПлан = СтрокаТаблицыКопия.ПланМатериаловОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		
		СтрокаТаблицыКопия.Идентификатор = -1;
		СтрокаТаблицыКопия.ИдентификаторСДР = -1;
		
		ДобавитьСтрокуВДеревоСДР(СтрокаТаблицыКопия, Ложь);
		СформироватьДеревоПроектаПоТаблицеПроектаСФильтром(Ложь, Новый Массив);
		
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("Событие", "ДобавлениеЗадачи");
		СтруктураИзменения.Вставить("УИД", СтрокаТаблицыКопия.УИД);
		СтруктураИзменения.Вставить("ДанныеЗадачи", ОписаниеСобытия.ДанныеСтроки);
		СтруктураВозврата.МассивСообщенийСервер.Добавить(СтруктураИзменения);
		
	ИначеЕсли ОписаниеСобытия.Событие = "ИзменениеПлана" Тогда
		СтрокаТаблицыПлана = Неопределено;
		Если НЕ ОписаниеСобытия.Свойство("ГУИД") Тогда
			Возврат;
		КонецЕсли;
		ТаблицаПлана = СтрокаТаблицыКопия[ОписаниеСобытия.ИмяТаблицы];
		Для К = 0 ПО ТаблицаПлана.Количество() - 1 Цикл
			Если ТаблицаПлана.Получить(К).ГУИД = ОписаниеСобытия.ГУИД Тогда
				СтрокаТаблицыПлана = ТаблицаПлана.Получить(К);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ОписаниеСобытия.Свойство("СобытиеПлана") ИЛИ СтрокаТаблицыПлана = Неопределено И ОписаниеСобытия.СобытиеПлана <> "УдалениеСтроки" Тогда
			Возврат;
		КонецЕсли;
		Если ОписаниеСобытия.СобытиеПлана = "ИзменениеРеквизита" Тогда
			СтрокаТаблицыПлана[ОписаниеСобытия.Реквизит] = ОписаниеСобытия.СтароеЗначение;
			Если ОписаниеСобытия.Свойство("МассивСобытий") Тогда
				Для Каждого СобытиеМассива ИЗ ОписаниеСобытия.МассивСобытий Цикл
					СтрокаТаблицыПлана[СобытиеМассива.Реквизит] = СобытиеМассива.СтароеЗначение;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ОписаниеСобытия.СобытиеПлана = "ИзменениеПорядкаСтроки" Тогда
			Если К < ТаблицаПлана.Количество() - 1 Тогда
				ТаблицаПлана.Сдвинуть(К, 1);
			КонецЕсли;
		ИначеЕсли ОписаниеСобытия.СобытиеПлана = "ДобавлениеСтроки" Тогда
			ТаблицаПлана.Удалить(СтрокаТаблицыПлана);
		ИначеЕсли ОписаниеСобытия.СобытиеПлана = "УдалениеСтроки" Тогда
			СтрокаТаблицыПлана = ТаблицаПлана.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыПлана, ОписаниеСобытия.СтрокаПлана);
		КонецЕсли;
		Если ДанныеДерева <> Неопределено Тогда
			ДанныеДерева[ОписаниеСобытия.ИмяТаблицы].Очистить();
			Для Каждого СтрокаПлан ИЗ СтрокаТаблицыКопия[ОписаниеСобытия.ИмяТаблицы] Цикл
				СтрокаНовыйПлан = ДанныеДерева[ОписаниеСобытия.ИмяТаблицы].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаНовыйПлан, СтрокаПлан);
			КонецЦикла;
		КонецЕсли;
		
		Если ОписаниеСобытия.ИмяТаблицы = "ПланДвиженияДенежныхСредств" Тогда
			ПосчитатьОбщиеИтогиПоКолонкам("СуммаПоступление, СуммаПоступлениеУпр, СуммаВыплата, СуммаВыплатаУпр", СтрокаТаблицыКопия.УИД);
		ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланДоходов" Тогда
			ПосчитатьОбщиеИтогиПоКолонкам("СуммаДоход, СуммаДоходУпр", СтрокаТаблицыКопия.УИД);
		ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланРасходов" Тогда
			ПосчитатьОбщиеИтогиПоКолонкам("СуммаРасход, СуммаРасходУпр", СтрокаТаблицыКопия.УИД);
		ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланРолейОбщая" Тогда
			ПосчитатьОбщиеИтогиПоКолонкам("СуммаРоли, КоличествоРоли", СтрокаТаблицыКопия.УИД);
		ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланРесурсовОбщая" Тогда
			ПосчитатьОбщиеИтогиПоКолонкам("СуммаРесурсы, КоличествоРесурсы", СтрокаТаблицыКопия.УИД);
		ИначеЕсли ОписаниеСобытия.ИмяТаблицы = "ПланМатериаловОбщая" Тогда
			ПосчитатьОбщиеИтогиПоКолонкам("СуммаМатериалы", СтрокаТаблицыКопия.УИД);
		КонецЕсли;
		
		Если ОписаниеСобытия.ИмяТаблицы = "ТаблицаПредшественники" Тогда
			Если ОписаниеСобытия.СобытиеПлана = "ИзменениеРеквизита" Тогда
				Для Каждого СтрокаТаблицыПредшественник ИЗ ТаблицаПредшественники Цикл
					Если СтрокаТаблицыПредшественник.УИД = ОписаниеСобытия.УИД И СтрокаТаблицыПредшественник.ПредшественникУИД = СтрокаТаблицыПлана.ПредшественникУИД Тогда
						СтрокаТаблицыПредшественник[ОписаниеСобытия.Реквизит] = ОписаниеСобытия.СтароеЗначение;
						
						СообщениеСерверу = Новый Структура;
						СообщениеСерверу.Вставить("Событие", "ИзменитьПараметрыПредшественника");
						СообщениеСерверу.Вставить("УИД", ОписаниеСобытия.УИД);
						ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи", ОписаниеСобытия.УИД);
						ЗаполнитьЗначенияСвойств(ДанныеЗадачи, СтрокаТаблицыПлана);
						СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
						СтруктураВозврата.МассивСообщенийСервер.Добавить(СообщениеСерверу);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ОписаниеСобытия.СобытиеПлана = "ДобавлениеСтроки" Тогда
				Для Каждого СтрокаТаблицыПредшественник ИЗ ТаблицаПредшественники Цикл
					Если СтрокаТаблицыПредшественник.УИД = ОписаниеСобытия.УИД И СтрокаТаблицыПредшественник.ПредшественникУИД = СтрокаТаблицыПлана.ПредшественникУИД Тогда
						МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаТаблицыПредшественник.УИД);
						Если МассивПредшественники <> Неопределено Тогда
							Если МассивПредшественники.Найти(СтрокаТаблицыПредшественник) <> Неопределено Тогда
								МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаТаблицыПредшественник));
							КонецЕсли;
						КонецЕсли;
						тСоответствиеПредшественникиУИД.Вставить(СтрокаТаблицыПредшественник.УИД, МассивПредшественники);
						
						МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаТаблицыПредшественник.ПредшественникУИД);
						Если МассивПредшественники <> Неопределено Тогда
							Если МассивПредшественники.Найти(СтрокаТаблицыПредшественник) <> Неопределено Тогда
								МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаТаблицыПредшественник));
							КонецЕсли;
						КонецЕсли;
						тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаТаблицыПредшественник.ПредшественникУИД, МассивПредшественники);
						
						ТаблицаПредшественники.Удалить(СтрокаТаблицыПредшественник);
				
						СообщениеСерверу = Новый Структура;
						СообщениеСерверу.Вставить("Событие", "УдалитьПредшественника");
						СообщениеСерверу.Вставить("УИД", ОписаниеСобытия.УИД);
						ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД", ОписаниеСобытия.УИД, СтрокаТаблицыПлана.ПредшественникУИД);
						СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
						СтруктураВозврата.МассивСообщенийСервер.Добавить(СообщениеСерверу);
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ОписаниеСобытия.СобытиеПлана = "УдалениеСтроки" Тогда
				СтрокаТаблицыПлана = ТаблицаПредшественники.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыПлана, ОписаниеСобытия.СтрокаПлана);
				СтрокаТаблицыПлана.УИД = ОписаниеСобытия.УИД;
				
				МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаТаблицыПлана.УИД);
				Если МассивПредшественники = Неопределено Тогда
					МассивПредшественники = Новый Массив;
				КонецЕсли;
				МассивПредшественники.Добавить(СтрокаТаблицыПлана);
				тСоответствиеПредшественникиУИД.Вставить(СтрокаТаблицыПлана.УИД, МассивПредшественники);
				
				МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаТаблицыПлана.ПредшественникУИД);
				Если МассивПредшественники = Неопределено Тогда
					МассивПредшественники = Новый Массив;
				КонецЕсли;
				МассивПредшественники.Добавить(СтрокаТаблицыПлана);
				тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаТаблицыПлана.ПредшественникУИД, МассивПредшественники);
				
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("Событие", "ДобавитьПредшественника");
				СообщениеСерверу.Вставить("УИД", ОписаниеСобытия.УИД);
				СтруктураДанных = Новый Структура("УИД, ПредшественникУИД, Задержка, ТипСвязи, ЕдиницаВремени");
				ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаТаблицыПлана);
				СтруктураДанных.УИД = ОписаниеСобытия.УИД;
				СообщениеСерверу.Вставить("ДанныеЗадачи", СтруктураДанных);
			 	СтруктураВозврата.МассивСообщенийСервер.Добавить(СообщениеСерверу);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьСобытиеОтсортироватьСДР(СтрокаТаблицыКопия, ДанныеДерева)
	// отсортируем в СДР
	СтрокаСДР = ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицыКопия.ИдентификаторСДР);
	СтрокаСДР.КодСДР = СтрокаТаблицыКопия.КодСДР;
	ТекущийРодитель = СтрокаСДР.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		ТекущийРодитель = ДеревоСДР;
	КонецЕсли;
	ИндексУзла = ТекущийРодитель.ПолучитьЭлементы().Индекс(СтрокаСДР);
	Пока ИндексУзла > 0 И ТекущийРодитель.ПолучитьЭлементы().Получить(ИндексУзла - 1).КодСДР > СтрокаСДР.КодСДР Цикл
		ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ИндексУзла, -1);
		ИндексУзла = ИндексУзла - 1;
	КонецЦикла;
	Пока ИндексУзла < ТекущийРодитель.ПолучитьЭлементы().Количество() - 1 И ТекущийРодитель.ПолучитьЭлементы().Получить(ИндексУзла + 1).КодСДР < СтрокаСДР.КодСДР Цикл
		ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ИндексУзла, +1);
		ИндексУзла = ИндексУзла + 1;
	КонецЦикла;
	// отсортируем в дереве/списке
	Если ДанныеДерева <> Неопределено Тогда
		ТекущийРодитель = ДанныеДерева.ПолучитьРодителя();
		Если ТекущийРодитель = Неопределено Тогда
			ТекущийРодитель = ДеревоПроекта;
		КонецЕсли;
		ИндексУзла = ТекущийРодитель.ПолучитьЭлементы().Индекс(ДанныеДерева);
		Пока ИндексУзла > 0 И ТекущийРодитель.ПолучитьЭлементы().Получить(ИндексУзла - 1).КодСДР > ДанныеДерева.КодСДР Цикл
			ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ИндексУзла, -1);
			ИндексУзла = ИндексУзла - 1;
		КонецЦикла;
		Пока ИндексУзла < ТекущийРодитель.ПолучитьЭлементы().Количество() - 1 И ТекущийРодитель.ПолучитьЭлементы().Получить(ИндексУзла + 1).КодСДР < ДанныеДерева.КодСДР Цикл
			ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ИндексУзла, +1);
			ИндексУзла = ИндексУзла + 1;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область КомандыДереваПроектов

&НаКлиенте
Процедура КомандаДеревоПроектаПереместитьВверх(Команда)
	Если Элементы.ДеревоПроекта.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Изменено = Ложь;
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого Идентификатор ИЗ Элементы.ДеревоПроекта.ВыделенныеСтроки Цикл
		КодСДР = ДеревоПроекта.НайтиПоИдентификатору(Идентификатор).КодСДР;
		СоответствиеСДР = Новый Структура;
		СоответствиеСДР.Вставить("Идентификатор", Идентификатор);
		СоответствиеСДР.Вставить("КодСДР", КодСДР);
		Для К = 0 По МассивВыделенныхСтрок.Количество() - 1 Цикл
			Если МассивВыделенныхСтрок.Получить(К).КодСДР > КодСДР Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		МассивВыделенныхСтрок.Вставить(К, СоответствиеСДР);
	КонецЦикла;
	Для К = 0 По МассивВыделенныхСтрок.Количество() - 1 Цикл
		МассивВыделенныхСтрок.Установить(К, МассивВыделенныхСтрок.Получить(К).Идентификатор);
	КонецЦикла;
	НачалиДействие = Ложь;
	ПредыдущийСДР = "";
	ПредыдущийПередвинут = Истина;
	Для Каждого Идентификатор ИЗ МассивВыделенныхСтрок Цикл
		ТекущиеДанные = ДеревоПроекта.НайтиПоИдентификатору(Идентификатор);
		СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
		ДругойСДР = Истина;
		Если НЕ ПредыдущийПередвинут Тогда
			// проверим СДР текущего и предыдущего
			СтрокаСДР = ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
			Если СтрокаСДР.ПолучитьРодителя() = Неопределено Тогда
				РодительСДР = ДеревоСДР;
			Иначе 
				РодительСДР = СтрокаСДР.ПолучитьРодителя();
			КонецЕсли;
			Если РодительСДР.ПолучитьЭлементы().Индекс(СтрокаСДР) = 0 Тогда
				ДругойСДР = Истина;
			ИначеЕсли РодительСДР.ПолучитьЭлементы().Получить(РодительСДР.ПолучитьЭлементы().Индекс(СтрокаСДР) - 1).КодСДР <> ПредыдущийСДР Тогда
				ДругойСДР = Истина;
			Иначе
				ДругойСДР = Ложь;
			КонецЕсли;
		КонецЕсли;
		ПредыдущийСДР = ТекущиеДанные.КодСДР;
		// если выделено несколько строк, то последняя не передвинется, но передвинутся все остальные. Таким образом, циклически будут прогоняться
		Если ПредыдущийПередвинут ИЛИ ДругойСДР Тогда
			ПредыдущийПередвинут = Ложь;
			Если ПереместитьСтрокуДереваСДРВверх(СтрокаТаблицы, НачалиДействие) Тогда
				Если РежимОтображенияСписок Тогда
					НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
					ТекущийИндекс = НаборЭлементовДерева.Индекс(ТекущиеДанные);
					// посчитаем сколько по индексам нам двигаться вверх
					Для ИндексСмещения = 1 По ТекущийИндекс Цикл
						Если НаборЭлементовДерева.Получить(ТекущийИндекс - ИндексСмещения).КодСДР < ТекущиеДанные.КодСДР Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					ИндексСмещения = ИндексСмещения - 1;
					Если ИндексСмещения > 0 Тогда
						МассивПодчиненныхУИД = ПолучитьМассивПодчиненныхУИД(ТекущиеДанные.УИД);
						МассивПодчиненныхУИД.Добавить(ТекущиеДанные.УИД);
						Пока ТекущийИндекс < НаборЭлементовДерева.Количество() И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(ТекущийИндекс).УИД) <> Неопределено Цикл
							НаборЭлементовДерева.Сдвинуть(ТекущийИндекс, - ИндексСмещения);
							ТекущийИндекс = ТекущийИндекс + 1;
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
						ТекущийРодитель = ДеревоПроекта;
					Иначе
						ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
					КонецЕсли;
					ТекущийИндекс = ТекущийРодитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);
					Если ТекущийИндекс > 0 Тогда
						ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ТекущийИндекс, -1);
					КонецЕсли;
				КонецЕсли;
				Изменено = Истина;
				ПредыдущийПередвинут = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Изменено Тогда
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьДиаграммуГанта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоПроектаПереместитьВниз(Команда)
	Если Элементы.ДеревоПроекта.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Изменено = Ложь;
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого Идентификатор ИЗ Элементы.ДеревоПроекта.ВыделенныеСтроки Цикл
		КодСДР = ДеревоПроекта.НайтиПоИдентификатору(Идентификатор).КодСДР;
		СоответствиеСДР = Новый Структура;
		СоответствиеСДР.Вставить("Идентификатор", Идентификатор);
		СоответствиеСДР.Вставить("КодСДР", КодСДР);
		Для К = 0 По МассивВыделенныхСтрок.Количество() - 1 Цикл
			Если МассивВыделенныхСтрок.Получить(К).КодСДР < КодСДР Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		МассивВыделенныхСтрок.Вставить(К, СоответствиеСДР);
	КонецЦикла;
	Для К = 0 По МассивВыделенныхСтрок.Количество() - 1 Цикл
		МассивВыделенныхСтрок.Установить(К, МассивВыделенныхСтрок.Получить(К).Идентификатор);
	КонецЦикла;
	НачалиДействие = Ложь;
	ПредыдущийСДР = "";
	ПредыдущийПередвинут = Истина;
	Для Каждого Идентификатор ИЗ МассивВыделенныхСтрок Цикл
		ТекущиеДанные = ДеревоПроекта.НайтиПоИдентификатору(Идентификатор);
		СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
		ДругойСДР = Истина;
		Если НЕ ПредыдущийПередвинут Тогда
			// проверим СДР текущего и предыдущего
			СтрокаСДР = ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
			Если СтрокаСДР.ПолучитьРодителя() = Неопределено Тогда
				РодительСДР = ДеревоСДР;
			Иначе 
				РодительСДР = СтрокаСДР.ПолучитьРодителя();
			КонецЕсли;
			Если РодительСДР.ПолучитьЭлементы().Индекс(СтрокаСДР) = РодительСДР.ПолучитьЭлементы().Количество() - 1 Тогда
				ДругойСДР = Истина;
			ИначеЕсли РодительСДР.ПолучитьЭлементы().Получить(РодительСДР.ПолучитьЭлементы().Индекс(СтрокаСДР) + 1).КодСДР <> ПредыдущийСДР Тогда
				ДругойСДР = Истина;
			Иначе
				ДругойСДР = Ложь;
			КонецЕсли;
		КонецЕсли;
		ПредыдущийСДР = ТекущиеДанные.КодСДР;
		// если выделено несколько строк, то последняя не передвинется, но передвинутся все остальные. Таким образом, циклически будут прогоняться
		Если ПредыдущийПередвинут ИЛИ ДругойСДР Тогда
			ПредыдущийПередвинут = Ложь;
			Если ПереместитьСтрокуДереваСДРВниз(СтрокаТаблицы, НачалиДействие) Тогда
				ПредыдущийПередвинут = Истина;
				Если РежимОтображенияСписок Тогда
					НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
					ТекущийИндекс = НаборЭлементовДерева.Индекс(ТекущиеДанные);
					МассивПодчиненныхУИД = ПолучитьМассивПодчиненныхУИД(ТекущиеДанные.УИД);
					МассивПодчиненныхУИД.Добавить(ТекущиеДанные.УИД);
					МассивСтрокДляСдвига = Новый Массив;
					Пока ТекущийИндекс < НаборЭлементовДерева.Количество() - 1 И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(ТекущийИндекс).УИД) <> Неопределено Цикл
						МассивСтрокДляСдвига.Вставить(0, НаборЭлементовДерева.Получить(ТекущийИндекс));
						ТекущийИндекс = ТекущийИндекс + 1;
					КонецЦикла;
					ИндексСмещения = ТекущийИндекс;
					Пока ИндексСмещения <= НаборЭлементовДерева.Количество() - 1 И НаборЭлементовДерева.Получить(ИндексСмещения).КодСДР < ТекущиеДанные.КодСДР Цикл
						ИндексСмещения = ИндексСмещения + 1;
					КонецЦикла;
					ИндексСмещения = ИндексСмещения - ТекущийИндекс;
					Если ИндексСмещения > 0 Тогда
						Для Каждого СтрокаМассива ИЗ МассивСтрокДляСдвига Цикл
							НаборЭлементовДерева.Сдвинуть(НаборЭлементовДерева.Индекс(СтрокаМассива), ИндексСмещения);
						КонецЦикла;
					КонецЕсли;
				Иначе
					Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
						ТекущийРодитель = ДеревоПроекта;
					Иначе
						ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
					КонецЕсли;
					ТекущийИндекс = ТекущийРодитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);
					Если ТекущийИндекс < ТекущийРодитель.ПолучитьЭлементы().Количество() - 1 Тогда
						ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ТекущийИндекс, 1);
					КонецЕсли;
				КонецЕсли;
				Изменено = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если Изменено Тогда
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьДиаграммуГанта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоПроектаУвеличитьУровень(Команда)
	Если Элементы.ДеревоПроекта.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого Идентификатор ИЗ Элементы.ДеревоПроекта.ВыделенныеСтроки Цикл
		Уровень = 1;
		ТекущиеДанные = ДеревоПроекта.НайтиПоИдентификатору(Идентификатор);
		Пока НЕ ПустаяСтрока(ТекущиеДанные.Родитель) Цикл
			Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
				Если СтрокаПроекта.УИД = ТекущиеДанные.Родитель Тогда
					ТекущиеДанные = СтрокаПроекта;
					Уровень = Уровень + 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СоответствиеУровень = Новый Структура;
		СоответствиеУровень.Вставить("Идентификатор", Идентификатор);
		СоответствиеУровень.Вставить("Уровень", Уровень);
		Для К = 0 По МассивВыделенныхСтрок.Количество() - 1 Цикл
			Если МассивВыделенныхСтрок.Получить(К).Уровень > Уровень Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		МассивВыделенныхСтрок.Вставить(К, СоответствиеУровень);
	КонецЦикла;
	Для К = 0 По МассивВыделенныхСтрок.Количество() - 1 Цикл
		МассивВыделенныхСтрок.Установить(К, МассивВыделенныхСтрок.Получить(К).Идентификатор);
	КонецЦикла;
	НачалиДействие = Ложь;
	МассивСообщенийСерверу = Новый Массив;
	Пока МассивВыделенныхСтрок.Количество() > 0 Цикл
		ТекущиеДанные = ДеревоПроекта.НайтиПоИдентификатору(МассивВыделенныхСтрок.Получить(0));
		МассивВыделенныхСтрок.Удалить(0);
		СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
		Если ПереместитьСтрокуДереваСДРВправо(СтрокаТаблицы, НачалиДействие) Тогда
			Если РежимОтображенияСписок Тогда
				// При перемещениии враво у нас ничего не меняется в списке. Если что-то станет невидимым, оно обработается не здесь
			Иначе
				ТекущийРодитель = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ДеревоПроекта, ТекущиеДанные.ПолучитьРодителя());
				ТекущийИндекс = ТекущийРодитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);
				// проверить видимость нового родителя
				ИндексНовогоРодителя = ТекущийИндекс - 1;
				Пока ИндексНовогоРодителя > -1 Цикл
					Если ТекущийРодитель.ПолучитьЭлементы().Получить(ИндексНовогоРодителя).УИД = ТекущиеДанные.Родитель Тогда
						Прервать;
					КонецЕсли;
					ИндексНовогоРодителя = ИндексНовогоРодителя - 1;
				КонецЦикла;
				// Если новый родитель не виден, то добавить его видимость
				Если ИндексНовогоРодителя < 0 Тогда
					НовыйРодитель = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ДеревоПроекта.ПолучитьЭлементы().Вставить(ТекущийИндекс), ТекущиеДанные.ПолучитьРодителя().ПолучитьЭлементы().Вставить(ТекущийИндекс));
					Для Каждого СтрокаНовыйРодитель ИЗ ТаблицаПроектаКопия Цикл
						Если СтрокаНовыйРодитель.УИД = ТекущиеДанные.Родитель Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					ЗаполнитьЗначенияСвойств(НовыйРодитель, СтрокаНовыйРодитель, , стрКолонкиТаблицыИсключение);
					НовыйРодитель.ИндексТаблицы = ТаблицаПроектаКопия.Индекс(СтрокаНовыйРодитель);
					СтрокаНовыйРодитель.Идентификатор = НовыйРодитель.ПолучитьИдентификатор();
				Иначе
					НовыйРодитель = ТекущийРодитель.ПолучитьЭлементы().Получить(ИндексНовогоРодителя);
				КонецЕсли;
				// а потом всё равно переместить 
				ПереместитьУзелДереваПроектаВНовогоРодителя(ТекущиеДанные, НовыйРодитель, ЭтаФорма, МассивВыделенныхСтрок);
			КонецЕсли;

			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
			СообщениеСерверу.Вставить("УИД", СтрокаТаблицы.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "Родитель");
			СообщениеСерверу.Вставить("НовоеЗначение", СтрокаТаблицы.Родитель);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
			
			Если СтрокаТаблицы.Идентификатор >= 0 Тогда
				Элементы.ДеревоПроекта.ТекущаяСтрока = СтрокаТаблицы.Идентификатор;
				Элементы.ДеревоПроекта.Развернуть(СтрокаТаблицы.Идентификатор, Ложь);
			КонецЕсли;
			
			ПосчитатьИтогиПоКолонкам("", СтрокаТаблицы.УИД);
			//ПосчитатьИтогиПроцентовПоКолонкам("", СтрокаТаблицы.УИД);
			ПосчитатьИтогиПроцентовПоКолонкам("", );
			ПосчитатьИтогиВалютыПоКолонкам("", СтрокаТаблицы.УИД);
			ПосчитатьФактическуюДлительностьПоКолонкам("", СтрокаТаблицы.УИД);
		КонецЕсли;
	КонецЦикла;
	Если МассивСообщенийСерверу.Количество() > 0 Тогда
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
		
		ПоказатьКнопкиКоличествоУровней();
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьДиаграммуГанта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоПроектаУменьшитьУровень(Команда)
	Если Элементы.ДеревоПроекта.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Элементы.ДеревоПроекта.ТекущиеДанные = "" Тогда
		Возврат;
	КонецЕсли;
	МассивВыделенныхСтрок = Новый Массив;
	Для Каждого Идентификатор ИЗ Элементы.ДеревоПроекта.ВыделенныеСтроки Цикл
		Уровень = 1;
		ТекущиеДанные = ДеревоПроекта.НайтиПоИдентификатору(Идентификатор);
		Пока НЕ ПустаяСтрока(ТекущиеДанные.Родитель) Цикл
			Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
				Если СтрокаПроекта.УИД = ТекущиеДанные.Родитель Тогда
					ТекущиеДанные = СтрокаПроекта;
					Уровень = Уровень + 1;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		СоответствиеУровень = Новый Структура;
		СоответствиеУровень.Вставить("Идентификатор", Идентификатор);
		СоответствиеУровень.Вставить("Уровень", Уровень);
		Для К = 0 По МассивВыделенныхСтрок.Количество() - 1 Цикл
			Если МассивВыделенныхСтрок.Получить(К).Уровень = Уровень Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		МассивВыделенныхСтрок.Вставить(К, СоответствиеУровень);
	КонецЦикла;
	Для К = 0 По МассивВыделенныхСтрок.Количество() - 1 Цикл
		МассивВыделенныхСтрок.Установить(К, МассивВыделенныхСтрок.Получить(К).Идентификатор);
	КонецЦикла;
	НачалиДействие = Ложь;
	МассивСообщенийСерверу = Новый Массив;
	Пока МассивВыделенныхСтрок.Количество() > 0 Цикл
		ТекущиеДанные = ДеревоПроекта.НайтиПоИдентификатору(МассивВыделенныхСтрок.Получить(0));
		МассивВыделенныхСтрок.Удалить(0);
		УИДТекущийРодитель = ТекущиеДанные.Родитель;
		СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
		Если ПереместитьСтрокуДереваСДРВлево(СтрокаТаблицы, НачалиДействие) Тогда
			Если РежимОтображенияСписок Тогда
				НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
				ТекущийИндекс = НаборЭлементовДерева.Индекс(ТекущиеДанные);
				МассивПодчиненныхУИД = ПолучитьМассивПодчиненныхУИД(ТекущиеДанные.УИД);
				МассивПодчиненныхУИД.Добавить(ТекущиеДанные.УИД);
				МассивСтрокДляСдвига = Новый Массив;
				Пока ТекущийИндекс < НаборЭлементовДерева.Количество() - 1 И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(ТекущийИндекс).УИД) <> Неопределено Цикл
					МассивСтрокДляСдвига.Вставить(0, НаборЭлементовДерева.Получить(ТекущийИндекс));
					ТекущийИндекс = ТекущийИндекс + 1;
				КонецЦикла;
				ИндексСмещения = ТекущийИндекс;
				Пока ИндексСмещения <= НаборЭлементовДерева.Количество() - 1 И НаборЭлементовДерева.Получить(ИндексСмещения).КодСДР < ТекущиеДанные.КодСДР Цикл
					ИндексСмещения = ИндексСмещения + 1;
				КонецЦикла;
				ИндексСмещения = ИндексСмещения - ТекущийИндекс;
				Если ИндексСмещения > 0 Тогда
					Для Каждого СтрокаМассива ИЗ МассивСтрокДляСдвига Цикл
						НаборЭлементовДерева.Сдвинуть(НаборЭлементовДерева.Индекс(СтрокаМассива), ИндексСмещения);
					КонецЦикла;
				КонецЕсли;
			Иначе
				ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
				Если ТекущийРодитель <> Неопределено Тогда
					НовыйРодитель = ТекущийРодитель.ПолучитьРодителя();
					Если НовыйРодитель = Неопределено Тогда
						НовыйРодитель = ДеревоПроекта;
					КонецЕсли;
					ИндексТекущегоРодителя = НовыйРодитель.ПолучитьЭлементы().Индекс(ТекущийРодитель);
					НовыйТекущийУзел = НовыйРодитель.ПолучитьЭлементы().Вставить(ИндексТекущегоРодителя + 1);
					ЗаполнитьЗначенияСвойств(НовыйТекущийУзел, ТекущиеДанные, , стрКолонкиТаблицыИсключение);
					СкопироватьВсеПланыИзСтрокиТаблицыВУзелДерева(НовыйТекущийУзел, СтрокаТаблицы, ЭтаФорма);
					СтрокаТаблицы.Идентификатор = НовыйТекущийУзел.ПолучитьИдентификатор();
					Пока ТекущиеДанные.ПолучитьЭлементы().Количество() > 0 Цикл
						ПереместитьУзелДереваПроектаВНовогоРодителя(ТекущиеДанные.ПолучитьЭлементы().Получить(0), НовыйТекущийУзел, ЭтаФорма, МассивВыделенныхСтрок);
					КонецЦикла;
					ТекущийРодитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
					Элементы.ДеревоПроекта.ТекущаяСтрока = НовыйТекущийУзел.ПолучитьИдентификатор();
					
					СтрокаТекущийРодитель = ТаблицаПроектаКопия.Получить(ТекущийРодитель.ИндексТаблицы);
					ПроверитьСтрокуНаФильтрОбновитьВДереве(СтрокаТекущийРодитель);
				КонецЕсли;
			КонецЕсли;
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
			СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "Родитель");
			СообщениеСерверу.Вставить("НовоеЗначение", СтрокаТаблицы.Родитель);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
			
			ПосчитатьИтогиПоКолонкам("", ?(ПустаяСтрока(УИДТекущийРодитель), Неопределено, УИДТекущийРодитель));
			//ПосчитатьИтогиПроцентовПоКолонкам("", ?(ПустаяСтрока(УИДТекущийРодитель), Неопределено, УИДТекущийРодитель));
			ПосчитатьИтогиПроцентовПоКолонкам("", );
			ПосчитатьИтогиВалютыПоКолонкам("", ?(ПустаяСтрока(УИДТекущийРодитель), Неопределено, УИДТекущийРодитель));
			ПосчитатьФактическуюДлительностьПоКолонкам("", ?(ПустаяСтрока(УИДТекущийРодитель), Неопределено, УИДТекущийРодитель));
		КонецЕсли;
	КонецЦикла;
	Если МассивСообщенийСерверу.Количество() > 0 Тогда
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
		
		Если СтрокаТаблицы.Идентификатор >= 0 Тогда
			Элементы.ДеревоПроекта.ТекущаяСтрока = СтрокаТаблицы.Идентификатор;
			Элементы.ДеревоПроекта.Развернуть(СтрокаТаблицы.Идентификатор, Истина);
		КонецЕсли;
		
		ПоказатьКнопкиКоличествоУровней();
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьДиаграммуГанта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоПроектаДобавить(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если РежимОтображенияСписок Тогда
		Если ТекущиеДанные = Неопределено Тогда
			НовыйЭлемент = ДеревоПроекта.ПолучитьЭлементы().Добавить();
			Если ТаблицаПроектаКопия.Количество() > 0 И ТаблицаПроектаКопия.Получить(0).КодСДР = "0" Тогда
				НовыйЭлемент.Родитель = ТаблицаПроектаКопия.Получить(0).УИД;
			КонецЕсли; 
		Иначе
			НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
			ИндексВставки = НаборЭлементовДерева.Индекс(ТекущиеДанные) + 1;
			МассивПодчиненныхУИД = ПолучитьМассивПодчиненныхУИД(ТекущиеДанные.УИД);
			МассивСтрокДляСдвига = Новый Массив;
			Пока ИндексВставки < НаборЭлементовДерева.Количество() - 1 И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(ИндексВставки).УИД) <> Неопределено Цикл
				ИндексВставки = ИндексВставки + 1;
			КонецЦикла;
			НовыйЭлемент = НаборЭлементовДерева.Вставить(ИндексВставки);
			НовыйЭлемент.Родитель = ТекущиеДанные.Родитель;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			// Если дерево пустое, можем добавить на начальный уровень. Если дерево не пустое, то проверяем, чтобы не было корневого элемента. Добавлять можно только внутрь корневого, если он есть.
			Если ДеревоПроекта.ПолучитьЭлементы().Количество() > 0 И ДеревоПроекта.ПолучитьЭлементы().Получить(0).КодСДР <> "0" ИЛИ ДеревоПроекта.ПолучитьЭлементы().Количество() = 0 Тогда
				НовыйЭлемент = ДеревоПроекта.ПолучитьЭлементы().Добавить();
			Иначе
				НовыйЭлемент = ДеревоПроекта.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы().Добавить();
				НовыйЭлемент.Родитель = ДеревоПроекта.ПолучитьЭлементы().Получить(0).УИД;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				ТекущийРодитель = ДеревоПроекта;
			Иначе
				ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
			КонецЕсли;
			НовыйЭлемент = ТекущийРодитель.ПолучитьЭлементы().Добавить();
			НовыйЭлемент.Родитель = ТекущиеДанные.Родитель;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДеревоПроекта.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
	
	ОчиститьПометкуИзменений(ЭтаФорма);
	НачатьДействие();
	
	ЗаполнитьНачальныеЗначенияСтроки(НовыйЭлемент);
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ДобавлениеЗадачи");
	ОписаниеСобытия.Вставить("ИдентификаторСтроки", НовыйЭлемент.ПолучитьИдентификатор());
	ДобавитьСобытиеДерева(ОписаниеСобытия);
	
	// ((( grznt.Solntsev 29.08.2016
	//ПересчитатьСДРДерева(ДеревоСДР, Истина, ЭтаФорма);
	ПересчитатьСДРДерева(, Истина);
	// ))) grznt.Solntsev 29.08.2016
	
	СтруктураСообщенияНаСервер = Новый Структура;
	СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "ДобавлениеЗадачи");
	СтруктураДанныхЗадачи = Новый Структура("УИД, ДатаНачала, ДатаОкончания, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель, ТипОграничения, ДатаОграничения");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхЗадачи, НовыйЭлемент);
	СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
	
	МассивИзменений = Новый Массив;
	ИдентификаторФормы = ЭтаФорма.УникальныйИдентификатор;
	//АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтруктураСообщенияНаСервер, МассивИзменений);
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ИдентификаторФормы, СтруктураСообщенияНаСервер, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоПроектаСкопировать(Команда)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ТекущиеДанныеДерева.КодСДР = "0" Тогда
		ПоказатьПредупреждение(, "Нельзя копировать корневой элемент проекта!");
		//Предупреждение("Нельзя копировать корневой элемент проекта!");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	ТекущиеДанныеСДР = ДеревоСДР.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСДР);
		
	Если ТекущиеДанныеСДР.ПолучитьЭлементы().Количество() > 0 Тогда
		Описание = Новый ОписаниеОповещения("КомандаДеревоПроектаСкопироватьПродолжение", ЭтаФорма);
		ПоказатьВопрос(Описание, "Скопировать подчиненные элементы вместе с текущим?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		КомандаДеревоПроектаСкопироватьПродолжение(КодВозвратаДиалога.Да, );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоПроектаСкопироватьПродолжение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение = КодВозвратаДиалога.Отмена ИЛИ ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	
	ОчиститьПометкуИзменений(ЭтаФорма);
	НачатьДействие();
	
	Если РежимОтображенияСписок Тогда
		НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
		ИндексВставки = НаборЭлементовДерева.Индекс(ТекущиеДанные) + 1;
		МассивПодчиненныхУИД = ПолучитьМассивПодчиненныхУИД(ТекущиеДанные.УИД);
		МассивСтрокДляСдвига = Новый Массив;
		Пока ИндексВставки < НаборЭлементовДерева.Количество() - 1 И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(ИндексВставки).УИД) <> Неопределено Цикл
			ИндексВставки = ИндексВставки + 1;
		КонецЦикла;
		НовыйЭлемент = НаборЭлементовДерева.Вставить(ИндексВставки);
		НовыйЭлемент.Родитель = ТекущиеДанные.Родитель;
	Иначе
		ТекущийРодитель = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ДеревоПроекта, ТекущиеДанные.ПолучитьРодителя());
		НовыйЭлемент = ТекущийРодитель.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ТекущиеДанные, , стрКолонкиТаблицыИсключение + ", НадписьПоследователи, НадписьПоследователиПоНомеруСтроки, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение, КонтрактныйДатаОкончанияОтклонение, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончания, КонтрактныйДатаНачала");
	
	НовыйЭлемент.Задача = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	НовыйЭлемент.УИД = СокрЛП(Новый УникальныйИдентификатор);
	НовыйЭлемент.ИндексТаблицы = -1;
	Если ВыбранноеЗначение = КодВозвратаДиалога.Нет Тогда
		НовыйЭлемент.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача");
	КонецЕсли;
	
	МассивСообщенийСерверу = Новый Массив;
	
	СтруктураСообщенияНаСервер = Новый Структура;
	СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "ДобавлениеЗадачи");
	СтруктураДанныхЗадачи = Новый Структура("УИД, ДатаНачала, ДатаОкончания, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель, ТипОграничения, ДатаОграничения");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхЗадачи, НовыйЭлемент);
	СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
	МассивСообщенийСерверу.Добавить(СтруктураСообщенияНаСервер);
	
	Если НовыйЭлемент.ФактическаяДатаНачала <> Дата(1,1,1) ИЛИ НовыйЭлемент.ФактическаяДатаОкончания <> Дата(1,1,1) Тогда
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", НовыйЭлемент.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", Истина);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", НовыйЭлемент.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
		СообщениеСерверу.Вставить("НовоеЗначение", НовыйЭлемент.ФактическаяДатаНачала);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", НовыйЭлемент.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаОкончания");
		СообщениеСерверу.Вставить("НовоеЗначение", НовыйЭлемент.ФактическаяДатаОкончания);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ДобавлениеЗадачи");
	ОписаниеСобытия.Вставить("ИдентификаторСтроки", НовыйЭлемент.ПолучитьИдентификатор());
	ДобавитьСобытиеДерева(ОписаниеСобытия);
	
	СтараяСтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	НоваяСтрокаТаблицы = ТаблицаПроектаКопия.Получить(НовыйЭлемент.ИндексТаблицы);
	СкопироватьПлановыеДанные(СтараяСтрокаТаблицы, НоваяСтрокаТаблицы, Ложь, МассивСообщенийСерверу);
	
	Если ВыбранноеЗначение = КодВозвратаДиалога.Да Тогда
		СкопироватьПодчиненныеУзлыПроекта(ТекущиеДанные.УИД, НовыйЭлемент, МассивСообщенийСерверу);
		Элементы.ДеревоПроекта.Развернуть(НовыйЭлемент.ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
	//ПересчитатьСДРДерева(ДеревоСДР, Истина, ЭтаФорма);
	ПересчитатьСДРДерева(, Истина);
	
	Элементы.ДеревоПроекта.ТекущаяСтрока = НовыйЭлемент.ПолучитьИдентификатор();
	
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
	
	ПосчитатьИтогиПоКолонкам("", НовыйЭлемент.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("", НовыйЭлемент.УИД);
	//ПосчитатьИтогиПроцентовПоКолонкам("", НовыйЭлемент.УИД);
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	ПосчитатьФактическуюДлительностьПоКолонкам("", НовыйЭлемент.УИД);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДереваПроектаУдалить(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачатьДействие();
	
	МассивСообщенийСерверу = Новый Массив;
	
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	ДобавитьСобытиеУдалениеЗадачиИзТаблицы(СтрокаТаблицы, МассивСообщенийСерверу);
	
	СтруктураСообщенияНаСервер = Новый Структура;
	СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "УдалениеЗадачи");
	СтруктураДанныхЗадачи = Новый Структура("УИД", ТекущиеДанные.УИД);
	СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
	
	МассивСообщенийСерверу.Добавить(СтруктураСообщенияНаСервер);
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ТекущийРодитель = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ДеревоПроекта, ТекущиеДанные.ПолучитьРодителя());
	ТекущийРодитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	
	Если ТекущийРодитель <> ДеревоПроекта И ТекущийРодитель.ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаПроектаРодитель = ТаблицаПроектаКопия.Получить(ТекущийРодитель.ИндексТаблицы);
		Если СтрокаПроектаРодитель.Длительность = 0 Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха"));
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача"));
		КонецЕсли;
		Элементы.ДеревоПроекта.ТекущаяСтрока = ТекущийРодитель.ПолучитьИдентификатор();
	КонецЕсли;
	
	ПересчитатьСДРДерева(ДеревоСДР, Истина);
	
	ЭтаФорма.Модифицированность = Истина;
	
	ПоказатьКнопкиКоличествоУровней();
	ПосчитатьИтогиПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, Неопределено, ТекущийРодитель.УИД));
	ПосчитатьИтогиВалютыПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, Неопределено, ТекущийРодитель.УИД));
	//ПосчитатьИтогиПроцентовПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, Неопределено, ТекущийРодитель.УИД));
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	ПосчитатьФактическуюДлительностьПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, Неопределено, ТекущийРодитель.УИД));
КонецПроцедуры

&НаКлиенте
Процедура КомандаДереваПроектаУдалитьВыделенные(Команда)
	Если Элементы.ДеревоПроекта.ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("КомандаДереваПроектаУдалитьВыделенныеПродолжение", ЭтаФорма);
	ПоказатьВопрос(Описание, "Удалить все выбранные строки проекта?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДереваПроектаУдалитьВыделенныеПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	МассивСообщенийСерверу = Новый Массив;
	
	МассивВыделенныеСтроки = Новый Массив;
	Для Каждого ВыделеннаяСтрока ИЗ Элементы.ДеревоПроекта.ВыделенныеСтроки Цикл
		МассивВыделенныеСтроки.Добавить(ВыделеннаяСтрока);
	КонецЦикла;
	Для Каждого ВыделеннаяСтрока ИЗ МассивВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаПроектаКопия.Получить(СтрокаДерева.ИндексТаблицы);
		ДобавитьСобытиеУдалениеЗадачиИзТаблицы(СтрокаТаблицы, МассивСообщенийСерверу);
	
		СтруктураСообщенияНаСервер = Новый Структура;
		СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "УдалениеЗадачи");
		СтруктураДанныхЗадачи = Новый Структура("УИД", СтрокаДерева.УИД);
		СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
		МассивСообщенийСерверу.Добавить(СтруктураСообщенияНаСервер);
		
		ТекущийРодитель = ?(СтрокаДерева.ПолучитьРодителя() = Неопределено, ДеревоПроекта, СтрокаДерева.ПолучитьРодителя());
		ТекущийРодитель.ПолучитьЭлементы().Удалить(СтрокаДерева);
		
		Если ТекущийРодитель <> ДеревоПроекта И ТекущийРодитель.ПолучитьЭлементы().Количество() = 0 Тогда
			СтрокаПроектаРодитель = ТаблицаПроектаКопия.Получить(ТекущийРодитель.ИндексТаблицы);
			Если СтрокаПроектаРодитель.Длительность = 0 Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха"));
			Иначе
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача"));
			КонецЕсли;
			Элементы.ДеревоПроекта.ТекущаяСтрока = ТекущийРодитель.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	//ПересчитатьСДРДерева(ДеревоСДР, Истина, ЭтаФорма);
	ПересчитатьСДРДерева(ДеревоСДР, Истина);
	
	ЭтаФорма.Модифицированность = Истина;
	
	ПоказатьКнопкиКоличествоУровней();
	
	ПосчитатьИтогиПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, "", ТекущийРодитель.УИД));
	ПосчитатьИтогиВалютыПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, "", ТекущийРодитель.УИД));
	//ПосчитатьИтогиПроцентовПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, "", ТекущийРодитель.УИД));
	ПосчитатьИтогиПроцентовПоКолонкам("", );
КонецПроцедуры

&НаКлиенте
Процедура КомандаДереваПроектаРедактировать(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметров = ПодготовитьСтруктуруПараметровДляОткрытияФормыРедактированияЗадачиНаКлиенте(ТекущиеДанные.УИД, ТекущиеДанные.Родитель);
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДереваОтобразитьЗадачуВДругойВерсии(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.грзнтЭкземплярыВерсийПланаПроекта.ФормаВыбора", Новый Структура("Проект", Проект), ЭтаФорма,,,,Новый ОписаниеОповещения("ВыборЭкземпляраПланаПроектаДляОтраженияПродолжение", ЭтаФорма, Новый Структура("УИД", ТекущиеДанные.УИД)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ВыборЭкземпляраПланаПроектаДляОтраженияПродолжение(РезультатЗакрытия, ДополнительныйПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) <> Тип("СправочникСсылка.грзнтЭкземплярыВерсийПланаПроекта") ИЛИ НЕ ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ПереноситьЗадачуВместеСРодителями", Истина);
	ДополнительныеПараметры.Вставить("ПереноситьСрокиИДлительность", Ложь);
	ДополнительныеПараметры.Вставить("ПереноситьДДС", Ложь);
	ДополнительныеПараметры.Вставить("ПереноситьДоходы", Ложь);
	ДополнительныеПараметры.Вставить("ПереноситьРасходы", Ложь);
	ДополнительныеПараметры.Вставить("ПереноситьТрудозатратыПоРолям", Ложь);
	ДополнительныеПараметры.Вставить("ПереноситьТрудозатратыПоРесурсам", Ложь);
	ДополнительныеПараметры.Вставить("ПереноситьМатериалы", Ложь);
	
	ТекстСообщения = ВыполнитьОтражениеЗадачиВЭкземпляреВерсииНаСервере(РезультатЗакрытия, ДополнительныйПараметры.УИД, ДополнительныеПараметры);
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ПоказатьПредупреждение(, ТекстСообщения);
		//Предупреждение(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДеревоПроектаПереместитьЭлемент(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПодготовитьСтруктуруПараметровДляОткрытияФормыВыбораЗадачиНаКлиенте(ТекущиеДанные.УИД, ТекущиеДанные.Родитель);
	СтруктураПараметров.Вставить("ОперацияВыбора", "ВыборРодителя");
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КомандаДереваЗаполнитьДаннымиПоЗадаче(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметров = ПодготовитьСтруктуруПараметровДляОткрытияФормыВыбораЗадачиНаКлиенте(ТекущиеДанные.УИД, ТекущиеДанные.Родитель);
	СтруктураПараметров.Вставить("ОперацияВыбора", "ВыборЗадачиИсточникаЗаполнения");
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвязатьВыделенныеЗадачи(Команда)
	Если Элементы.ДеревоПроекта.ВыделенныеСтроки.Количество() > 1 Тогда
		// Сейчас массив содержит идентификаторы в порядке выделения мышкой. Если необходимо изменить порядок, менять нужно здесь
		СписокЗадач = Новый СписокЗначений;
		СписокЗадач.ЗагрузитьЗначения(Элементы.ДеревоПроекта.ВыделенныеСтроки);
		Описание = Новый ОписаниеОповещения("КомандаСвязатьВыделенныеЗадачиПродолжение", ЭтаФорма, Новый Структура("МассивСтрок", СписокЗадач.ВыгрузитьЗначения()));
		ПоказатьВопрос(Описание, "Все выделенные задачи будут связаны последовательно связями Окончание-Начало. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСвязатьВыделенныеЗадачиПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	МассивПредшественники = Новый Массив;
	Для К = 1 ПО ДополнительныеПараметры.МассивСтрок.Количество() - 1 Цикл
		
		СтрокаПредшественник = ДеревоПроекта.НайтиПоИдентификатору(Элементы.ДеревоПроекта.ВыделенныеСтроки.Получить(К-1));
		СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(Элементы.ДеревоПроекта.ВыделенныеСтроки.Получить(К));
		
		СтруктураПредшественник = Новый Структура;
		СтруктураПредшественник.Вставить("УИД", СтрокаДерева.УИД);
		СтруктураПредшественник.Вставить("ПредшественникУИД", СтрокаПредшественник.УИД);
		СтруктураПредшественник.Вставить("ПредшественникНаименование", СтрокаПредшественник.НаименованиеЗадачи);
		СтруктураПредшественник.Вставить("ПредшественникКодСДР", СтрокаПредшественник.КодСДР);
		СтруктураПредшественник.Вставить("ПредшественникНомерСтрокиПроекта", СтрокаПредшественник.НомерСтрокиПроекта);
		СтруктураПредшественник.Вставить("Задержка", 0);
		СтруктураПредшественник.Вставить("ЕдиницаВремени", ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень"));
		СтруктураПредшественник.Вставить("ТипСвязи", ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало"));
		
		МассивПредшественники.Добавить(СтруктураПредшественник);
	КонецЦикла;
	
	// Проверим, можно ли вообще задать таких предшественников
	Если МассивПредшественники.Количество() > 0 Тогда
		МассивТекущие = Новый Массив;
		//Для Каждого СтрокаПредшественник ИЗ СтрокаДерева.ТаблицаПредшественники Цикл
		//	МассивТекущие.Добавить(Новый Структура("УИД, ПредшественникУИД", СтрокаДерева.УИД, СтрокаПредшественник.ПредшественникУИД));
		//КонецЦикла;
		
		РезультатПроверки = Неопределено;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПроверитьВозможностьЗаменыПредшественников(АдресВременногоХранилищаДанныхНаСервере, УникальныйИдентификатор, МассивТекущие, МассивПредшественники, РезультатПроверки);
		Если РезультатПроверки <> Неопределено Тогда
			СтрокаПроекта = тСоответствиеТаблицыУИД.Получить(РезультатПроверки.УИД);
			СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(РезультатПроверки.ПредшественникУИД);
			//СтрокаСообщения = "Строка №" + Формат(СтрокаПроекта.НомерСтрокиПроекта, "ЧН=") + ?(СтрокаПредшественник = Неопределено, "", " предшественник №" + СтрокаПредшественник.НомерСтрокиПроекта) + Символы.ПС
			СтрокаСообщения = "Строка №" + Формат(СтрокаПроекта.НомерСтрокиПроекта, "ЧН=") + ?(СтрокаПредшественник = Неопределено, "", " предшественник №" + СтрокаПредшественник.НомерСтрокиПроекта) + Символы.ПС
				+ РезультатПроверки.Сообщение + " Выберите других предшественников!";
			
			ПоказатьПредупреждение(, СтрокаСообщения, , "Ошибка выбора предшественника");
			//ПолеПредшественники = ТекущиеДанныеДерева.НадписьПредшественникиПоНомеруСтроки;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокСообщенийСерверу.Очистить();
	СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
	НачатьДействие();
	
	// добавим новых предшественников / изменим текущих
	Для Каждого СтруктураПредшественник ИЗ МассивПредшественники Цикл
		СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СтруктураПредшественник.УИД);
		СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
		
		БылиИзменения = Ложь;
		Нашли = Ложь;
		Для Каждого СтрокаПредшественник ИЗ СтрокаДерева.ТаблицаПредшественники Цикл
			Если СтрокаПредшественник.ПредшественникУИД = СтруктураПредшественник.ПредшественникУИД Тогда
				Нашли = Истина;
				Прервать
			КонецЕсли;
		КонецЦикла;
		Если Нашли Тогда
			// Изменим текущего предшественника, если нужно
			Если СтрокаПредшественник.ТипСвязи <> СтруктураПредшественник.ТипСвязи Тогда//ИЛИ СтрокаПредшественник.Задержка <> СтруктураПредшественник.Задержка Тогда
				
				ОписаниеСобытия = Новый Структура;
				ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
				ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
				ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
				
				ОписаниеСобытия.Вставить("СобытиеПлана", "ИзменениеРеквизита");
				ОписаниеСобытия.Вставить("Реквизит", "ТипСвязи");
				ОписаниеСобытия.Вставить("СтароеЗначение", СтрокаПредшественник.ТипСвязи);
				ОписаниеСобытия.Вставить("ГУИД", СтрокаПредшественник.ГУИД);
				ДобавитьСобытиеТаблицы(ОписаниеСобытия);
				
				СтрокаПредшественник.ТипСвязи = СтруктураПредшественник.ТипСвязи;
				
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("ИмяСобытия", "ИзменитьПараметрыПредшественника");
				СообщениеСерверу.Вставить("УИД", СтрокаТаблицыПроекта.УИД);
				ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи", СтрокаДерева.УИД);
				ЗаполнитьЗначенияСвойств(ДанныеЗадачи, СтрокаПредшественник);
				СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
				СписокСообщенийСерверу.Добавить(СообщениеСерверу);
				
				БылиИзменения = Истина;
				
			КонецЕсли;
		Иначе
			// Добавим предшественника в узел дерева
			СтрокаПредшественник = СтрокаДерева.ТаблицаПредшественники.Добавить();
			СтрокаПредшественник.НаименованиеЗадачи = СтруктураПредшественник.ПредшественникНаименование;
			СтрокаПредшественник.Внешний = Ложь;
			СтрокаПредшественник.ТипСвязи = СтруктураПредшественник.ТипСвязи;
			СтрокаПредшественник.ПредшественникУИД = СтруктураПредшественник.ПредшественникУИД;
			СтрокаПредшественник.Задержка = СтруктураПредшественник.Задержка;
			СтрокаПредшественник.ЕдиницаВремени = СтруктураПредшественник.ЕдиницаВремени;
			СтрокаПредшественник.КодСДР = СтруктураПредшественник.ПредшественникКодСДР;
			СтрокаПредшественник.НомерСтрокиПроекта = СтруктураПредшественник.ПредшественникНомерСтрокиПроекта;
			СтрокаПредшественник.ГУИД = Строка(Новый УникальныйИдентификатор);
			
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
			ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
			ОписаниеСобытия.Вставить("ГУИД", СтрокаПредшественник.ГУИД);
			ДобавитьСобытиеТаблицы(ОписаниеСобытия);
			
			СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СтрокаПредшественник.ПредшественникУИД);
			
			// Добавить сообщение на сервере
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "ДобавитьПредшественника");
			СообщениеСерверу.Вставить("УИД", СтрокаТаблицыПроекта.УИД);
			ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи");
			ЗаполнитьЗначенияСвойств(ДанныеЗадачи, СтруктураПредшественник);
			СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
			СписокСообщенийСерверу.Добавить(СообщениеСерверу);
			
			БылиИзменения = Истина;
		КонецЕсли;
		
		
		Если БылиИзменения Тогда
			//ОписаниеСобытия = Новый Структура;
			//ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			//ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
			//ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
			//ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
			
			СтрокаТаблицыПроекта.ТаблицаПредшественники.Очистить();
			Для Каждого СтрокаПлан ИЗ СтрокаДерева.ТаблицаПредшественники Цикл
				НоваяСтрокаПлан = СтрокаТаблицыПроекта.ТаблицаПредшественники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
			КонецЦикла;
			
			ТаблицаПредшественникиСинхронизироватьСоответствия(СтрокаТаблицыПроекта);
			
			СтруктураНадписей = СформироватьНадписьПредшественники(СтрокаТаблицыПроекта);
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественники", СтруктураНадписей.Надпись);
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписей.НадписьПоНомеруСтроки);
			Для Каждого ЭлементСпискаПредшественник ИЗ СписокУИДПредшественикиДляПересчетаПоследователи Цикл
				СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(ЭлементСпискаПредшественник.Значение);
				Если СтрокаПредшественник = Неопределено ИЛИ СтрокаПредшественник.Внешний Тогда
					Продолжить;
				КонецЕсли;
				СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаПредшественник);
				СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПредшественник, "НадписьПоследователи", СтруктураНадписи.Надпись);
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПредшественник, "НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.НадписьПоНомеруСтроки);
			КонецЦикла;
			СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
		КонецЕсли;
	КонецЦикла;
	
	Если СписокСообщенийСерверу.Количество() > 0 Тогда
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СписокСообщенийСерверу.ВыгрузитьЗначения(), МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	СписокСообщенийСерверу.Очистить();

	ПолеПредшественники = Элементы.ДеревоПроекта.ТекущиеДанные.НадписьПредшественникиПоНомеруСтроки;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьСвязиВыделенныхЗадач(Команда)
	Если Элементы.ДеревоПроекта.ВыделенныеСтроки.Количество() > 0 Тогда
		СписокЗадач = Новый СписокЗначений;
		СписокЗадач.ЗагрузитьЗначения(Элементы.ДеревоПроекта.ВыделенныеСтроки);
		Описание = Новый ОписаниеОповещения("КомандаОчиститьСвязиВыделенныхЗадачПродолжение", ЭтаФорма, Новый Структура("МассивСтрок", СписокЗадач.ВыгрузитьЗначения()));
		ПоказатьВопрос(Описание, "Все предшественники всех выделенных задач будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьСвязиВыделенныхЗадачПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СписокСообщенийСерверу.Очистить();
	НачатьДействие();
	
	Для Каждого ИдентификаторСтроки ИЗ ДополнительныеПараметры.МассивСтрок Цикл
		СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(СтрокаДерева.ИндексТаблицы);
		
		Для Каждого СтрокаПлана ИЗ СтрокаДерева.ТаблицаПредшественники Цикл
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
			СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", СтрокаДерева.УИД, СтрокаПлана.ПредшественникУИД));
			СписокСообщенийСерверу.Добавить(СообщениеСерверу);
			
			МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПлана.ПредшественникУИД);
			Если МассивПредшественники = Неопределено Тогда
				МассивПредшественники = Новый Массив;
			КонецЕсли;
			К = 0;
			Пока К < МассивПредшественники.Количество() Цикл
				ЭлементМассива = МассивПредшественники.Получить(К);
				Если ЭлементМассива.УИД = СтрокаДерева.УИД Тогда
					МассивПредшественники.Удалить(К);
					Продолжить;
				КонецЕсли;
				К = К + 1;
			КонецЦикла;
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПлана.ПредшественникУИД, МассивПредшественники);
			
			Если СписокУИДПредшественикиДляПересчетаПоследователи.НайтиПоЗначению(СтрокаПлана.ПредшественникУИД) = Неопределено Тогда
				СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СтрокаПлана.ПредшественникУИД);
			КонецЕсли;
			
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
			ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
			ОписаниеСобытия.Вставить("ГУИД", СтрокаПлана.ГУИД);
			СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланПредшественники));
			ЗаполнитьЗначенияСвойств(СтруктураПлана, СтрокаПлана);
			ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
			ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		КонецЦикла;
		
		МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаДерева.УИД);
		Если МассивПредшественники = Неопределено Тогда
			МассивПредшественники = Новый Массив;
		КонецЕсли;
		Пока МассивПредшественники.Количество() > 0 Цикл
			ТаблицаПредшественники.Удалить(МассивПредшественники.Получить(0));
			МассивПредшественники.Удалить(0);
		КонецЦикла;
		тСоответствиеПредшественникиУИД.Вставить(СтрокаДерева.УИД, МассивПредшественники);
		
		СтрокаДерева.ТаблицаПредшественники.Очистить();
		СтрокаТаблицыПроекта.ТаблицаПредшественники.Очистить();
		
		
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "КартинкаПредшественники", 0);
		СтруктураНадписи = СформироватьНадписьПредшественники(СтрокаТаблицыПроекта);
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественники", СтруктураНадписи.Надпись);
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписи.НадписьПоНомеруСтроки);
	КонецЦикла;
	
	Для Каждого ЭлементСпискаПредшественник ИЗ СписокУИДПредшественикиДляПересчетаПоследователи Цикл
		СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(ЭлементСпискаПредшественник.Значение);
		Если СтрокаПредшественник = Неопределено ИЛИ СтрокаПредшественник.Внешний Тогда
			Продолжить;
		КонецЕсли;
		СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаПредшественник);
		СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
		ОписаниеСобытия.Вставить("УИД", СтрокаПредшественник.УИД);
		ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЦикла;
	СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
	
	Если Элементы.ДеревоПроекта.ТекущиеДанные <> Неопределено Тогда
		ПолеПредшественники = Элементы.ДеревоПроекта.ТекущиеДанные.НадписьПредшественникиПоНомеруСтроки;
	КонецЕсли;
	МассивВозврата = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СписокСообщенийСерверу.ВыгрузитьЗначения(), МассивВозврата, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
	СписокСообщенийСерверу.Очистить();
КонецПроцедуры

#КонецОбласти

#Область СобытияДереваПроекта

&НаКлиенте
Процедура ДеревоПроектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле <> Элементы.ДеревоПроектаДатаНачала И Поле <> Элементы.ДеревоПроектаДатаОкончания И Поле <> Элементы.ДеревоПроектаДлительность
		И Поле <> Элементы.ДеревоПроектаЕдиницаВремени И Поле <> Элементы.ДеревоПроектаКалендарь И Поле <> Элементы.ДеревоПроектаНаименованиеЗадачи
		И Поле <> Элементы.ДеревоПроектаРучнойВвод Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
		СтруктураПараметров = ПодготовитьСтруктуруПараметровДляОткрытияФормыРедактированияЗадачиНаКлиенте(ТекущиеДанные.УИД, ТекущиеДанные.Родитель);
		ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ДиаграммаГантаОтображатьДиаграмму Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			Точка = ДиаграммаГанта.УстановитьТочку(ТекущиеДанные.УИД);
		КонецЕсли;
	КонецЕсли;
	Если ПанельЗадачОтображатьПанель Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			ЭтоГруппаЗадач = ТекущиеДанные.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
			ЭтоВеха = ТекущиеДанные.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха");
			ТолькоПросмотр56 = ЭтоГруппаЗадач;
			Если Элементы.ДеревоПроектаВидЭлементаПанельЗадач.ТолькоПросмотр <> ТолькоПросмотр56 Тогда
				Элементы.ДеревоПроектаВидЭлементаПанельЗадач.ТолькоПросмотр = ТолькоПросмотр56;
			КонецЕсли;
			ТолькоПросмотр56 = ЭтоВеха;
			Если Элементы.ДеревоПроектаПроцентГотовностиПанельЗадач.ТолькоПросмотр <> ТолькоПросмотр56 Тогда
				Элементы.ДеревоПроектаПроцентГотовностиПанельЗадач.ТолькоПросмотр = ТолькоПросмотр56;
			КонецЕсли;
			ТолькоПросмотр56 = ЭтоГруппаЗадач;
			Если Элементы.ДеревоПроектаФактическаяДатаНачалаПанельЗадач.ТолькоПросмотр <> ТолькоПросмотр56 Тогда
				Элементы.ДеревоПроектаФактическаяДатаНачалаПанельЗадач.ТолькоПросмотр = ТолькоПросмотр56;
			КонецЕсли;
			ТолькоПросмотр56 = ЭтоВеха ИЛИ ЭтоГруппаЗадач;
			Если Элементы.ДеревоПроектаФактическаяДатаОкончанияПанельЗадач.ТолькоПросмотр <> ТолькоПросмотр56 Тогда
				Элементы.ДеревоПроектаФактическаяДатаОкончанияПанельЗадач.ТолькоПросмотр = ТолькоПросмотр56;
			КонецЕсли;
			
			бФлагПроцентГотовности = ТекущиеДанные.ПроцентГотовности = 100;
			Если ПустаяСтрока(ТекущиеДанные.Родитель) Тогда
				НаименованиеРодителя = "";
			Иначе
				Для Каждого СтрокаРодитель ИЗ ТаблицаПроектаКопия ЦИкл
					Если СтрокаРодитель.УИД = ТекущиеДанные.Родитель Тогда
						НаименованиеРодителя = СтрокаРодитель.НаименованиеЗадачи;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			ПолеПредшественники = ТекущиеДанные.НадписьПредшественникиПоНомеруСтроки;
		Иначе
			НаименованиеРодителя = "";
			ПолеПредшественники = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПриАктивизацииЯчейки(Элемент)
	Если ПанельЗадачОтображатьПанель Тогда
		ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Элементы.ГруппаПанельЗадачи.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ГруппаПанельЗадачи.ТолькоПросмотр = Ложь;
			
			Если Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьПредшественники ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьПредшественникиПоНомеруСтроки
				ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьПоследователи ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьПоследователиПоНомеруСтроки Тогда
				Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПредшественники;
			ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаВыплата ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаПоступление
				ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаВалютаПоступлений ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаВалютаВыплат 
				ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаВыплатаУпр ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаПоступлениеУпр Тогда
				Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланДДС;
			ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаДоход ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаДоходУпр
				ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаВалютаДоходов Тогда
				Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланДоходов;
			ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРасход ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРасходУпр
				ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаВалютаРасходов Тогда
				Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланРасходов;
			ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРоли ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаКоличествоРоли
				ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьРоли Тогда
				Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланРолей;
			ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРесурсы ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаКоличествоРесурсы
				ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьРесурсы Тогда
				Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланТрудовыхРесурсов;
			ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРесурсыОперативный ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаКоличествоРесурсыОперативный
				ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьРесурсыОперативный Тогда
				Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланОперативный;
			ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаМатериалы Тогда
				Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланМатериалов;
			Иначе
				//Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаОсновныеДанные;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда 
		ДеревоПроектаПередНачаломДобавленияПродолжение(КодВозвратаДиалога.Да, Новый Структура("Копирование", Ложь));
	Иначе 
		Описание = Новый ОписаниеОповещения("ДеревоПроектаПередНачаломДобавленияПродолжение", ЭтаФорма, Новый Структура("Копирование", Копирование));
		ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
		ТекущиеДанныеСДР = ДеревоСДР.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторСДР);
		Если Копирование И ТекущиеДанныеСДР.ПолучитьЭлементы().Количество() > 0 Тогда
			ПоказатьВопрос(Описание, "Скопировать подчиненные элементы вместе с текущим?", РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ДеревоПроектаПередНачаломДобавленияПродолжение(КодВозвратаДиалога.Да, Новый Структура("Копирование", Копирование));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПередНачаломДобавленияПродолжение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Копирование = ДополнительныеПараметры.Копирование;
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если РежимОтображенияСписок Тогда
		Если ТекущиеДанные = Неопределено Тогда
			НоваяСтрока = ДеревоПроекта.ПолучитьЭлементы().Добавить();
			Если ТаблицаПроектаКопия.Количество() > 0 И ТаблицаПроектаКопия.Получить(0).КодСДР = "0" Тогда
				НоваяСтрока.Родитель = ТаблицаПроектаКопия.Получить(0).УИД;
			КонецЕсли; 
		Иначе
			НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
			ИндексВставки = НаборЭлементовДерева.Индекс(ТекущиеДанные) + 1;
			МассивПодчиненныхУИД = ПолучитьМассивПодчиненныхУИД(ТекущиеДанные.УИД);
			МассивСтрокДляСдвига = Новый Массив;
			Пока ИндексВставки < НаборЭлементовДерева.Количество() - 1 И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(ИндексВставки).УИД) <> Неопределено Цикл
				ИндексВставки = ИндексВставки + 1;
			КонецЦикла;
			НоваяСтрока = НаборЭлементовДерева.Вставить(ИндексВставки);
			НоваяСтрока.Родитель = ТекущиеДанные.Родитель;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные = Неопределено ИЛИ ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
			// Если дерево пустое, можем добавить на начальный уровень. Если дерево не пустое, то проверяем, чтобы не было корневого элемента. Добавлять можно только внутрь корневого, если он есть.
			Если (ДеревоПроекта.ПолучитьЭлементы().Количество() > 0 И ДеревоПроекта.ПолучитьЭлементы().Получить(0).КодСДР <> "0") ИЛИ ДеревоПроекта.ПолучитьЭлементы().Количество() = 0 Тогда
				НоваяСтрока = ДеревоПроекта.ПолучитьЭлементы().Добавить();
			Иначе
				НоваяСтрока = ДеревоПроекта.ПолучитьЭлементы().Получить(0).ПолучитьЭлементы().Добавить();
				НоваяСтрока.Родитель = ДеревоПроекта.ПолучитьЭлементы().Получить(0).УИД;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.ПолучитьРодителя() = Неопределено Тогда
				ТекущийРодитель = ДеревоПроекта;
			Иначе
				ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
			КонецЕсли;
			НоваяСтрока = ТекущийРодитель.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Родитель = ТекущиеДанные.Родитель;
		КонецЕсли;
	КонецЕсли;
	Элементы.ДеревоПроекта.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	НачатьДействие();
	
	МассивСообщенийСерверу = Новый Массив;
	
	Если НЕ Копирование Тогда
		ЗаполнитьНачальныеЗначенияСтроки(НоваяСтрока);
	ИначеЕсли Копирование Тогда 
		СтарыйУИД = ТекущиеДанные.УИД;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущиеДанные, , стрКолонкиТаблицыИсключение);
		НоваяСтрока.Задача = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
		НоваяСтрока.УИД = СокрЛП(Новый УникальныйИдентификатор);
		Новаястрока.ИндексТаблицы = -1;
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ДобавлениеЗадачи");
	ОписаниеСобытия.Вставить("ИдентификаторСтроки", НоваяСтрока.ПолучитьИдентификатор());
	ДобавитьСобытиеДерева(ОписаниеСобытия);
	
	СтараяСтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	НоваяСтрокаТаблицы = ТаблицаПроектаКопия.Получить(НоваяСтрока.ИндексТаблицы);
		
	СтруктураСообщенияНаСервер = Новый Структура;
	СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "ДобавлениеЗадачи");
	СтруктураДанныхЗадачи = Новый Структура("Идентификатор, УИД, ДатаНачала, ДатаОкончания, РучнойВвод, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель, ТипОграничения, ДатаОграничения");
	ЗаполнитьЗначенияСвойств(СтруктураДанныхЗадачи, НоваяСтрока);
	СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
	МассивСообщенийСерверу.Вставить(0, СтруктураСообщенияНаСервер);
	
	Если НоваяСтрока.ФактическаяДатаНачала <> Дата(1,1,1) ИЛИ НоваяСтрока.ФактическаяДатаОкончания <> Дата(1,1,1) Тогда
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", НоваяСтрока.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", Истина);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", НоваяСтрока.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
		СообщениеСерверу.Вставить("НовоеЗначение", НоваяСтрока.ФактическаяДатаНачала);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", НоваяСтрока.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаОкончания");
		СообщениеСерверу.Вставить("НовоеЗначение", НоваяСтрока.ФактическаяДатаОкончания);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Копирование И ВыбранноеЗначение = КодВозвратаДиалога.Да Тогда
		СкопироватьПодчиненныеУзлыПроекта(ТекущиеДанные.УИД, НоваяСтрока, МассивСообщенийСерверу);
		Элементы.ДеревоПроекта.Развернуть(НоваяСтрока.ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
	Если Копирование Тогда
		СкопироватьПлановыеДанные(СтараяСтрокаТаблицы, НоваяСтрокаТаблицы, Ложь, МассивСообщенийСерверу);
	КонецЕсли;
	
	ПересчитатьСДРДерева(ДеревоСДР, Истина);
	
	Элементы.ДеревоПроекта.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
	
	ПоказатьКнопкиКоличествоУровней();
	ПосчитатьИтогиПоКолонкам("", НоваяСтрока.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("", НоваяСтрока.УИД);
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	ПосчитатьФактическуюДлительностьПоКолонкам("", НоваяСтрока.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачатьДействие();
	
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	
	МассивСообщенийСерверу = Новый Массив;
	
	ДобавитьСобытиеУдалениеЗадачиИзТаблицы(СтрокаТаблицы, МассивСообщенийСерверу);
	
	СтруктураСообщенияНаСервер = Новый Структура;
	СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "УдалениеЗадачи");
	СтруктураДанныхЗадачи = Новый Структура("УИД", ТекущиеДанные.УИД);
	СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
	
	МассивСообщенийСерверу.Добавить(СтруктураСообщенияНаСервер);
	
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ТекущийРодитель = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ДеревоПроекта, ТекущиеДанные.ПолучитьРодителя());
	ТекущийРодитель.ПолучитьЭлементы().Удалить(ТекущиеДанные);
	Если ТекущийРодитель <> ДеревоПроекта И ТекущийРодитель.ПолучитьЭлементы().Количество() = 0 Тогда
		СтрокаПроектаРодитель = ТаблицаПроектаКопия.Получить(ТекущийРодитель.ИндексТаблицы);
		Если СтрокаПроектаРодитель.Длительность = 0 Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха"));
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача"));
		КонецЕсли;
		Элементы.ДеревоПроекта.ТекущаяСтрока = ТекущийРодитель.ПолучитьИдентификатор();
	КонецЕсли;
	
	ПоказатьКнопкиКоличествоУровней();
	ЭтаФорма.Модифицированность = Истина;
	
	ПересчитатьСДРДерева(, Истина);
	
	ПосчитатьИтогиВалютыПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, Неопределено, ТекущийРодитель.УИД));
	ПосчитатьИтогиПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, Неопределено, ТекущийРодитель.УИД));
	//ПосчитатьИтогиПроцентовПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, Неопределено, ТекущийРодитель.УИД));
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	ПосчитатьФактическуюДлительностьПоКолонкам("", ?(ТекущийРодитель = ДеревоПроекта, Неопределено, ТекущийРодитель.УИД));
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОчиститьПометкуИзменений(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОтменитьДействие();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПередРазворачиванием(Элемент, Строка, Отказ)
	Если ДиаграммаГантаОтображатьДиаграмму И ДиаграммаГантаСинхронизироватьСДеревом Тогда
		ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(Строка);
		Если ЭлементДерева <> Неопределено Тогда
			ТочкаДиаграммы = ДиаграммаГанта.УстановитьТочку(ЭлементДерева.УИД);
			Если НЕ ДиаграммаГанта.РазвернутаТочка(ТочкаДиаграммы) Тогда
				ДиаграммаГанта.РазвернутьТочку(ТочкаДиаграммы, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПередСворачиванием(Элемент, Строка, Отказ)
	Если ДиаграммаГантаОтображатьДиаграмму И ДиаграммаГантаСинхронизироватьСДеревом Тогда
		ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(Строка);
		Если ЭлементДерева <> Неопределено Тогда
			ТочкаДиаграммы = ДиаграммаГанта.УстановитьТочку(ЭлементДерева.УИД);
			Если ДиаграммаГанта.РазвернутаТочка(ТочкаДиаграммы) Тогда
				ДиаграммаГанта.СвернутьТочку(ТочкаДиаграммы, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаНаименованиеЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И НЕ Проект.Пустая() Тогда
		СписокЗадач = Новый СписокЗначений;
		Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
			Если ЗначениеЗаполнено(СтрокаПроекта.Задача) Тогда
				СписокЗадач.Добавить(СтрокаПроекта.Задача);
			КонецЕсли;
		КонецЦикла;
		ИмяФормыВыбора = ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаВыбораНеотраженнойЗадачи";
		ОткрытьФорму(ИмяФормыВыбора, Новый Структура("Проект, ЭкземплярВерсии, Задача, ТекущиеЗадачи", Проект, ЭкземплярВерсии, ТекущиеДанные.Задача, СписокЗадач), Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаНаименованиеЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Проекты") Тогда
		ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
		НачатьДействие();
		
		ТекущиеДанные.Задача = ВыбранноеЗначение;
		ДобавитьСобытиеИзменениеРеквизитаДерева("Задача");
		
		ТекущиеДанные.НаименованиеЗадачи = ПолучитьРеквизитОбъекта(ВыбранноеЗначение, "ПолноеНаименование");;
		ДобавитьСобытиеИзменениеРеквизитаДерева("НаименованиеЗадачи");
		
		ТекущиеДанные.ВидОперации = ПолучитьРеквизитОбъекта(ВыбранноеЗначение, "грзнтВидОперации");
		ДобавитьСобытиеИзменениеРеквизитаДерева("ВидОперации");
		
		ЗаменитьУИДВоВсехТаблицах(ТекущиеДанные.УИД, СокрЛП(ВыбранноеЗначение.УникальныйИдентификатор()));
		ТекущиеДанные.УИД = ВыбранноеЗначение.УникальныйИдентификатор();
		ДобавитьСобытиеИзменениеРеквизитаДерева("УИД");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаНаименованиеЗадачиПриИзменении(Элемент)
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("НаименованиеЗадачи");
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаРучнойВводПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ПрошлыйКликРучнойВвод > ТекущаяДата() - 2 Тогда
		ТекущиеДанные.РучнойВвод = НЕ ТекущиеДанные.РучнойВвод;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	Если ТекущиеДанные.ФактическаяДатаНачала = Дата(1,1,1) И ТекущиеДанные.ФактическаяДатаОкончания = Дата(1,1,1) Тогда
		ДобавитьСобытиеИзменениеРеквизитаДерева("РучнойВвод");
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.РучнойВвод);
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, УникальныйИдентификатор, СообщениеСерверу, МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
	ПрошлыйКликРучнойВвод = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаДатаНачалаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.ДатаНачала = ТекущиеДанные.ДатаНачала Тогда
		Возврат;
	КонецЕсли;
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("ДатаНачала");
	
	Если ТекущиеДанные.ФактическаяДатаНачала = Дата(1,1,1) Тогда
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("УИД", ТекущиеДанные.УИД);
		СтруктураИзменения.Вставить("ИмяРеквизита", "ДатаНачала");
		СтруктураИзменения.Вставить("НовоеЗначение", ТекущиеДанные.ДатаНачала);
		МассивИзменений = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтруктураИзменения, МассивИзменений, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаДатаОкончанияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.ДатаОкончания = ТекущиеДанные.ДатаОкончания Тогда
		Возврат;
	КонецЕсли;
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("ДатаОкончания");
	
	Если ТекущиеДанные.ФактическаяДатаОкончания = Дата(1,1,1) Тогда
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("УИД", ТекущиеДанные.УИД);
		СтруктураИзменения.Вставить("ИмяРеквизита", "ДатаОкончания");
		СтруктураИзменения.Вставить("НовоеЗначение", ТекущиеДанные.ДатаОкончания);
		МассивИзменений = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтруктураИзменения, МассивИзменений, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаДлительностьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.Длительность = ТекущиеДанные.Длительность Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("Длительность");
	
	Если СтрокаТаблицы.Длительность = 0 И СтрокаТаблицы.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха"));
	ИначеЕсли СтрокаТаблицы.Длительность > 0 И СтрокаТаблицы.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
		СтрокаСДР = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
		Если СтрокаСДР.ПолучитьЭлементы().Количество() > 0 Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач"));
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача"));
		КонецЕсли;
	КонецЕсли;
	
	ПустаяДата = Дата(1,1,1);
	Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ДлительностьПлан", СтрокаТаблицы.Длительность);
	КонецЕсли;
	
	АдресХранилища = АдресВременногоХранилищаДанныхНаСервере;
	Идентификатор = ЭтаФорма.УникальныйИдентификатор;
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("УИД", ТекущиеДанные.УИД);
	СтруктураИзменения.Вставить("ИмяРеквизита", "Длительность");
	СтруктураИзменения.Вставить("НовоеЗначение", ТекущиеДанные.Длительность);
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтруктураИзменения, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаЕдиницаВремениПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	//Для Каждого СтрокаТаблицы ИЗ ТаблицаПроектаКопия Цикл
	//	Если СтрокаТаблицы.УИД = ТекущиеДанные.УИД Тогда
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.ЕдиницаВремени = ТекущиеДанные.ЕдиницаВремени Тогда
		Возврат;
	КонецЕсли;
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("ЕдиницаВремени");
				
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("УИД", ТекущиеДанные.УИД);
	СтруктураИзменения.Вставить("ИмяРеквизита", "ЕдиницаВремени");
	СтруктураИзменения.Вставить("НовоеЗначение", ТекущиеДанные.ЕдиницаВремени);
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, УникальныйИдентификатор, СтруктураИзменения, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаКалендарьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	//Для Каждого СтрокаТаблицы ИЗ ТаблицаПроектаКопия Цикл
	//	Если СтрокаТаблицы.УИД = ТекущиеДанные.УИД Тогда
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.Календарь = ТекущиеДанные.Календарь Тогда
		Возврат;
	КонецЕсли;
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("Календарь");
				
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("УИД", ТекущиеДанные.УИД);
	СтруктураИзменения.Вставить("ИмяРеквизита", "Календарь");
	СтруктураИзменения.Вставить("НовоеЗначение", ТекущиеДанные.Календарь);
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, УникальныйИдентификатор, СтруктураИзменения, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ДеревоЭкземпляровВерсийПланов

&НаКлиенте
Процедура ДеревоЭкземпляровВерсийПлановПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭкземпляровВерсийПлановПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭкземпляровВерсийПлановПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоЭкземпляровВерсийПланов.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоЭкземпляровВерсийПланов(ПроектВладелец)
	Справочники.грзнтЭкземплярыВерсийПланаПроекта.СформироватьДеревоЭкземпляровНаФорме(ПроектВладелец, ДеревоЭкземпляровВерсийПланов);
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыРаботыСДеревом

&НаСервере
Процедура СформироватьТаблицуПроектаПоЭкземпляруНаСервере()
	ПроверитьНеобходимостьПересчетаСроков();
	Если НЕ ЗначениеЗаполнено(ЭкземплярВерсии) Тогда
		ТаблицаПредшественники.Очистить();
		
		ТаблицаПроектаКопия.Очистить();
		ДеревоПроекта.ПолучитьЭлементы().Очистить();
		ДеревоСДР.ПолучитьЭлементы().Очистить();
		
		РекурсивныйПересчетПостроитьТаблицыРасчета(ТаблицаПроектаКопия.Выгрузить(), ТаблицаПредшественники.Выгрузить(), ДатаНачалаПроекта, КалендарьПроекта, СпособПланирования, ЭтаФорма.УникальныйИдентификатор, РежимУчитыватьФакт);
		СформироватьДеревоСДР(ДеревоСДР, "");
		СформироватьДеревоПроектаПоТаблицеПроектаСФильтром(Истина, Новый Массив);
		ПоказатьКнопкиКоличествоУровнейНаСервере();
		
		Возврат;
	КонецЕсли;
	
	ДанныеДляПроверкиПрав = Новый Структура("ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, ДоступныеТаблицыИзменение",
												ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, ДоступныеТаблицыИзменение);
	грзнтСДРПроектаСервер.СформироватьТаблицуПроектаДляРедактораПроекта(ТаблицаПроектаКопия, ЭкземплярВерсии, ДанныеДляПроверкиПрав);
			
	ЗапросДокументов = Новый Запрос;
	ЗапросЗаглушка = "ВЫБРАТЬ ИСТИНА КАК ЗаглушкаПрав;";
	
	ЗапросДокументов.Текст = ""  
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланДвиженияДенежныхСредствПроекта"), ЗапросЗаглушка, 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ *, ВЫБОР КОГДА Направление = ЗНАЧЕНИЕ(Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление) ТОГДА 0 ИНАЧЕ 1 КОНЕЦ КАК Картинка ИЗ Документ.грзнтПланДвиженияДенежныхСредствПроекта.ДвиженияДенежныхСредств ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;") 
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланДоходовРасходовПроекта"), ЗапросЗаглушка, "  
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланДоходовРасходовПроекта.ПланДоходов ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;") 
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланДоходовРасходовПроекта"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланДоходовРасходовПроекта.ПланРасходов ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	
	|;") 
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланТрудозатратРолейЧасы"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланТрудозатратРолейЧасы.Роли ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;") 
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланТрудозатратРесурсовЧасы"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланТрудозатратРесурсовЧасы.ТрудовыеРесурсы ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;") 
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланЗатратМатериаловКоличество"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланЗатратМатериаловКоличество.Материалы ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	
	|;") 
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланТрудозатратРолейФинансы"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланТрудозатратРолейФинансы.Роли ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;") 
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланТрудозатратРесурсовФинансы"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланТрудозатратРесурсовФинансы.ТрудовыеРесурсы ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;") 
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланЗатратМатериаловСумма"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланЗатратМатериаловСумма.Материалы ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтСДРПроекта"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ СДРПроектаЗависимости.*, СДРПроектаСДРПроекта.КодСДР, СДРПроектаСДРПроекта.НомерСтрокиПроекта, СДРПроектаЗависимости.Предшественник.Наименование КАК НаименованиеЗадачи
	|ИЗ Документ.грзнтСДРПроекта.Зависимости КАК СДРПроектаЗависимости
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.грзнтСДРПроекта.СДРПроекта КАК СДРПроектаСДРПроекта
	|	ПО СДРПроектаЗависимости.Предшественник = СДРПроектаСДРПроекта.Задача
	|ГДЕ СДРПроектаЗависимости.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|	И СДРПроектаСДРПроекта.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПланТрудозатратРесурсовОперативный"), "
	|ВЫБРАТЬ 0 Роль, 0 ТрудовойРесурс, 0 Валюта, 0 ОтражатьВРасходах, 0 Контрагент, 0 ДоговорКонтрагента, 0 Статья, 0 ЕдиницаВремени, 0 Организация, 0 Подразделение, 0 Номенклатура, 0 ЗонаРасчета, 0 ВидСтавки, 0 Количество, 0 Сумма, 0 СуммаУпр ГДЕ ЛОЖЬ;", "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ Документ.грзнтПланТрудозатратРесурсовОперативный.ТрудовыеРесурсы ГДЕ Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	
	+ ?(НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтСДРПроекта"), ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ *, РАЗНОСТЬДАТ(РегистрКомментарии.ДатаВремя, &ТекущийДень, ДЕНЬ) КАК КоличествоДней ИЗ РегистрСведений.грзнтКомментарииКЗадачам КАК РегистрКомментарии ГДЕ РегистрКомментарии.Проект = &Проект
	
	|;");
	
	ТаблицаШаблон = Новый ТаблицаЗначений;
	ТаблицаШаблон.Колонки.Добавить("Задача");
	ТаблицаШаблон.Колонки.Добавить("ГУИД", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
	ТаблицаПланМатериаловКоличество = ТаблицаШаблон.Скопировать();
	ТаблицаПланМатериаловСумма = ТаблицаШаблон.Скопировать();
	ТаблицаПланРесурсовФинансы = ТаблицаШаблон.Скопировать();
	ТаблицаПланРесурсовЧасы = ТаблицаШаблон.Скопировать();
	ТаблицаПланРолейФинансы = ТаблицаШаблон.Скопировать();
	ТаблицаПланРолейЧасы = ТаблицаШаблон.Скопировать();
	ТаблицаПланРесурсовОперативный = ТаблицаШаблон.Скопировать();
	ТаблицаПланКомментарии = ТаблицаШаблон.Скопировать();
	
	ЗапросДокументов.УстановитьПараметр("ЭкземплярВерсии", ЭкземплярВерсии);
	ЗапросДокументов.УстановитьПараметр("Проект", Проект);
	ЗапросДокументов.УстановитьПараметр("ТекущийДень", НачалоДня(ТекущаяДата()));
	МассивРезультатовДокументов = ЗапросДокументов.ВыполнитьПакет();
	ЗагрузитьРезультатЗапросаВТаблицуПланаТаблицы(МассивРезультатовДокументов[0], "ПланДвиженияДенежныхСредств");
	ЗагрузитьРезультатЗапросаВТаблицуПланаТаблицы(МассивРезультатовДокументов[1], "ПланДоходов");
	ЗагрузитьРезультатЗапросаВТаблицуПланаТаблицы(МассивРезультатовДокументов[2], "ПланРасходов");
	
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[3], ТаблицаПланРолейЧасы);
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[4], ТаблицаПланРесурсовЧасы);
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[5], ТаблицаПланМатериаловКоличество);
	
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[6], ТаблицаПланРолейФинансы);
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[7], ТаблицаПланРесурсовФинансы);
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[8], ТаблицаПланМатериаловСумма);
	
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[9], ТаблицаПредшественники);
	ЗагрузитьРезультатЗапросаВТаблицуПланаТаблицы(МассивРезультатовДокументов[9], "ТаблицаПредшественники");
	
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[10], ТаблицаПланРесурсовОперативный);
	ЗагрузитьРезультатЗапросаВТаблицуПлана(МассивРезультатовДокументов[11], ТаблицаПланКомментарии);
	
	СтруктураПоиска = Новый Структура("Роль, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета");
	Для Каждого СтрокаТаблицыФинансы ИЗ ТаблицаПланРолейФинансы Цикл
		СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыФинансы.УИД));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиТаблицы.Получить(0);
			СтрокаТаблицыОбщая = СтрокаТаблицы.ПланРолейОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбщая, СтрокаТаблицыФинансы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицыЧасы ИЗ ТаблицаПланРолейЧасы Цикл
		СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыЧасы.УИД));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиТаблицы.Получить(0);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицыЧасы);
			СтрокиТаблицыОбщая = СтрокаТаблицы.ПланРолейОбщая.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТаблицыОбщая.Количество() = 0 Тогда
				СтрокаТаблицыОбщая = СтрокаТаблицы.ПланРолейОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбщая, СтрокаТаблицыЧасы);
			Иначе
				СтрокиТаблицыОбщая.Получить(0).Количество = СтрокаТаблицыЧасы.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Роль, ТрудовойРесурс, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета");
	Для Каждого СтрокаТаблицыФинансы ИЗ ТаблицаПланРесурсовФинансы Цикл
		СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыФинансы.УИД));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиТаблицы.Получить(0);
			СтрокаТаблицыОбщая = СтрокаТаблицы.ПланРесурсовОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбщая, СтрокаТаблицыФинансы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицыЧасы ИЗ ТаблицаПланРесурсовЧасы Цикл
		СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыЧасы.УИД));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиТаблицы.Получить(0);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицыЧасы);
			СтрокиТаблицыОбщая = СтрокаТаблицы.ПланРесурсовОбщая.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТаблицыОбщая.Количество() = 0 Тогда
				СтрокаТаблицыОбщая = СтрокаТаблицы.ПланРесурсовОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбщая, СтрокаТаблицыЧасы);
			Иначе
				СтрокиТаблицыОбщая.Получить(0).Количество = СтрокаТаблицыЧасы.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Номенклатура, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаИзмерения, Организация, Подразделение, ЗонаРасчета, ВидСтавки");
	Для Каждого СтрокаТаблицыФинансы ИЗ ТаблицаПланМатериаловСумма Цикл
		СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыФинансы.УИД));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиТаблицы.Получить(0);
			СтрокаТаблицыОбщая = СтрокаТаблицы.ПланМатериаловОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбщая, СтрокаТаблицыФинансы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицыЧасы ИЗ ТаблицаПланМатериаловСумма Цикл
		СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыЧасы.УИД));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиТаблицы.Получить(0);
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблицыЧасы);
			СтрокиТаблицыОбщая = СтрокаТаблицы.ПланМатериаловОбщая.НайтиСтроки(СтруктураПоиска);
			Если СтрокиТаблицыОбщая.Количество() = 0 Тогда
				СтрокаТаблицыОбщая = СтрокаТаблицы.ПланМатериаловОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицыОбщая, СтрокаТаблицыЧасы);
			Иначе
				СтрокиТаблицыОбщая.Получить(0).Количество = СтрокаТаблицыЧасы.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаПланРесурсовОперативный.Свернуть("УИД, Роль, ТрудовойРесурс, Валюта, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета, ВидСтавки", "Количество, Сумма, СуммаУпр");
	ТаблицаПланРесурсовОперативныйУИД = ТаблицаПланРесурсовОперативный.Скопировать(, "УИД");
	ТаблицаПланРесурсовОперативныйУИД.Свернуть("УИД");
	
	Для Каждого СтрокаТаблицыПланаУИД ИЗ ТаблицаПланРесурсовОперативныйУИД Цикл
		СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыПланаУИД.УИД));
		СтрокиТаблицыПлана = ТаблицаПланРесурсовОперативный.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыПланаУИД.УИД));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиТаблицы.Получить(0);
			Для Каждого СтрокаТаблицыПлана ИЗ СтрокиТаблицыПлана Цикл
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы.ПланРесурсовОперативный.Добавить(), СтрокаТаблицыПлана);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// ((( grznt.Solntsev 12.10.2016
	ДатаДопустимогоРедактированияКомментария = НачалоДня(ТекущаяДата()) - Константы.грзнтКоличествоРазрешенныхДнейКомментариевЗадачи.Получить() * 86400;
	ТаблицаПланКомментарии.Свернуть("УИД, ДатаВремя, Пользователь, Комментарий, КоличествоДней");
	ТаблицаПланКомментарииУИД = ТаблицаПланКомментарии.Скопировать(, "УИД");
	ТаблицаПланКомментарииУИД.Свернуть("УИД");
	Для Каждого СтрокаТаблицыПланаУИД ИЗ ТаблицаПланКомментарииУИД Цикл
		СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыПланаУИД.УИД));
		СтрокиТаблицыПлана = ТаблицаПланКомментарии.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицыПланаУИД.УИД));
		Если СтрокиТаблицы.Количество() > 0 Тогда
			СтрокаТаблицы = СтрокиТаблицы.Получить(0);
			Для Каждого СтрокаТаблицыПлана ИЗ СтрокиТаблицыПлана Цикл
				СтрокаКомментарий = СтрокаТаблицы.КомментарииКЗадаче.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаКомментарий, СтрокаТаблицыПлана);
				Если СтрокаТаблицыПлана.ДатаВремя >= ДатаДопустимогоРедактированияКомментария И СтрокаТаблицыПлана.Пользователь = ТекущийПользователь Тогда
					СтрокаКомментарий.Собственный = Истина;
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицы.ЕстьКомментарий = ?(СтрокаТаблицы.КомментарииКЗадаче.Количество() = 0, 0, 1);
		КонецЕсли;
	КонецЦикла;
	// ))) grznt.Solntsev 12.10.2016
	
	Если грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "РегистрСведений", "грзнтСрокиПроектов") Тогда
		ЗапросСрокПроекта = Новый Запрос;
		ЗапросСрокПроекта.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	горСрокиПроектов.ДатаНачала
		|ИЗ
		|	РегистрСведений.грзнтСрокиПроектов КАК горСрокиПроектов
		|ГДЕ
		|	горСрокиПроектов.ЭкземплярВерсии = &ЭкземплярВерсии
		|	И горСрокиПроектов.Задача = &Задача";
		ЗапросСрокПроекта.УстановитьПараметр("ЭкземплярВерсии", ЭкземплярВерсии);
		ЗапросСрокПроекта.УстановитьПараметр("Задача", Проект);
		ВыборкаСрокПроекта = ЗапросСрокПроекта.Выполнить().Выбрать();
		Если ВыборкаСрокПроекта.Следующий() Тогда 
			ДатаНачалаПроекта = ВыборкаСрокПроекта.ДатаНачала;
		КонецЕсли;
		
		ЗапросКалендарьПроекта = Новый Запрос;
		ЗапросКалендарьПроекта.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	горСрокиПроектов.Календарь
		|ИЗ
		|	РегистрСведений.грзнтКалендариЗадач КАК горСрокиПроектов
		|ГДЕ
		|	горСрокиПроектов.ЭкземплярВерсии = &ЭкземплярВерсии
		|	И горСрокиПроектов.Задача = &Задача";
		ЗапросКалендарьПроекта.УстановитьПараметр("ЭкземплярВерсии", ЭкземплярВерсии);
		ЗапросКалендарьПроекта.УстановитьПараметр("Задача", Проект);
		ВыборкаКалендарьПроекта = ЗапросКалендарьПроекта.Выполнить().Выбрать();
		Если ВыборкаКалендарьПроекта.Следующий() Тогда 
			КалендарьПроекта = ВыборкаКалендарьПроекта.Календарь;
		КонецЕсли;
	КонецЕсли;
	// ((( grznt.Solntsev 19.12.2016
	Если грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "Документ", "грзнтПлановыеСрокиПроекта") Тогда
		ЗапросСрокПроекта = Новый Запрос;
		ЗапросСрокПроекта.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	грзнтПлановыеСрокиПроекта.НеУчитыватьФакт
		|ИЗ
		|	Документ.грзнтПлановыеСрокиПроекта КАК грзнтПлановыеСрокиПроекта
		|ГДЕ
		|	грзнтПлановыеСрокиПроекта.ЭкземплярВерсии = &ЭкземплярВерсии";
		ЗапросСрокПроекта.УстановитьПараметр("ЭкземплярВерсии", ЭкземплярВерсии);
		ВыборкаСрокПроекта = ЗапросСрокПроекта.Выполнить().Выбрать();
		Если ВыборкаСрокПроекта.Следующий() Тогда 
			РежимУчитыватьФакт = НЕ ВыборкаСрокПроекта.НеУчитыватьФакт;
		КонецЕсли;
	КонецЕсли;
	// ))) grznt.Solntsev 19.12.2016
	
	Если грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыЧтение, "РегистрСведений", "грзнтВнешниеСвязиЗадачПроекта") Тогда
		ТаблицаВнешнихПредшественников = грзнтСДРПроектаСервер.ПолучитьТаблицуВнешнихСвязей(Проект, ЭкземплярВерсии);
		Для Каждого СтрокаВнешнихПредшественников ИЗ ТаблицаВнешнихПредшественников Цикл
			СтрокиТаблицыПроекта = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("Задача", СтрокаВнешнихПредшественников.Задача));
			Если СтрокиТаблицыПроекта.Количество() = 0 Тогда
				Продолжить;
			Иначе
				СтрокаТаблицыПроекта = СтрокиТаблицыПроекта.Получить(0);
			КонецЕсли;
			СтрокаПредшественник = СтрокаТаблицыПроекта.ТаблицаПредшественники.Добавить();
			СтрокаПредшественник.ТипСвязи = СтрокаВнешнихПредшественников.ТипСвязи;
			СтрокаПредшественник.КодСДР = СтрокаВнешнихПредшественников.КодСДР;
			СтрокаПредшественник.НаименованиеЗадачи = СтрокаВнешнихПредшественников.ПредшественникПредставление;
			СтрокаПредшественник.ПредшественникУИД = СтрокаВнешнихПредшественников.ПредшественникУИД;
			СтрокаПредшественник.ЕдиницаВремени = СтрокаВнешнихПредшественников.ЕдиницаВремени;
			СтрокаПредшественник.Задержка = СтрокаВнешнихПредшественников.Задержка;
			СтрокаПредшественник.Внешний = Истина;
			СтрокаПредшественник.ГУИД = Новый УникальныйИдентификатор;
			
			СтрокаПредшественник = ТаблицаПредшественники.Добавить();
			СтрокаПредшественник.УИД = СтрокаТаблицыПроекта.УИД;
			СтрокаПредшественник.ТипСвязи = СтрокаВнешнихПредшественников.ТипСвязи;
			СтрокаПредшественник.НаименованиеЗадачи = СтрокаВнешнихПредшественников.ПредшественникПредставление;
			СтрокаПредшественник.ПредшественникУИД = СтрокаВнешнихПредшественников.ПредшественникУИД;
			СтрокаПредшественник.КодСДР = СтрокаВнешнихПредшественников.КодСДР;
			СтрокаПредшественник.ЕдиницаВремени = СтрокаВнешнихПредшественников.ЕдиницаВремени;
			СтрокаПредшественник.Задержка = СтрокаВнешнихПредшественников.Задержка;
			СтрокаПредшественник.Внешний = Истина;
			
			Если ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", СтрокаВнешнихПредшественников.ПредшественникУИД)).Количество() = 0 Тогда
				СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Добавить();
				СтрокаТаблицыПроекта.НаименованиеЗадачи = СтрокаВнешнихПредшественников.ПредшественникПредставление;
				СтрокаТаблицыПроекта.ДатаНачала = СтрокаВнешнихПредшественников.ДатаНачала;
				СтрокаТаблицыПроекта.ДатаОкончания = СтрокаВнешнихПредшественников.ДатаОкончания;
				СтрокаТаблицыПроекта.РучнойВвод = Истина;
				СтрокаТаблицыПроекта.КодСДР = СтрокаВнешнихПредшественников.КодСДР;
				СтрокаТаблицыПроекта.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень");
				СтрокаТаблицыПроекта.Длительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаТаблицыПроекта.ДатаНачала, СтрокаТаблицыПроекта.ДатаОкончания, КалендарьПроекта, СтрокаТаблицыПроекта.ЕдиницаВремени);
				СтрокаТаблицыПроекта.Картинка = 3;
				СтрокаТаблицыПроекта.УИД = СтрокаВнешнихПредшественников.ПредшественникУИД;
				СтрокаТаблицыПроекта.РДН = СтрокаВнешнихПредшественников.ДатаНачала;
				СтрокаТаблицыПроекта.РДО = СтрокаВнешнихПредшественников.ДатаОкончания;
				СтрокаТаблицыПроекта.ПДН = СтрокаВнешнихПредшественников.ДатаНачала;
				СтрокаТаблицыПроекта.ПДО = СтрокаВнешнихПредшественников.ДатаОкончания;
				СтрокаТаблицыПроекта.ТипОграничения = ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало");
				СтрокаТаблицыПроекта.ДатаОграничения = СтрокаВнешнихПредшественников.ДатаНачала;
				СтрокаТаблицыПроекта.Внешний = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаКолонок = "ДатаНачала, ДатаОкончания, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, КритическийПуть, КодСДР, РучнойВвод, УИД, Родитель,
	|Идентификатор, ТипОграничения, ДатаОграничения, ФактическаяДатаНачала, ФактическаяДатаОкончания, КонтрактныйДатаНачала, КонтрактныйДатаОкончания, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение";
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПостроитьТаблицыРасчета(ТаблицаПроектаКопия.Выгрузить(,СтрокаКолонок), ТаблицаПредшественники.Выгрузить(), ДатаНачалаПроекта, КалендарьПроекта, СпособПланирования, ЭтаФорма.УникальныйИдентификатор, РежимУчитыватьФакт);
	
	ТаблицаПроектаКопия.Сортировать("КодСДР");
	ДеревоСДР.ПолучитьЭлементы().Очистить();
	
	СформироватьДеревоСДР(ДеревоСДР, "");
	
	СформироватьДеревоПроектаПоТаблицеПроектаСФильтром(Истина, Новый Массив);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатЗапросаВТаблицуПлана(РезультатЗапроса, ТаблицаПлан)
	Если НЕ РезультатЗапроса.Колонки.Найти("ЗаглушкаПрав") = Неопределено Тогда Возврат; КонецЕсли;
	
	Если ТипЗнч(ТаблицаПлан) = Тип("ТаблицаЗначений") Тогда
		ТаблицаПлан = РезультатЗапроса.Выгрузить().СкопироватьКолонки();
		ТаблицаПлан.Колонки.Добавить("УИД", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
		ТаблицаПлан.Колонки.Добавить("ГУИД", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
	КонецЕсли;
	
	ЕстьКолонкаПредшественник = РезультатЗапроса.Колонки.Найти("Предшественник") <> Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиКопии = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("УИД", Строка(Выборка.Задача.УникальныйИдентификатор())));//СтрокиКопии = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("Задача", Выборка.Задача));
		Если СтрокиКопии.Количество() > 0 Тогда
			
			СтрокаПлан = ТаблицаПлан.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлан, Выборка);
		 	СтрокаПлан.УИД = СтрокиКопии.Получить(0).УИД;
			Если ЕстьКолонкаПредшественник Тогда
				СтрокиПланПредшественник = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("Задача", Выборка.Предшественник));
				Если СтрокиПланПредшественник.Количество() > 0 Тогда
					СтрокаПлан.ПредшественникУИД = СтрокиПланПредшественник.Получить(0).УИД;
				КонецЕсли;
			Иначе
				СтрокаПлан.ГУИД = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатЗапросаВТаблицуПланаТаблицы(РезультатЗапроса, ИмяТаблицыПлана)
	Если НЕ РезультатЗапроса.Колонки.Найти("ЗаглушкаПрав") = Неопределено Тогда Возврат; КонецЕсли;
	
	ТаблицаПлан = РезультатЗапроса.Выгрузить().СкопироватьКолонки();
	ЕстьКолонкаПредшественник = РезультатЗапроса.Колонки.Найти("Предшественник") <> Неопределено;
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиКопии = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("Задача", Выборка.Задача));
		Если СтрокиКопии.Количество() > 0 Тогда
			СтрокаКопия = СтрокиКопии.Получить(0);
			СтрокаПлан = СтрокаКопия[ИмяТаблицыПлана].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлан, Выборка);
			Если ЕстьКолонкаПредшественник Тогда
				СтрокаПлан.ПредшественникУИД = СокрЛП(Выборка.Предшественник.УникальныйИдентификатор());
			КонецЕсли;
			СтрокаПлан.ГУИД = Строка(Новый УникальныйИдентификатор);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоПроектаПоТаблицеПроектаСФильтром(Очищать, МассивИдентификаторы)
	Если Очищать Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаПроектаКопия Цикл
			СтрокаТаблицы.Идентификатор = -1;
		КонецЦикла;
		ДеревоПроекта.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	СформироватьДеревоПроектаПоФильтрТаблице(ТаблицаПроектаКопия, ДеревоПроекта, Новый Массив, МассивИдентификаторы);
КонецПроцедуры

&НаСервере
Функция СформироватьДеревоПроектаПоФильтрТаблице(ТаблицаДерева, УзелДерева, МассивСтрокРодителей, МассивИдентификаторы)
	ДобавилиСтроку = Ложь;
	Если РежимОтображенияСписок Тогда
		Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
			Если СтрокаПроекта.Внешний Тогда
				Продолжить;
			КонецЕсли;
			СтрокаУдовлетворяетФильтру = Истина;
			Если ТаблицаФильтрРедактора.Количество() > 0 Тогда
				СтрокаУдовлетворяетФильтру = СтрокаУдовлетворяетФильтра(СтрокаПроекта, ЭтаФорма);
			КонецЕсли;
			Если СтрокаУдовлетворяетФильтру Тогда
				Если СтрокаПроекта.Идентификатор < 0 Тогда
					НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
					КоличествоЭлементов = НаборЭлементовДерева.Количество() - 1;
					Для ИндексВставки = 0 ПО КоличествоЭлементов Цикл
						Если НаборЭлементовДерева.Получить(ИндексВставки).КодСДР > СтрокаПроекта.КодСДР Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					СтрокаДерева = НаборЭлементовДерева.Вставить(ИндексВставки);
				Иначе
					СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаПроекта.Идентификатор);
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаПроекта, , стрКолонкиТаблицыИсключение);
				СкопироватьВсеПланыИзСтрокиТаблицыВУзелДерева(СтрокаДерева, СтрокаПроекта, ЭтаФорма);
				
				СтрокаДерева.ИндексТаблицы = ТаблицаПроектаКопия.Индекс(СтрокаПроекта);
				СтрокаПроекта.Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
			ИначеЕсли СтрокаПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаПроекта.Идентификатор);
				СтрокаПроекта.Идентификатор = -1;
				//СтрокаПроекта.ИдентификаторСДР = -1;
				ДеревоПроекта.ПолучитьЭлементы().Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если МассивСтрокРодителей.Количество() = 0 Тогда
			СтрокаРодитель = Неопределено;
		Иначе
			СтрокаРодитель = МассивСтрокРодителей.Получить(МассивСтрокРодителей.Количество() - 1);
		КонецЕсли;
		СтрокиРодителя = ТаблицаДерева.НайтиСтроки(Новый СТруктура("Родитель", ?(СтрокаРодитель = Неопределено, "", СтрокаРодитель.УИД)));
		Для Каждого СтрокаПроекта ИЗ СтрокиРодителя Цикл
			Если СтрокаПроекта.Внешний Тогда
				Продолжить;
			КонецЕсли;
			СтрокаУдовлетворяетФильтру = Истина;
			Если ТаблицаФильтрРедактора.Количество() > 0 Тогда
				СтрокаУдовлетворяетФильтру = СтрокаУдовлетворяетФильтра(СтрокаПроекта, ЭтаФорма);
			КонецЕсли;
			Если СтрокаУдовлетворяетФильтру И СтрокаПроекта.Идентификатор < 0 Тогда
				Если УзелДерева = Неопределено И СтрокаРодитель = Неопределено Тогда
					УзелДерева = ДеревоПроекта;
				ИначеЕсли УзелДерева = Неопределено И СтрокаРодитель.Идентификатор < 0 Тогда
					СоздатьГруппыДереваПоМассивуРодителей(УзелДерева, МассивСтрокРодителей, ЭтаФорма);
				ИначеЕсли УзелДерева = Неопределено Тогда
					УзелДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаРодитель.Идентификатор);
				КонецЕсли;
				НаборЭлементовДерева = УзелДерева.ПолучитьЭлементы();
				КоличествоЭлементов = НаборЭлементовДерева.Количество() - 1;
				Для ИндексВставки = 0 По КоличествоЭлементов Цикл
					Если НаборЭлементовДерева.Получить(ИндексВставки).КодСДР > СтрокаПроекта.КодСДР Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				СтрокаДерева = НаборЭлементовДерева.Вставить(ИндексВставки);
				ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаПроекта, , стрКолонкиТаблицыИсключение);
				СкопироватьВсеПланыИзСтрокиТаблицыВУзелДерева(СтрокаДерева, СтрокаПроекта, ЭтаФорма);
				
				СтрокаДерева.ИндексТаблицы = ТаблицаПроектаКопия.Индекс(СтрокаПроекта);
				СтрокаПроекта.Идентификатор = СтрокаДерева.ПолучитьИдентификатор();
				МассивИдентификаторы.Добавить(СтрокаДерева.ПолучитьИдентификатор());
				ДобавилиСтроку = Истина;
			ИначеЕсли СтрокаПроекта.Идентификатор < 0 Тогда
			    СтрокаДерева = Неопределено
			Иначе
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаПроекта.Идентификатор);
			КонецЕсли;
			
			МассивСтрокРодителей.Добавить(СтрокаПроекта);
			БылиДобавления = СформироватьДеревоПроектаПоФильтрТаблице(ТаблицаДерева, СтрокаДерева, МассивСтрокРодителей, МассивИдентификаторы);
			МассивСтрокРодителей.Удалить(МассивСтрокРодителей.Количество() - 1);
			Если НЕ БылиДобавления И НЕ СтрокаУдовлетворяетФильтру И СтрокаПроекта.Идентификатор >= 0 Тогда
				Если СтрокаДерева = Неопределено Тогда
				ИначеЕсли СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
					ДеревоПроекта.ПолучитьЭлементы().Удалить(СтрокаДерева);
				Иначе
					СтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтрокаДерева);
				КонецЕсли;
				СтрокаПроекта.Идентификатор = -1;
				//СтрокаПроекта.ИдентификаторСДР = -1;
			КонецЕсли;
			ДобавилиСтроку = ДобавилиСтроку ИЛИ БылиДобавления ИЛИ СтрокаУдовлетворяетФильтру;
		КонецЦикла;
	КонецЕсли;
	Возврат ДобавилиСтроку;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СоздатьГруппыДереваПоМассивуРодителей(УзелДерева, МассивСтрокРодителей, ЭтаФорма)
	СоздалиНовый = Ложь;
	ПоследнийРодитель = ЭтаФорма.ДеревоПроекта;
	Для К = 0 По МассивСтрокРодителей.Количество() - 1 Цикл
		СтрокаТаблицы = МассивСтрокРодителей.Получить(К);
		Если СтрокаТаблицы.Идентификатор >= 0 Тогда
			ПоследнийРодитель = ЭтаФорма.ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
		ИначеЕсли СтрокаТаблицы.Идентификатор < 0 Тогда
			Если СоздалиНовый Тогда
				ПоследнийРодитель = ПоследнийРодитель.ПолучитьЭлементы().Добавить();
			Иначе
				НаборЭлементовДерева = ПоследнийРодитель.ПолучитьЭлементы();
				КоличествоЭлементов = НаборЭлементовДерева.Количество() - 1;
				Для ИндексВставки = 0 По КоличествоЭлементов Цикл
					Если НаборЭлементовДерева.Получить(ИндексВставки).КодСДР > СтрокаТаблицы.КодСДР Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				ПоследнийРодитель = НаборЭлементовДерева.Вставить(ИндексВставки);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПоследнийРодитель, СтрокаТаблицы, , ЭтаФорма.стрКолонкиТаблицыИсключение);
			
			Для Каждого СтрокаПланаТаблицы ИЗ СтрокаТаблицы.ПланДвиженияДенежныхСредств Цикл
				НоваяСтрокаПлана = ПоследнийРодитель.ПланДвиженияДенежныхСредств.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПлана, СтрокаПланаТаблицы);
			КонецЦикла;
			
			СтрокаТаблицы.Идентификатор = ПоследнийРодитель.ПолучитьИдентификатор();
			ПоследнийРодитель.ИндексТаблицы = ЭтаФорма.ТаблицаПроектаКопия.Индекс(СтрокаТаблицы);
			СоздалиНовый = Истина;СоздалиНовый = Истина;
		КонецЕсли;
	КонецЦикла;
	УзелДерева = ПоследнийРодитель;
	Возврат ПоследнийРодитель;
КонецФункции

&НаКлиенте
Функция ВставитьГруппуРодителяВДеревоПроекта(СтрокаТаблицыРодитель)
	МассивСтрокРодителей = Новый Массив;
	МассивСтрокРодителей.Добавить(СтрокаТаблицыРодитель);
	НужныйРодитель = СтрокаТаблицыРодитель.Родитель;
	Если ЭтаФорма.РежимОтображенияСписок Тогда
		НаборЭлементов = ДеревоПроекта.ПолучитьЭлементы();
		КоличествоЭлементов = НаборЭлементов.Количество() - 1;
		Для ИндексВставки = 0 По КоличествоЭлементов Цикл
			Если НаборЭлементов.Получить(ИндексВставки).КодСДР > СтрокаТаблицыРодитель.КодСДР Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		УзелРодителя = НаборЭлементов.Вставить(ИндексВставки);
		ЗаполнитьЗначенияСвойств(УзелРодителя, СтрокаТаблицыРодитель, , ЭтаФорма.стрКолонкиТаблицыИсключение);
		
		Для Каждого СтрокаПланаТаблицы ИЗ СтрокаТаблицыРодитель.ПланДвиженияДенежныхСредств Цикл
			НоваяСтрокаПлана = УзелРодителя.ПланДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлана, СтрокаПланаТаблицы);
		КонецЦикла;
				
		СтрокаТаблицыРодитель.Идентификатор = УзелРодителя.ПолучитьИдентификатор();
		УзелРодителя.ИндексТаблицы = ЭтаФорма.ТаблицаПроектаКопия.Индекс(СтрокаТаблицыРодитель);
	Иначе
		Пока НЕ ПустаяСтрока(НужныйРодитель) Цикл
			СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(НужныйРодитель);
			МассивСтрокРодителей.Вставить(0, СтрокаТаблицы);
			НужныйРодитель = СтрокаТаблицы.Родитель;
		КонецЦикла;
		УзелРодителя = Неопределено;
		СоздатьГруппыДереваПоМассивуРодителей(УзелРодителя, МассивСтрокРодителей, ЭтаФорма);
	КонецЕсли;
	Возврат УзелРодителя;
КонецФункции

&НаКлиенте
Функция ПроверитьСтрокуНаФильтрОбновитьВДереве(СтрокаПроекта)
	БылоИзменение = Истина;
	ЕстьФильтр = ЭтаФорма.ТаблицаФильтрРедактора.Количество() = 0;
	Для Каждого СтрокаФильтра ИЗ ЭтаФорма.ТаблицаФильтрРедактора Цикл
		Если СтрокаФильтра.Использование И НЕ ПустаяСтрока(СтрокаФильтра.Реквизит) Тогда
			ЕстьФильтр = Истина;
		КонецЕсли;
	КонецЦикла;
	СтрокаУдовлетворяетФильтру = Истина;
	Если ЕстьФильтр Тогда
		СтрокаУдовлетворяетФильтру = СтрокаУдовлетворяетФильтра(СтрокаПроекта, ЭтаФорма);
	КонецЕсли;
	Если СтрокаУдовлетворяетФильтру Тогда
		Если СтрокаПроекта.Идентификатор < 0 Тогда
			ВставитьГруппуРодителяВДеревоПроекта(СтрокаПроекта);
		КонецЕсли;
	ИначеЕсли СтрокаПроекта.Идентификатор >= 0 Тогда
		// удалять однозначно
		Если ЭтаФорма.РежимОтображенияСписок Тогда
			ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаПроекта.Идентификатор);
			СтрокаПроекта.Идентификатор = -1;
			СтрокаПроекта.ИдентификаторСДР = -1;
			ДеревоПроекта.ПолучитьЭлементы().Удалить(ЭлементДерева);
		Иначе
			ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаПроекта.Идентификатор);
			Если ЭлементДерева.ПолучитьЭлементы().Количество() = 0 Тогда
				СтрокаПроекта.Идентификатор = -1;
				СтрокаПроекта.ИдентификаторСДР = -1;
				Если ПустаяСтрока(СтрокаПроекта.Родитель) Тогда
					ДеревоПроекта.ПолучитьЭлементы().Удалить(ЭлементДерева);
				Иначе
					РодительДерева = ЭлементДерева.ПолучитьРодителя();
					РодительДерева.ПолучитьЭлементы().Удалить(ЭлементДерева);
					Если РодительДерева.ПолучитьЭлементы().Количество() = 0 Тогда
						СтрокаРодитель = тСоответствиеТаблицыУИД.Получить(РодительДерева.УИД);
						ПроверитьСтрокуНаФильтрОбновитьВДереве(СтрокаРодитель);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбновитьТаблицуПроектаПоМассивуИзменений(МассивСтруктурИзменения, ОбновлятьДерево)
	ПустаяДата = Дата(1,1,1);
	БылоОбновление = Ложь;
	ОчиститьПометкуИзменений(ЭтаФорма);
	СтруктураРеквизитов = Новый Структура("ДатаНачала, ДатаОкончания, Длительность, КритическийПуть, РДН, РДО, ПДН, ПДО, ДатаНачалаВыделено, ДатаОкончанияВыделено, ДлительностьВыделено, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение");
	Если СписокДействийДляИстории.Количество() > 0 Тогда
		ЭлементСпискаДействийДляИстории = СписокДействийДляИстории.Получить(СписокДействийДляИстории.Количество() - 1);
	Иначе
		ЭлементСпискаДействийДляИстории = СписокДействийДляИстории.Добавить();
	КонецЕсли;
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = "Количество обновляемых задач: " + Формат(МассивСтруктурИзменения.Количество(), "ЧГ=;ЧН=");
	//Сообщение.Сообщить();
	Для Каждого СтруктураИзменения ИЗ МассивСтруктурИзменения Цикл
		Если ТипЗнч(СтруктураИзменения) = Тип("ТекстовыйДокумент") Тогда
			#ЕСЛИ КЛИЕНТ ТОГДА
				СтруктураИзменения.Показать("");
			#КОНЕЦЕСЛИ
			ВОзврат;
		ИначеЕсли ТипЗнч(СтруктураИзменения) = Тип("Строка") Тогда
			Возврат;
		ИначеЕсли СтруктураИзменения = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СтруктураИзменения.УИД);
		Для Каждого КлючИЗначение ИЗ СтруктураРеквизитов Цикл
			Если КлючИЗначение.Ключ = "Индекс" ИЛИ КлючИЗначение.Ключ = "ИндексТаблицы" Тогда
				Продолжить;
			КонецЕсли;
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, КлючИЗначение.Ключ, СтруктураИзменения[КлючИЗначение.Ключ]);
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПроекта, СтруктураИзменения);
		Если НЕ СтрокаТаблицыПроекта.Внешний Тогда
			ПроверитьСтрокуНаФильтрОбновитьВДереве(СтрокаТаблицыПроекта);
		КонецЕсли;
		ПустаяДата = Дата(1,1,1);
		Если СтрокаТаблицыПроекта.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицыПроекта.ФактическаяДатаОкончания = ПустаяДата Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ДлительностьПлан", СтрокаТаблицыПроекта.Длительность);
		КонецЕсли;
		СтрокаСДР = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицыПроекта.ИдентификаторСДР);
		
		Если СтрокаСДР.ПолучитьЭлементы().Количество() > 0 Тогда
			Если СтрокаТаблицыПроекта.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач"));
			КонецЕсли;
		Иначе
			Если СтрокаТаблицыПроекта.Длительность = 0 И СтрокаТаблицыПроекта.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха"));
			ИначеЕсли СтрокаТаблицыПроекта.Длительность > 0 И СтрокаТаблицыПроекта.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача") Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача"));
			КонецЕсли;
		КонецЕсли;
		
		БылоОбновление = Истина;
	КонецЦикла;
	Если БылоОбновление Тогда
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьДиаграммуГанта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СформироватьНадписьПредшественники(СтрокаТаблицыПроекта)
	Надпись = "";
	НадписьПоНомеруСтроки = "";
	
	Для Каждого СтрокаПредшественник ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
		Если ПустаяСтрока(СтрокаПредшественник.ПредшественникУИД) Тогда
			Продолжить;
		КонецЕсли;
		СтрокаТаблицы = Неопределено;
		СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(СтрокаПредшественник.ПредшественникУИД);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоНачало") Тогда
			ТипСвязи = "НН";
		ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоОкончание") Тогда
			ТипСвязи = "НО";
		ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало") Тогда
			ТипСвязи = "ОН";
		ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеОкончание") Тогда
			ТипСвязи = "ОО";
		Иначе
			ТипСвязи = "";
		КонецЕсли;
		Если СтрокаПредшественник.Задержка = 0 Тогда
			Задержка = "";
		ИначеЕсли СтрокаПредшественник.Задержка > 0 Тогда
			Задержка = "+" + Формат(СтрокаПредшественник.Задержка, "ЧГ=;ЧН=");
		Иначе
			Задержка = Формат(СтрокаПредшественник.Задержка, "ЧГ=;ЧН=");
		КонецЕсли;
		Надпись = "" + Надпись + "; " + ?(СтрокаТаблицы.Внешний, "#", СтрокаТаблицы.КодСДР) + ТипСвязи + Задержка;
		НадписьПоНомеруСтроки = "" + НадписьПоНомеруСтроки + "; " + ?(СтрокаТаблицы.Внешний, "#", СтрокаТаблицы.НомерСтрокиПроекта) + ТипСвязи + Задержка;
	КонецЦикла;
	Надпись = Сред(Надпись, 3);
	НадписьПоНомеруСтроки = Сред(НадписьПоНомеруСтроки, 3);
	Возврат Новый Структура("Надпись, НадписьПоНомеруСтроки", Надпись, НадписьПоНомеруСтроки);
КонецФункции

&НаКлиенте
Функция СформироватьНадписьПоследователи(СтрокаПоследователь)
	Надпись = "";
	НадписьПоНомеруСтроки = "";
	
	МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПоследователь.УИД);
	Если МассивПредшественники = Неопределено Тогда
		МассивПредшественники = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаПредшественник ИЗ МассивПредшественники Цикл
		//СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(СтрокаПредшественник.ПредшественникУИД);
		СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(СтрокаПредшественник.УИД);
		Если СтрокаТаблицы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоНачало") Тогда
			ТипСвязи = "НН";
		ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоОкончание") Тогда
			ТипСвязи = "НО";
		ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало") Тогда
			ТипСвязи = "ОН";
		ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеОкончание") Тогда
			ТипСвязи = "ОО";
		Иначе
			ТипСвязи = "";
		КонецЕсли;
		Если СтрокаПредшественник.Задержка = 0 Тогда
			Задержка = "";
		ИначеЕсли СтрокаПредшественник.Задержка > 0 Тогда
			Задержка = "+" + Формат(СтрокаПредшественник.Задержка, "ЧГ=;ЧН=");
		Иначе
			Задержка = Формат(СтрокаПредшественник.Задержка, "ЧГ=;ЧН=");
		КонецЕсли;
		Надпись = "" + Надпись + "; " + ?(СтрокаТаблицы.Внешний, "#", СтрокаТаблицы.КодСДР) + ТипСвязи + Задержка;
		НадписьПоНомеруСтроки = "" + НадписьПоНомеруСтроки + "; " + ?(СтрокаТаблицы.Внешний, "#", СтрокаТаблицы.НомерСтрокиПроекта) + ТипСвязи + Задержка;
	КонецЦикла;
	Надпись = Сред(Надпись, 3);
	НадписьПоНомеруСтроки = Сред(НадписьПоНомеруСтроки, 3);
	Возврат Новый Структура("Надпись, НадписьПоНомеруСтроки", Надпись, НадписьПоНомеруСтроки);
КонецФункции

&НаКлиенте
Функция ОчиститьИдентификаторРекурсивно(СтрокаТаблицыКопия)
	Для Каждого СтрокаПроекта ИЗ Этаформа.ТаблицаПроектаКопия Цикл
		Если СтрокаПроекта.Родитель = СтрокаТаблицыКопия.УИД Тогда
			СтрокаПроекта.Идентификатор = -1;
			СтрокаСДР = Этаформа.ДеревоСДР.НайтиПоИдентификатору(СтрокаПроекта.ИдентификаторСДР);
			Если СтрокаСДР.ПолучитьЭлементы().Количество() > 0 Тогда
				ОчиститьИдентификаторРекурсивно(СтрокаПроекта);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область ДеревоСДР

&НаСервере
Процедура СформироватьДеревоСДР(УзелДерева, Родитель)
	СтрокиТаблицы = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("Родитель", Родитель));
	Для Каждого СтрокаТаблицы ИЗ СтрокиТаблицы Цикл
		Если СтрокаТаблицы.Внешний Тогда
			Продолжить;
		КонецЕсли;
		НовыйУзел = УзелДерева.ПолучитьЭлементы().Добавить();
		НовыйУзел.КодСДР = СтрокаТаблицы.КодСДР;
		НовыйУзел.НомерСтрокиПроекта = СтрокаТаблицы.НомерСтрокиПроекта;
		НовыйУзел.УИД = СтрокаТаблицы.УИД;
		СтрокаТаблицы.ИдентификаторСДР = НовыйУзел.ПолучитьИдентификатор();
		СформироватьДеревоСДР(НовыйУзел, СтрокаТаблицы.УИД);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтрокуВДеревоСДР(СтрокаТаблицы, ПересчитыватьСДР)
	Если ПустаяСтрока(СтрокаТаблицы.Родитель) Тогда
		ТекущийРодитель = ЭтаФорма.ДеревоСДР;
	Иначе
		СтрокаРодитель = тСоответствиеТаблицыУИД.Получить(СтрокаТаблицы.Родитель);
		ТекущийРодитель = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаРодитель.ИдентификаторСДР);
	КонецЕсли;
	УзелДерева = ТекущийРодитель.ПолучитьЭлементы().Добавить();
	УзелДерева.УИД = СтрокаТаблицы.УИД;
	Если ПересчитыватьСДР Тогда
		//ПересчитатьСДРДерева(ТекущийРодитель, Истина, ЭтаФорма);
	Иначе
		УзелДерева.КодСДР = СтрокаТаблицы.КодСДР;
		УзелДерева.НомерСтрокиПроекта = СтрокаТаблицы.НомерСтрокиПроекта;
		ИндексУзла = ТекущийРодитель.ПолучитьЭлементы().Индекс(УзелДерева);
		Пока ИндексУзла > 0 И ТекущийРодитель.ПолучитьЭлементы().Получить(ИндексУзла - 1).КодСДР > УзелДерева.КодСДР Цикл
			ТекущийРодитель.ПолучитьЭлементы().Сдвинуть(ИндексУзла, -1);
			ИндексУзла = ИндексУзла - 1;
		КонецЦикла;
	КонецЕсли;
	СтрокаТаблицы.ИдентификаторСДР = УзелДерева.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьСтрокуВДеревеСДР(СтрокаТаблицы, ЭтаФорма)
	СтрокаДерева = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
	Если СтрокаДерева = Неопределено Тогда
	Иначе
		ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
		Если ТекущийРодитель = Неопределено Тогда
			ТекущийРодитель = ЭтаФорма.ДеревоСДР;
		Иначе
			ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
		КонецЕсли;
		ТекущийРодитель.ПолучитьЭлементы().Удалить(СтрокаДерева);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПересчитатьСДРДерева(НачальныйУзел, СПодчиненными)
	Если НачальныйУзел = Неопределено Тогда
		НачальныйУзел = ДеревоСДР;
	КонецЕсли;
	Если НачальныйУзел = ДеревоСДР Тогда
		НомерСтрокиПроекта = 0;
	Иначе
		НомерСтрокиПроекта = НачальныйУзел.НомерСтрокиПроекта;
	КонецЕсли;
	Если НачальныйУзел = ДеревоСДР ИЛИ НачальныйУзел.КодСДР = "0" Тогда
		НачальныйСДР = "";
	Иначе
		НачальныйСДР = "" + НачальныйУзел.КодСДР + ".";
	КонецЕсли;
	// в качестве новой	 основы для СДР добавлен реквизит формы "ДеревоСДР", его необходимо поддерживать в актуальности, т.к. только по нему можно понять порядок строк и прочего
	МассивСтрокПересчетПредшественники = Новый Массив;
	МассивСтрокПересчетПоследователи = Новый Массив;
	КодПодчиненного = 1;
	ДлинаПодчиненного = СтрДлина(Формат(НачальныйУзел.ПолучитьЭлементы().Количество(), "ЧН=;ЧГ"));
	Для Каждого ЭлементДерева ИЗ НачальныйУзел.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.КодСДР = "0" И НачальныйУзел.ПолучитьЭлементы().Количество() = 1 Тогда
			КодПодчиненного = 0;
		КонецЕсли;
		НомерСтрокиПроекта = НомерСтрокиПроекта + 1;
		КодСДР = "" + НачальныйСДР + Формат(КодПодчиненного, "ЧГ=;ЧН=;ЧВН=;ЧЦ=" + ДлинаПодчиненного);
		Если ЭлементДерева.КодСДР <> КодСДР ИЛИ ЭлементДерева.НомерСтрокиПроекта <> НомерСтрокиПроекта Тогда 
			ЭлементДерева.КодСДР = КодСДР;
			ЭлементДерева.НомерСтрокиПроекта = НомерСтрокиПроекта;
			СтруктураРеквизитов = Новый Структура("КодСДР, НомерСтрокиПроекта", КодСДР, НомерСтрокиПроекта);
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
			ОписаниеСобытия.Вставить("УИД", ЭлементДерева.УИД);
			ОписаниеСобытия.Вставить("Реквизит", СтруктураРеквизитов);
			ДобавитьСобытиеТаблицы(ОписаниеСобытия);
			
			МассивСтрокПредшественник = тСоответствиеПредшественникиПредшественникУИД.Получить(ЭлементДерева.УИД);
			Если МассивСтрокПредшественник = Неопределено Тогда
				МассивСтрокПредшественник = Новый Массив;
			КонецЕсли;
			
			Для Каждого СтрокаПредшественник ИЗ МассивСтрокПредшественник Цикл
				СтрокаПроекта = тСоответствиеТаблицыУИД.Получить(СтрокаПредшественник.УИД);
				//МассивСтрокПроекта = Новый Массив;
				//МассивСтрокПроекта.Добавить(СтрокаПроекта);
				//Для Каждого СтрокаПроекта ИЗ МассивСтрокПроекта Цикл
					СтрокаПредшественник.КодСДР = КодСДР;
					СтрокаПредшественник.НомерСтрокиПроекта = НомерСтрокиПроекта;
					Для Каждого СтрокаПредшественникПроекта ИЗ СтрокаПроекта.ТаблицаПредшественники Цикл
						Если СтрокаПредшественникПроекта.ПредшественникУИД = ЭлементДерева.УИД Тогда
							СтрокаПредшественникПроекта.КодСДР = КодСДР;
							СтрокаПредшественникПроекта.НомерСтрокиПроекта = НомерСтрокиПроекта;
						КонецЕсли;
					КонецЦикла;
					Если СтрокаПроекта.Идентификатор >= 0 Тогда
						ЭлементДереваПроекта = ДеревоПроекта.НайтиПоИдентификатору(СтрокаПроекта.Идентификатор);
						Если ЭлементДереваПроекта = Неопределено Тогда
							СтрокаПроекта.Идентификатор = -1;
							Сообщение = Новый СообщениеПользователю;
							Сообщение.Текст = "Ошибка отображения предшественника """ + СтрокаПроекта.НомерСтрокиПроекта + """ """ + СтрокаПроекта.НаименованиеЗадачи + """, отображение обновлено.";
							Сообщение.Сообщить();
						Иначе
							Для Каждого СтрокаПредшественникПроекта ИЗ ЭлементДереваПроекта.ТаблицаПредшественники Цикл
								Если СтрокаПредшественникПроекта.ПредшественникУИД = ЭлементДерева.УИД Тогда
									СтрокаПредшественникПроекта.КодСДР = КодСДР;
									СтрокаПредшественникПроекта.НомерСтрокиПроекта = НомерСтрокиПроекта;
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				МассивСтрокПересчетПредшественники.Добавить(СтрокаПредшественник);
			//		СтруктураНадписи = СформироватьНадписьПредшественники(СтрокаПроекта, ЭтаФормаПараметр);
			//		СтруктураИзменения = Новый Структура("НадписьПредшественники, НадписьПредшественникиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
			//		ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
			//		ОписаниеСобытия.Вставить("УИД", СтрокаПроекта.УИД);
			//		ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
			//		ДобавитьСобытиеТаблицы(ОписаниеСобытия, ЭтаФорма);
				//КонецЦикла;
			КонецЦикла;
			
			МассивСтрокПоследователь = тСоответствиеПредшественникиУИД.Получить(ЭлементДерева.УИД); // нашли всех предшественников
			Если МассивСтрокПоследователь = Неопределено Тогда
				МассивСтрокПоследователь = Новый Массив;
			КонецЕсли;
			
			Для Каждого СтрокаПредшественник ИЗ МассивСтрокПоследователь Цикл // для каждого строкапредшественник из найденных
				Если МассивСтрокПересчетПоследователи.Найти(СтрокаПредшественник) = Неопределено Тогда
					МассивСтрокПересчетПоследователи.Добавить(СтрокаПредшественник);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СПодчиненными Тогда
			НомерСтрокиПроекта = ПересчитатьСДРДерева(ЭлементДерева, СПодчиненными);
		КонецЕсли;
		КодПодчиненного = КодПодчиненного + 1;
	КонецЦикла;
	
	Для Каждого СтрокаПредшественник ИЗ МассивСтрокПересчетПредшественники Цикл
		СтрокаПроекта = тСоответствиеТаблицыУИД.Получить(СтрокаПредшественник.УИД);
		
		СтруктураНадписи = СформироватьНадписьПредшественники(СтрокаПроекта);
		СтруктураИзменения = Новый Структура("НадписьПредшественники, НадписьПредшественникиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
		ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
		ОписаниеСобытия.Вставить("УИД", СтрокаПроекта.УИД);
		ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыПрешественник ИЗ МассивСтрокПересчетПоследователи Цикл
		Если СтрокаТаблицыПрешественник = Неопределено ИЛИ СтрокаТаблицыПрешественник.Внешний Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(СтрокаТаблицыПрешественник.ПредшественникУИД);
		Если СтрокаПредшественник = Неопределено ИЛИ СтрокаПредшественник.Внешний Тогда
			Продолжить;
		КонецЕсли;
		СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаПредшественник);
		СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
		ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
		ОписаниеСобытия.Вставить("УИД", СтрокаПредшественник.УИД);
		ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЦикла;
	
	Возврат НомерСтрокиПроекта;
КонецФункции

&НаКлиенте
Функция ПереместитьСтрокуДереваСДРВНовогоРодителя(СтрокаТаблицы, УИДВставки)
	Если СтрокаТаблицы.Родитель = "" Тогда
		ЭлементДереваРодитель= ЭтаФорма.ДеревоСДР;
	Иначе
		Для Каждого СтрокаНовыйРодитель ИЗ ЭтаФорма.ТаблицаПроектаКопия Цикл
			Если СтрокаНовыйРодитель.УИД = СтрокаТаблицы.Родитель Тогда
				ЭлементДереваРодитель= ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаНовыйРодитель.ИдентификаторСДР);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ПустаяСтрока(УИДВставки) Тогда
		НовыйЭлементДерева = ЭлементДереваРодитель.ПолучитьЭлементы().Добавить();
	Иначе
		Для Каждого УзелВставки ИЗ ЭлементДереваРодитель.ПолучитьЭлементы() Цикл
			Если УзелВставки.УИД = УИДВставки Тогда
				НовыйЭлементДерева = ЭлементДереваРодитель.ПолучитьЭлементы().Вставить(ЭлементДереваРодитель.ПолучитьЭлементы().Индекс(УзелВставки) + 1);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НовыйЭлементДерева = Неопределено Тогда
			НовыйЭлементДерева = ЭлементДереваРодитель.ПолучитьЭлементы().Добавить();
		КонецЕсли;
	КонецЕсли;
	
	СтарыйЭлементДерева = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
	ЗаполнитьЗначенияСвойств(НовыйЭлементДерева, СтарыйЭлементДерева);
	СтрокаТаблицы.ИдентификаторСДР = НовыйЭлементДерева.ПолучитьИдентификатор();
	Пока СтарыйЭлементДерева.ПолучитьЭлементы().Количество() > 0 Цикл
		ПодчиненныйЭлементДерева = СтарыйЭлементДерева.ПолучитьЭлементы().Получить(0);
		Для Каждого СтрокаПодчиненный ИЗ ЭтаФорма.ТаблицаПроектаКопия Цикл
			Если СтрокаПодчиненный.УИД = ПодчиненныйЭлементДерева.УИД Тогда
				ПереместитьСтрокуДереваСДРВНовогоРодителя(СтрокаПодчиненный, "");
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СтарыйЭлементДерева.ПолучитьРодителя() = Неопределено Тогда
		ЭтаФорма.ДеревоСДР.ПолучитьЭлементы().Удалить(СтарыйЭлементДерева);
	Иначе
		СтарыйЭлементДерева.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтарыйЭлементДерева);
	КонецЕсли;
				
	Возврат Истина;
КонецФункции

&НаКлиенте
Функция ПереместитьСтрокуДереваСДРВправо(СтрокаТаблицы, НачалиДействие)
	ТекущиеДанные = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
	
	ТекущийРодитель = ?(ТекущиеДанные.ПолучитьРодителя() = Неопределено, ЭтаФорма.ДеревоСДР, ТекущиеДанные.ПолучитьРодителя());
	Индекс = ТекущийРодитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);
	Если Индекс = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НовыйРодитель = ТекущийРодитель.ПолучитьЭлементы().Получить(Индекс - 1);
	ИндексНовогоЭлемента = -1;
	
	РезультатПроверки = "";
	ЭтаФорма.АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПроверитьВозможностьПеремещения(ЭтаФорма.АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтрокаТаблицы.УИД, НовыйРодитель.УИД, РезультатПроверки);
	Если НЕ ПустаяСтрока(РезультатПроверки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "При перемещении задачи """ + ТекущиеДанные.КодСДР + """ №" + ТекущиеДанные.НомерСтрокиПроекта + " возникла ошибка: " + РезультатПроверки;
		Сообщение.Сообщить();
		//ПоказатьПредупреждение(, "При перемещении задачи """ + ТекущиеДанные.КодСДР + """ возникла ошибка: " + РезультатПроверки);
		Возврат Ложь;
	КонецЕсли;
	
	Если Не НачалиДействие Тогда
		НачатьДействие();
		НачалиДействие = Истина;
	КонецЕсли;
	СтарыйРодитель = СтрокаТаблицы.Родитель;
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "Родитель", ?(НовыйРодитель = ДеревоСДР, "", НовыйРодитель.УИД));
	
	ПереместитьСтрокуДереваСДРВНовогоРодителя(СтрокаТаблицы, ?(НовыйРодитель = ДеревоСДР, "", НовыйРодитель.УИД));
	
	НовыйРодительТаблицы = тСоответствиеТаблицыУИД.Получить(НовыйРодитель.УИД);
	Если НовыйРодительТаблицы <> Неопределено Тогда
		ВидГруппа = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(НовыйРодительТаблицы, "ВидЭлемента", ВидГруппа);
	КонецЕсли;
	
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(СтарыйРодитель), " ", СтарыйРодитель);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	Если СтрокиПроекта.Найти(СтрокаТаблицы) <> Неопределено Тогда
		СтрокиПроекта.Удалить(СтрокиПроекта.Найти(СтрокаТаблицы));
	КонецЕсли;
	тСоответствиеТаблицыРодитель.Вставить(СтрокаСоответсвияРодитель, СтрокиПроекта);
	
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(СтрокаТаблицы.Родитель), " ", СтрокаТаблицы.Родитель);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	СтрокиПроекта.Добавить(СтрокаТаблицы);
	тСоответствиеТаблицыРодитель.Вставить(СтрокаСоответсвияРодитель, СтрокиПроекта);
	
	ПересчитатьСДРДерева(ТекущийРодитель, Истина);
	Возврат Истина
КонецФункции

&НаКлиенте
Функция ПереместитьСтрокуДереваСДРВлево(СтрокаТаблицы, НачалиДействие)
	ТекущиеДанные = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если ТекущийРодитель = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли ТекущийРодитель.КодСДР = "0" Тогда
		Возврат Ложь;
	КонецЕсли;
	ИндексТекущий = ТекущийРодитель.ПолучитьЭлементы().Индекс(ТекущиеДанные);
	//НовыйРодитель = ТекущийРодитель.ПолучитьЭлементы().Получить(Индекс - 1);
	НовыйРодитель = ?(ТекущийРодитель.ПолучитьРодителя() = Неопределено, ЭтаФорма.ДеревоСДР, ТекущийРодитель.ПолучитьРодителя());
	ИндексНовогоЭлемента = НовыйРодитель.ПолучитьЭлементы().Индекс(ТекущийРодитель)+1;
	
	Если НЕ НачалиДействие Тогда
		НачатьДействие();
		НачалиДействие = Истина;
	КонецЕсли;
	СтарыйРодитель = СтрокаТаблицы.Родитель;
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "Родитель", ?(НовыйРодитель = ЭтаФорма.ДеревоСДР, "", НовыйРодитель.УИД));
	
	ПереместитьСтрокуДереваСДРВНовогоРодителя(СтрокаТаблицы, СтарыйРодитель);
	
	Если ТекущийРодитель.ПолучитьЭлементы().Количество() = 0 Тогда
		Для Каждого СтрокаРодитель ИЗ ЭтаФорма.ТаблицаПроектаКопия Цикл
			Если СтрокаРодитель.УИД = СтарыйРодитель Тогда
				Если СтрокаРодитель.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
					ВидЗадача = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача");
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаРодитель, "ВидЭлемента", ВидЗадача);
				КонецЕсли;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(СтарыйРодитель), " ", СтарыйРодитель);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	Если СтрокиПроекта.Найти(СтрокаТаблицы) <> Неопределено Тогда
		СтрокиПроекта.Удалить(СтрокиПроекта.Найти(СтрокаТаблицы));
	КонецЕсли;
	тСоответствиеТаблицыРодитель.Вставить(СтрокаСоответсвияРодитель, СтрокиПроекта);
	
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(СтрокаТаблицы.Родитель), " ", СтрокаТаблицы.Родитель);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	СтрокиПроекта.Добавить(СтрокаТаблицы);
	тСоответствиеТаблицыРодитель.Вставить(СтрокаСоответсвияРодитель, СтрокиПроекта);
	
	ПересчитатьСДРДерева(НовыйРодитель, Истина);
	
	Возврат Истина
КонецФункции

&НаКлиенте
Функция ПереместитьСтрокуДереваСДРВверх(СтрокаТаблицы, НачалиДействие)
	ТекущийЭлементДерева = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
	Если СтрокаТаблицы.Родитель = "" Тогда
		ТекущийРодительДерева = ЭтаФорма.ДеревоСДР;
	Иначе
		ТекущийРодительДерева = ТекущийЭлементДерева.ПолучитьРодителя();
	КонецЕсли;
	ТекущийИндекс = ТекущийРодительДерева.ПолучитьЭлементы().Индекс(ТекущийЭлементДерева);
	Если ТекущийИндекс = 0 Тогда
		Успешно = Ложь;
	Иначе
		ТекущийРодительДерева.ПолучитьЭлементы().Сдвинуть(ТекущийИндекс, -1);
		Если НЕ НачалиДействие Тогда
			НачатьДействие();
			НачалиДействие = Истина;
		КонецЕсли;
		//ПересчитатьСДРДерева(ТекущийРодительДерева, Истина, ЭтаФорма);
		ПересчитатьСДРДерева(ТекущийРодительДерева, Истина);
		Успешно = Истина;
	КонецЕсли;
	Возврат Успешно;
КонецФункции

&НаКлиенте
Функция ПереместитьСтрокуДереваСДРВниз(СтрокаТаблицы, НачалиДействие)
	ТекущийЭлементДерева = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
	Если СтрокаТаблицы.Родитель = "" Тогда
		ТекущийРодительДерева = ЭтаФорма.ДеревоСДР;
	Иначе
		ТекущийРодительДерева = ТекущийЭлементДерева.ПолучитьРодителя();
	КонецЕсли;
	ТекущийИндекс = ТекущийРодительДерева.ПолучитьЭлементы().Индекс(ТекущийЭлементДерева);
	Если ТекущийИндекс = ТекущийРодительДерева.ПолучитьЭлементы().Количество() - 1 Тогда
		Успешно = Ложь;
	Иначе
		Если НЕ НачалиДействие Тогда
			НачатьДействие();
			НачалиДействие = Истина;
		КонецЕсли;
		ТекущийРодительДерева.ПолучитьЭлементы().Сдвинуть(ТекущийИндекс, 1);
		//ПересчитатьСДРДерева(ТекущийРодительДерева, Истина, ЭтаФорма);
		ПересчитатьСДРДерева(ТекущийРодительДерева, Истина);
		Успешно = Истина;
	КонецЕсли;
	Возврат Успешно;
КонецФункции

&НаКлиенте
Функция ЗаменитьУИДВДеревеСДР(СтарыйУИД, НовыйУИД, ТекущийУзел)
	Если ТекущийУзел = Неопределено Тогда
		ТекущийУзел = ДеревоСДР;
	КонецЕсли;
	Для Каждого ПодчиненныйУзел ИЗ ТекущийУзел.ПолучитьЭлементы() Цикл
		Если ПодчиненныйУзел.УИД = СтарыйУИД Тогда
			ПодчиненныйУзел.УИД = НовыйУИД;
		КонецЕсли;
		ЗаменитьУИДВДеревеСДР(СтарыйУИД, НовыйУИД, ПодчиненныйУзел);
	КонецЦикла;
КонецФункции

#КонецОбласти

#Область КомандыДиаграммыГанта

&НаКлиенте
Процедура КомандаПоказатьСкрытьДиаграммуГанта(Команда)
	ДиаграммаГантаОтображатьДиаграмму = НЕ ДиаграммаГантаОтображатьДиаграмму;
	Элементы.ГруппаДиаграммаГанта.Видимость = ДиаграммаГантаОтображатьДиаграмму;
	Элементы.ФормаКомандаПоказатьСкрытьДиаграммуГанта.Пометка = ДиаграммаГантаОтображатьДиаграмму;
	Если ДиаграммаГантаОтображатьДиаграмму Тогда
		ОбновитьДиаграммуГанта(ЭтаФорма);
	Иначе
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодДень(Команда)
	УстановитьПериодДиаграммыГанта(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодМесяц(Команда)
	УстановитьПериодДиаграммыГанта(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодНеделя(Команда)
	УстановитьПериодДиаграммыГанта(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура КомандаУстановитьПериодВесьПериод(Команда)
	УстановитьПериодДиаграммыГанта(ЭтаФорма, Команда);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтображатьКритическийПуть(Команда)
	ДиаграммаГантаОтображатьКритическийПуть = НЕ ДиаграммаГантаОтображатьКритическийПуть;
	Элементы.КомандаОтображатьКритическийПуть.Пометка = ДиаграммаГантаОтображатьКритическийПуть;
	ОбновитьДиаграммуГанта(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьДеревоЭкземпляровВерсий(Команда)
	СписокВидов = Новый СписокЗначений;
	ТекущийЭкземпляр = Элементы.ДеревоЭкземпляровВерсийПланов.ТекущиеДанные;
	Если ТекущийЭкземпляр <> Неопределено Тогда 
		ТекущийЭкземпляр = ТекущийЭкземпляр.Ссылка;
	КонецЕсли;
	Для Каждого ЭлементДерева ИЗ ДеревоЭкземпляровВерсийПланов.ПолучитьЭлементы() Цикл
		РазвернутаВетвь = Элементы.ДеревоЭкземпляровВерсийПланов.Развернут(ЭлементДерева.ПолучитьИдентификатор());
		Если РазвернутаВетвь <> Неопределено Тогда 
			СписокВидов.Добавить(ЭлементДерева.ВидВерсииДатаАктуальности, "", РазвернутаВетвь);
		КонецЕсли;
	КонецЦикла;
	СформироватьДеревоЭкземпляровВерсийПланов(Проект);
	Для Каждого ЭлементДерева ИЗ ДеревоЭкземпляровВерсийПланов.ПолучитьЭлементы() Цикл
		ЗначениеСписка = СписокВидов.НайтиПоЗначению(ЭлементДерева.ВидВерсииДатаАктуальности);
		Если ЗначениеСписка = Неопределено ИЛИ ЗначениеСписка.Пометка Тогда
			Элементы.ДеревоЭкземпляровВерсийПланов.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
			Для Каждого СтрокаДерева ИЗ ЭлементДерева.ПолучитьЭлементы() Цикл
				Если СтрокаДерева.Ссылка = ТекущийЭкземпляр Тогда
					Элементы.ДеревоЭкземпляровВерсийПланов.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаДиаграммаГантаСинхронизироватьСДеревом(Команда)
	ДиаграммаГантаСинхронизироватьСДеревом = НЕ ДиаграммаГантаСинхронизироватьСДеревом;
	Элементы.КомандаДиаграммаГантаСинхронизироватьСДеревом.Пометка =  ДиаграммаГантаСинхронизироватьСДеревом;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьСвязиЗадач(Команда)
	ДиаграммаГантаОтображатьСвязиЗадач = НЕ ДиаграммаГантаОтображатьСвязиЗадач;
	Элементы.КомандаОтобразитьСвязиЗадач.Пометка = ДиаграммаГантаОтображатьСвязиЗадач;
	Если ДиаграммаГантаОтображатьСвязиЗадач Тогда
		ОбновитьДиаграммуГанта(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыДиаграммыГанта

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьДиаграммуГанта(ЭтаФорма, УзелДерева, СоответствиеИнтервалов, СоответствиеЭлементов)
	Если ЭтаФорма.ДиаграммаГанта.Серии.Количество() > 0 Тогда
		СерияДиаграммы = ЭтаФорма.ДиаграммаГанта.Серии.Получить(0);
	Иначе
		СерияДиаграммы = ЭтаФорма.ДиаграммаГанта.Серии.Добавить();
	КонецЕсли;
	Если СоответствиеИнтервалов = Неопределено Тогда
		СоответствиеИнтервалов = Новый Соответствие;
	КонецЕсли;
	Для Каждого ЭлементДерева ИЗ УзелДерева.ПолучитьЭлементы() Цикл
		Если ЭлементДерева.ПолучитьРодителя() = Неопределено Тогда
			ТочкаДиаграммы = ЭтаФорма.ДиаграммаГанта.УстановитьТочку(ЭлементДерева.УИД);
		Иначе
			ТочкаДиаграммы = ЭтаФорма.ДиаграммаГанта.УстановитьТочку(ЭлементДерева.УИД, ЭлементДерева.Родитель);
		КонецЕсли;
		#ЕСЛИ НЕ СЕРВЕР ТОГДА
			Если ЭтаФорма.Элементы.ДеревоПроекта.Развернут(ЭлементДерева.ПолучитьИдентификатор()) Тогда
				ЭтаФорма.ДиаграммаГанта.РазвернутьТочку(ТочкаДиаграммы, Истина);
			Иначе
				ЭтаФорма.ДиаграммаГанта.СвернутьТочку(ТочкаДиаграммы, Истина);
			КонецЕсли;
		//КонецЕсли;
		#КОНЕЦЕСЛИ
		ТочкаДиаграммы.Текст = "(" + ЭлементДерева.КодСДР + ") " + ЭлементДерева.НаименованиеЗадачи;
		
		ЗначениеДиаграммы = ЭтаФорма.ДиаграммаГанта.ПолучитьЗначение(ТочкаДиаграммы, СерияДиаграммы);
		Интервал = ЗначениеДиаграммы.Добавить();
		Интервал.Начало = ЭлементДерева.ДатаНачала;
		Интервал.Конец = ЭлементДерева.ДатаОкончания;
		СоответствиеИнтервалов.Вставить(ЭлементДерева.УИД, Интервал);
		СоответствиеЭлементов.Вставить(ЭлементДерева.УИД, ЭлементДерева);
		
		// Цвета
		ЦветНебесноСиний = Новый Цвет(135, 206, 250);
		ЦветБаклажан = Новый Цвет(123, 104, 238);
		ЦветГрифельноСерый = Новый Цвет(112, 128, 144);
		
		Если ЭлементДерева.ПолучитьЭлементы().Количество() > 0 И ЭтаФорма.ДиаграммаГантаОтображатьКритическийПуть И ЭлементДерева.КритическийПуть Тогда
			ТочкаДиаграммы.Шрифт = Новый Шрифт(ТочкаДиаграммы.Шрифт,,, Истина);
			ТочкаДиаграммы.Цвет = WebЦвета.Красный
		ИначеЕсли ЭлементДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ТочкаДиаграммы.Шрифт = Новый Шрифт(ТочкаДиаграммы.Шрифт,,, Истина);
			ТочкаДиаграммы.Цвет = ЦветГрифельноСерый
		ИначеЕсли ЭтаФорма.ДиаграммаГантаОтображатьКритическийПуть И ЭлементДерева.КритическийПуть Тогда
			ТочкаДиаграммы.Цвет = WebЦвета.Красный;
		ИначеЕсли ЭлементДерева.Длительность > 0 Тогда
			//ТочкаДиаграммы.Цвет = WebЦвета.СинийСоСтальнымОттенком;
			ТочкаДиаграммы.Цвет = ЦветНебесноСиний;
		Иначе
			ТочкаДиаграммы.Цвет = ЦветБаклажан;
		КонецЕсли;
		Интервал.Цвет = Интервал.Значение.Точка.Цвет;
		ТочкаДиаграммы.Картинка = ПолучитьКартинку(ЭлементДерева.ВидЭлемента);
		
		СформироватьДиаграммуГанта(ЭтаФорма, ЭлементДерева, СоответствиеИнтервалов, СоответствиеЭлементов);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКартинку(ВидЭлемента)
	ТипЗадачи = ВидЭлемента.Картинка;
	Возврат грзнтФункцииПиктограмСервер.ПолучитьКартинку(ТипЗадачи);
КонецФункции

&НаКлиенте
Процедура МасштабДиаграммыГантаПриИзменении(Элемент)
	Если МасштабДиаграммыГанта > 0 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.КратностьПериодическогоВарианта = МасштабДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановитьПериодДиаграммыГанта(ЭтаФорма, Команда = Неопределено) 
	
	Элементы = ЭтаФорма.Элементы;
	ДиаграммаГанта = ЭтаФорма.ДиаграммаГанта;
	МасштабДиаграммыГанта = ЭтаФорма.МасштабДиаграммыГанта;

	ИмяКоманды = Неопределено;
	СброситьМасштаб = Ложь;
	ИмяПериода = Неопределено;
	
	Если Команда <> Неопределено Тогда	
		ИмяКоманды = Команда.Имя;
		ПериодДиаграммыГанта = СтрЗаменить(ИмяКоманды, "Команда", "");
	    ЭтаФорма.ПериодДиаграммыГанта = ПериодДиаграммыГанта;
	Иначе
		Если НЕ ПустаяСтрока(ЭтаФорма.ПериодДиаграммыГанта) Тогда
			ПериодДиаграммыГанта = СокрЛП(ЭтаФорма.ПериодДиаграммыГанта);
		Иначе
			ПериодДиаграммыГанта = СокрЛП(СтрЗаменить(ЭтаФорма.Команды.КомандаУстановитьПериодВесьПериод.Имя, "Команда", ""));
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Элемент ИЗ Элементы.ГруппаКоманднаяПанельДиаграммыГанта.ПодчиненныеЭлементы Цикл
		Если Найти(Элемент.Имя, "Уровень") = 0 Тогда
			Продолжить;
		КонецЕсли;
		ПериоЭлемента = СтрЗаменить(Элемент.Имя, "Команда", "");
		Если ПериоЭлемента = ПериодДиаграммыГанта Тогда
			Элемент.Пометка = Истина;
		Иначе
			Элемент.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если ПериодДиаграммыГанта = "УстановитьПериодДень" Тогда
		Период = ТипЕдиницыШкалыВремени.День;
	ИначеЕсли ПериодДиаграммыГанта = "УстановитьПериодНеделя" Тогда
		Период = ТипЕдиницыШкалыВремени.Неделя;
	ИначеЕсли ПериодДиаграммыГанта = "УстановитьПериодМесяц" Тогда
		Период = ТипЕдиницыШкалыВремени.Месяц;
	ИначеЕсли ПериодДиаграммыГанта = "УстановитьПериодВесьПериод" Тогда
		СброситьМасштаб = Истина;
		//ЭтаФорма.УстановитьМасштабДГВсеДанные = Истина;
	КонецЕсли;
	
	УстановитьПериодГанта(ДиаграммаГанта, Период, МасштабДиаграммыГанта, СброситьМасштаб, , ЭтаФорма);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПериодГанта(Диаграмма,
								 Период = Неопределено,
								 Регулятор = Неопределено,
								 СброситьМасштаб = Ложь,
								 ГруппироватьЭлементыШкалы = Истина,
								 ЭтаФорма)

	Если Период = Неопределено Тогда
		Период = ТипЕдиницыШкалыВремени.День;
	КонецЕсли;
	
	Диаграмма.Обновление = Ложь;
	ВыделитьВыходныеВДиаграмме(Диаграмма);
	
	Шкала = Диаграмма.ОбластьПостроения.ШкалаВремени;
	
	Если ГруппироватьЭлементыШкалы Тогда				
		
		ТекЕдиница = Неопределено;			
		сч = Шкала.Элементы.Количество() - 1;
	
		Пока сч >= 0 Цикл		
			Если ТекЕдиница = Неопределено Тогда
				Если НЕ СброситьМасштаб Тогда
					ТекЕдиница = Период;
				Иначе
					ТекЕдиница = ТипЕдиницыШкалыВремени.Месяц;
				КонецЕсли;
			Иначе
				ТекЕдиница = ПолучитьСтаршийПериодДляШкалы(ТекЕдиница);						
			КонецЕсли;			
			ЭлементШкалы = Шкала.Элементы[сч];
			ЭлементШкалы.Единица = ТекЕдиница;
			сч = сч -1;		
		КонецЦикла;
	Иначе
		Для каждого Элемент Из Шкала.Элементы Цикл						
			Если НЕ СброситьМасштаб Тогда      
				Элемент.Единица = Период;		
			Иначе
				Элемент.Единица = ТипЕдиницыШкалыВремени.Месяц; // Значение по умолчанию
			КонецЕсли; 	
		КонецЦикла; 
	КонецЕсли;
	
	Если НЕ СброситьМасштаб Тогда      
		Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		Диаграмма.КратностьПериодическогоВарианта = 10; // Эмпирическая величина
		Диаграмма.ЕдиницаПериодическогоВарианта = Период;
	Иначе
		Диаграмма.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
		Диаграмма.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные; 				
	КонецЕсли;     	
	
	Если НЕ Регулятор = Неопределено Тогда      
		Если НЕ СброситьМасштаб Тогда      
			Регулятор = Диаграмма.КратностьПериодическогоВарианта; 	
		Иначе
			Регулятор = 10;
		КонецЕсли; 		
	КонецЕсли; 
	
	Диаграмма.Обновление = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтаршийПериодДляШкалы(Период)
		
	Если Период = ТипЕдиницыШкалыВремени.Секунда Тогда
		ТекПериод = ТипЕдиницыШкалыВремени.Минута;
	ИначеЕсли Период = ТипЕдиницыШкалыВремени.Минута Тогда
		ТекПериод = ТипЕдиницыШкалыВремени.Час;
	ИначеЕсли Период = ТипЕдиницыШкалыВремени.Час Тогда
		ТекПериод = ТипЕдиницыШкалыВремени.День;
	ИначеЕсли Период = ТипЕдиницыШкалыВремени.День Тогда
		ТекПериод = ТипЕдиницыШкалыВремени.Месяц;
	ИначеЕсли Период = ТипЕдиницыШкалыВремени.Неделя Тогда
		ТекПериод = ТипЕдиницыШкалыВремени.Месяц;
	ИначеЕсли Период = ТипЕдиницыШкалыВремени.Месяц Тогда
		ТекПериод = ТипЕдиницыШкалыВремени.Год;
	ИначеЕсли Период = ТипЕдиницыШкалыВремени.Квартал Тогда
		ТекПериод = ТипЕдиницыШкалыВремени.Год;
	Иначе
		ТекПериод = Период;
	КонецЕсли;
	
	Возврат ТекПериод;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ВыделитьВыходныеВДиаграмме(Диаграмма) Экспорт
	
	// Выделить выходные дни другим цветом фона. 
	
	Неделя = 3600 * 24 * 7; 
	Выходные = 3600 * 48; 
	ТекущаяДата = Диаграмма.НачалоПолногоИнтервала;
	МаксимальнаяДата = Диаграмма.КонецПолногоИнтервала; 
	
	ИнтервалыФона = Диаграмма.ИнтервалыФона;
	Пока ТекущаяДата <= МаксимальнаяДата Цикл
		Конец = НачалоНедели(ТекущаяДата);     
		Начало = Конец - Выходные;     
		ИнтервалыФона.Добавить(Начало, Конец);   
		ТекущаяДата = ТекущаяДата + Неделя; 
	КонецЦикла;
 
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСвязиЗадач(ЭтаФорма, СоответствиеИнтервалов, СоответствиеЭлементов)
	Для Каждого СтрокаПредшественник ИЗ ЭтаФорма.ТаблицаПредшественники Цикл
		Интервал = СоответствиеИнтервалов[СтрокаПредшественник.УИД];
		Если Интервал = Неопределено Тогда
			Интервал = Неопределено;
		КонецЕсли;
		ИнтервалСвязь = СоответствиеИнтервалов[СтрокаПредшественник.ПредшественникУИД];
		Если ИнтервалСвязь <> Неопределено Тогда
			Связь = ИнтервалСвязь.Добавить(Интервал);
			
			ЭлементСвязь = СоответствиеЭлементов[СтрокаПредшественник.ПредшественникУИД];
			Элемент = СоответствиеЭлементов[СтрокаПредшественник.УИД];
			Если ЭтаФорма.ДиаграммаГантаОтображатьКритическийПуть И ЭлементСвязь.КритическийПуть И Элемент.КритическийПуть Тогда
				Связь.Цвет = WebЦвета.Красный;
			Иначе
				Связь.Цвет = WebЦвета.Синий;
			КонецЕсли;
			
			Если СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоНачало") Тогда
				Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
			ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоОкончание") Тогда
				Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоКонец;
			ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало") Тогда
				Связь.ТипСвязи = ТипСвязиДиаграммыГанта.КонецНачало;
			ИначеЕсли СтрокаПредшественник.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеОкончание") Тогда
				Связь.ТипСвязи = ТипСвязиДиаграммыГанта.КонецКонец;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДиаграммуГанта(ЭтаФорма)
	Если НЕ ЭтаФорма.ДиаграммаГантаОтображатьДиаграмму Тогда
		Возврат
	КонецЕсли;
	ЭтаФорма.ДиаграммаГанта.ОтображатьЛегенду = Ложь;
	ЭтаФорма.ДиаграммаГанта.ОбластьПостроения.Право = 1;
	ЭтаФорма.ДиаграммаГанта.ОтображатьЗаголовок = Ложь;
	ЭтаФорма.ДиаграммаГанта.ОтображатьПустыеЗначения = Истина;
	ЭтаФорма.ДиаграммаГанта.Обновление = Ложь;
	//ДиаграммаГанта.ОтображениеИнтервала = ОтображениеИнтервалаДиаграммыГанта.Плоский;
	//ДиаграммаГанта.Окантовка = Истина;
	//ДиаграммаГанта.ОтображениеТекстаЗначения = ОтображениеТекстаЗначенияДиаграммыГанта.Право;
	
	ЭтаФорма.ПериодДиаграммыГанта = "УстановитьПериодВесьПериод";
	
	ЭтаФорма.ДиаграммаГанта.Точки.Очистить();
	СоответствиеИнтервалов = Новый Соответствие;
	СоответствиеЭлементов = Новый Соответствие;
	СформироватьДиаграммуГанта(ЭтаФорма, ЭтаФорма.ДеревоПроекта, СоответствиеИнтервалов, СоответствиеЭлементов);
	Если ЭтаФорма.ДиаграммаГантаОтображатьСвязиЗадач Тогда
		ОтобразитьСвязиЗадач(ЭтаФорма, СоответствиеИнтервалов, СоответствиеЭлементов);
	КонецЕсли;
	
	#ЕСЛИ СЕРВЕР ТОГДА
	//Для Каждого ЭлементДерева ИЗ ДеревоПроекта.ПолучитьЭлементы() Цикл
	//	ТочкаДиаграммы = ЭтаФорма.ДиаграммаГанта.УстановитьТочку(ЭлементДерева.УИД);
	//	ЭтаФорма.ДиаграммаГанта.РазвернутьТочку(ТочкаДиаграммы, Истина);
	//КонецЦикла;
	Для Каждого ТочкаДиаграммы ИЗ ЭтаФорма.ДиаграммаГанта.Точки Цикл
		ЭтаФорма.ДиаграммаГанта.РазвернутьТочку(ТочкаДиаграммы, Истина);
	КонецЦикла;
	#ИНАЧЕ
	//Для Каждого ТочкаДиаграммы ИЗ ЭтаФорма.ДиаграммаГанта.Точки Цикл
	//	СтрокаТаблицы = ЭтаФорма.ТаблицаПроектаКопия.НайтиСТроки(Новый Структура("УИД", ТочкаДиаграммы.Значение));
	//	Если СтрокаТаблицы.Количество() > 0 Тогда
	//		Если ЭтаФорма.Элементы.ДеревоПроекта.Развернут(СтрокаТаблицы.Получить(0).Идентификатор) Тогда
	//			ЭтаФорма.ДиаграммаГанта.РазвернутьТочку(ТочкаДиаграммы, Истина);
	//		Иначе
	//			ЭтаФорма.ДиаграммаГанта.СвернутьТочку(ТочкаДиаграммы, Истина);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	#КОНЕЦЕСЛИ
	
	ЭтаФорма.ДиаграммаГанта.Обновление = Истина;
	#Если НЕ ВебКлиент Тогда
		Если ЭтаФорма.ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Количество() = 1 Тогда
			ЭтаФорма.ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы.Добавить();
		КонецЕсли;
	#КонецЕсли
	УстановитьПериодДиаграммыГанта(ЭтаФорма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВернутьМаксимальныйУровень(УзелДерева, ТекущийУровень)
	максУровень = ТекущийУровень;
	Для Каждого ЭлементДерева ИЗ УзелДерева.ПолучитьЭлементы() Цикл
		тУровень = ВернутьМаксимальныйУровень(ЭлементДерева, ТекущийУровень + 1);
		Если максУровень < тУровень Тогда 
			максУровень = тУровень;
		КонецЕсли;
	КонецЦикла;
	Возврат максУровень;
КонецФункции

#КонецОбласти

#Область РекурсивныйПересчет

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПостроитьТаблицыРасчета(ТаблицаСроков, ТаблицаПредшественники, ДатаНачалаПроекта, КалендарьПроекта, СпособПланирования, УникальныйИдентификатор, РежимУчитыватьФакт) Экспорт
	
	ТаблицаЗадач = ТаблицаСроков.Скопировать();
	ТаблицаЗадач.Колонки.Добавить("Предшественники", Новый ОписаниеТипов("Массив"));
	ТаблицаЗадач.Колонки.Добавить("Последователи", Новый ОписаниеТипов("Массив"));
	ТаблицаЗадач.Колонки.Добавить("СтрокаРодитель");
	ТаблицаЗадач.Колонки.Добавить("хРДН", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("хРДО", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("хПДН", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("хПДО", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("хДлительность", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("хДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("хДатаОкончания", Новый ОписаниеТипов("Дата"));
	Если ТаблицаЗадач.Колонки.Найти("ДлительностьВыделено") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("ДлительностьВыделено", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("ДатаНачалаВыделено") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("ДатаНачалаВыделено", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("ДатаОкончанияВыделено") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("ДатаОкончанияВыделено", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	ТаблицаЗадач.Колонки.Добавить("НулевойУровень", Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("ПоследнийУровень", Новый ОписаниеТипов("Булево"));
	
	ТаблицаЗадач.Колонки.Добавить("ТипОграниченияЧисло", Новый ОписаниеТипов("Число"));
	
	Если ТаблицаЗадач.Колонки.Найти("КонтрактныйДатаНачала") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("КонтрактныйДатаНачала", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("КонтрактныйДатаОкончания") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("КонтрактныйДатаОкончания", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("КонтрактныйДатаНачалаОтклонение") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("КонтрактныйДатаНачалаОтклонение", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("КонтрактныйДатаОкончанияОтклонение") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("КонтрактныйДатаОкончанияОтклонение", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("АктуализацияДатаНачалаОтклонение") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("АктуализацияДатаНачалаОтклонение", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("АктуализацияДатаОкончанияОтклонение") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("АктуализацияДатаОкончанияОтклонение", Новый ОписаниеТипов("Число"));
	КонецЕсли;
	
	ТаблицаЗадач.Индексы.Добавить("УИД");
	ТаблицаЗадач.Индексы.Добавить("Родитель");
	
	Если ТаблицаПредшественники.Колонки.Найти("Задача") <> Неопределено Тогда
		ТаблицаПредшественники.Колонки.Удалить(ТаблицаПредшественники.Колонки.Найти("Задача"));
	КонецЕсли;
	Если ТаблицаПредшественники.Колонки.Найти("Предшественник") <> Неопределено Тогда
		ТаблицаПредшественники.Колонки.Удалить(ТаблицаПредшественники.Колонки.Найти("Предшественник"));
	КонецЕсли;
	Если ТаблицаПредшественники.Колонки.Найти("ГруппаЗадач") = Неопределено Тогда
		ТаблицаПредшественники.Колонки.Добавить("ГруппаЗадач", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("ФактическаяДатаНачала") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("ФактическаяДатаНачала", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	Если ТаблицаЗадач.Колонки.Найти("ФактическаяДатаОкончания") = Неопределено Тогда
		ТаблицаЗадач.Колонки.Добавить("ФактическаяДатаОкончания", Новый ОписаниеТипов("Булево"));
	КонецЕсли;
	
	ТекущаяТаблицаСвязей = ТаблицаПредшественники.Скопировать();
	
	
	ПолнаяТаблицаСвязей = ТаблицаПредшественники.СкопироватьКолонки();
	
	ПолнаяТаблицаСвязей.Колонки.Добавить("ТипСвязиЧисло");
	ПолнаяТаблицаСвязей.Колонки.Добавить("СтрокаЗадача");
	ПолнаяТаблицаСвязей.Колонки.Добавить("СтрокаПредшественник");
	ПолнаяТаблицаСвязей.Колонки.Добавить("РД", Новый ОписаниеТипов("Дата"));
	ПолнаяТаблицаСвязей.Колонки.Добавить("ПД", Новый ОписаниеТипов("Дата"));
	ПолнаяТаблицаСвязей.Колонки.Добавить("Рассчитан", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ПолнаяТаблицаСвязей.Колонки.Добавить("РассчитанОбратный", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	СоответствиеСвязей = Новый Соответствие;
	СоответствиеСвязей.Вставить(ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоНачало"), 1);
	СоответствиеСвязей.Вставить(ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоОкончание"), 2);
	СоответствиеСвязей.Вставить(ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало"), 3);
	СоответствиеСвязей.Вставить(ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеОкончание"), 4);
	
	Для Каждого СтрокаПредшественник ИЗ ТаблицаПредшественники Цикл
		// Если у нас группа зависит от кого-то
		СтрокиРодитель = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", СтрокаПредшественник.УИД));
		Если СтрокиРодитель.Количество() > 0 Тогда
			Для Каждого СтрокаРодитель ИЗ СтрокиРодитель Цикл
				НоваяСтрокаПредшественник = ТаблицаПредшественники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПредшественник, СтрокаПредшественник);
				НоваяСтрокаПредшественник.УИД = СтрокаРодитель.УИД;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		// Если кто-то зависит от группы
		СтрокиРодитель = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", СтрокаПредшественник.ПредшественникУИД));
		Если СтрокиРодитель.Количество() > 0 Тогда
			ГруппаЗадач = ?(ПустаяСтрока(СтрокаПредшественник.ГруппаЗадач), СтрокаПредшественник.ПредшественникУИД, СтрокаПредшественник.ГруппаЗадач);
			Для Каждого СтрокаРодитель ИЗ СтрокиРодитель Цикл
				НоваяСтрокаПредшественник = ТаблицаПредшественники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПредшественник, СтрокаПредшественник);
				НоваяСтрокаПредшественник.ПредшественникУИД = СтрокаРодитель.УИД;
				НоваяСтрокаПредшественник.ГруппаЗадач = ГруппаЗадач;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		СтрокаПолнойТаблицы = ПолнаяТаблицаСвязей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПолнойТаблицы, СтрокаПредшественник, , "НаименованиеЗадачи");
		СтрокаЗадача = ТаблицаЗадач.Найти(СтрокаПолнойТаблицы.УИД, "УИД");
		СтрокаПолнойТаблицы.СтрокаЗадача = СтрокаЗадача;
		СтрокаЗадача = ТаблицаЗадач.Найти(СтрокаПолнойТаблицы.ПредшественникУИД, "УИД");
		СтрокаПолнойТаблицы.СтрокаПредшественник = СтрокаЗадача;
		СтрокаПолнойТаблицы.Рассчитан = 1;
		
		СтрокаПолнойТаблицы.ТипСвязиЧисло = СоответствиеСвязей[СтрокаПолнойТаблицы.ТипСвязи];
		Если СтрокаПолнойТаблицы.ТипСвязиЧисло = 1 Тогда
			//СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.РДН;
			СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.ДатаНачала;
			СтрокаПолнойТаблицы.ПД = СтрокаПолнойТаблицы.СтрокаПредшественник.ПДН;
		ИначеЕсли СтрокаПолнойТаблицы.ТипСвязиЧисло = 2 Тогда
			//СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.РДО;
			СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.ДатаОкончания;
			СтрокаПолнойТаблицы.ПД = СтрокаПолнойТаблицы.СтрокаПредшественник.ПДН;
		ИначеЕсли СтрокаПолнойТаблицы.ТипСвязиЧисло = 3 Тогда
			//СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.РДН;
			СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.ДатаНачала;
			СтрокаПолнойТаблицы.ПД = СтрокаПолнойТаблицы.СтрокаПредшественник.ПДО;
		ИначеЕсли СтрокаПолнойТаблицы.ТипСвязиЧисло = 4 Тогда
			//СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.РДО;
			СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.ДатаОкончания;
			СтрокаПолнойТаблицы.ПД = СтрокаПолнойТаблицы.СтрокаПредшественник.ПДО;
		КонецЕсли;
		
		СтрокаПолнойТаблицы.СтрокаЗадача.Предшественники.Добавить(СтрокаПолнойТаблицы);
		СтрокаПолнойТаблицы.СтрокаПредшественник.Последователи.Добавить(СтрокаПолнойТаблицы);
	КонецЦикла;
	
	ПолнаяТаблицаСвязей.Индексы.Добавить("УИД");
	ПолнаяТаблицаСвязей.Индексы.Добавить("ПредшественникУИД");
	//ПолнаяТаблицаСвязей.Индексы.Добавить("ПредшественникУИД, РассчитанОбратный");
	//ПолнаяТаблицаСвязей.Индексы.Добавить("УИД, Рассчитан");
	
	СоответствиеОграничения = Новый Соответствие;
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноПозже"), 1);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноРаньше"), 2);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеПозднее"), 3);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеРанее"), 4);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеПозднее"), 5);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеРанее"), 6);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало"), 7);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеОкончание"), 8);
	
	ЕстьОшибкиРасчетаСроков = Ложь;
	Если ТаблицаЗадач.Количество() > 0 И ДатаНачалаПроекта = Дата(1,1,1) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задана плановая дата начала старта проекта для открытого экземпляра версии. Расчет сроков невозможен.";
		Сообщение.Сообщить();
		ЕстьОшибкиРасчетаСроков = Истина;
	КонецЕсли;
	Если ТаблицаЗадач.Количество() > 0 И НЕ ЗначениеЗаполнено(КалендарьПроекта) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задан календарь проекта для открытого экземпляра версии. Расчет сроков невозможен.";
		Сообщение.Сообщить();
		ЕстьОшибкиРасчетаСроков = Истина;
	КонецЕсли;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибкиРасчетаСроков", ЕстьОшибкиРасчетаСроков);
	
	ПустаяДата = Дата(1,1,1);
	Для Каждого СтрокаЗадача ИЗ ТаблицаЗадач Цикл
		Если СтрокаЗадача.ФактическаяДатаНачала <> ПустаяДата И РежимУчитыватьФакт Тогда
			СтрокаЗадача.РучнойВвод = Истина;
			СтрокаЗадача.ДатаНачала = СтрокаЗадача.ФактическаяДатаНачала;
			КалендарьЗадачи = ?(СтрокаЗадача.Календарь.Пустая(), КалендарьПроекта, СтрокаЗадача.Календарь);
			СтрокаЗадача.ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.ДатаНачала, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0, Ложь, СтруктураПараметров);
		КонецЕсли;
		Если СтрокаЗадача.ФактическаяДатаОкончания <> ПустаяДата И РежимУчитыватьФакт Тогда
			СтрокаЗадача.РучнойВвод = Истина;
			СтрокаЗадача.ДатаОкончания = СтрокаЗадача.ФактическаяДатаОкончания;
		КонецЕсли;
		Если СтрокаЗадача.Последователи.Количество() > 0 И СтрокаЗадача.Предшественники.Количество() = 0 Тогда
			СтрокаЗадача.НулевойУровень = Истина;
		КонецЕсли;
		Если СтрокаЗадача.Последователи.Количество() = 0 И СтрокаЗадача.Предшественники.Количество() > 0 Тогда
			СтрокаЗадача.ПоследнийУровень = Истина;
		КонецЕсли;
		Если СтрокаЗадача.Последователи.Количество() = 0 И СтрокаЗадача.Предшественники.Количество() = 0 Тогда
			Если ТаблицаЗадач.Найти(СтрокаЗадача.УИД, "Родитель") = Неопределено Тогда
				СтрокаЗадача.НулевойУровень = Истина;
				СтрокаЗадача.ПоследнийУровень = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаЗадача.ТипОграниченияЧисло = СоответствиеОграничения[СтрокаЗадача.ТипОграничения];
		
		СтрокаЗадача.хРДН = СтрокаЗадача.РДН;
		СтрокаЗадача.хРДО = СтрокаЗадача.РДО;
		СтрокаЗадача.хПДН = СтрокаЗадача.ПДН;
		СтрокаЗадача.хПДО = СтрокаЗадача.ПДО;
		СтрокаЗадача.хДлительность = СтрокаЗадача.Длительность;
		СтрокаЗадача.хДатаНачала = СтрокаЗадача.ДатаНачала;
		СтрокаЗадача.хДатаОкончания = СтрокаЗадача.ДатаОкончания;
		
		Если НЕ ПустаяСтрока(СтрокаЗадача.Родитель) Тогда
			СтрокаЗадача.СтрокаРодитель = ТаблицаЗадач.Найти(СтрокаЗадача.Родитель, "УИД");
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗадач.Колонки.Добавить("ПометкаОбошли");
	ТаблицаЗадач.ЗаполнитьЗначения(0, "ПометкаОбошли");
	Для К = 0 По ТаблицаЗадач.Количество() - 1 Цикл
		Если РекурсивныйПересчетНайтиЦиклическиеСвязи(К, ТаблицаЗадач, ПолнаяТаблицаСвязей) Тогда
			СписокЗадач = "Для задач с кодами СДР обнаружена циклическая связь. Удалите связи, сохраните и переоткройте проект.";
			Для Каждого СтрокаКопии ИЗ ТаблицаЗадач Цикл
				Если СтрокаКопии.ПометкаОбошли = 1 Тогда
					СписокЗадач = СписокЗадач + Символы.ПС + СтрокаКопии.КодСДР;
				КонецЕсли;
			КонецЦикла;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СписокЗадач;
			Сообщение.Сообщить();
			Возврат "";
		КонецЕсли;
	КонецЦикла;
	ТаблицаЗадач.Колонки.Удалить(ТаблицаЗадач.Колонки.ПометкаОбошли);
	
	ТаблицаЗадач.ЗаполнитьЗначения(0, "Уровень");
	МассивТекущийУровень = ТаблицаЗадач.НайтиСтроки(Новый Структура("НулевойУровень", Истина));
	ТекущийУровень = 0;
	Пока МассивТекущийУровень.Количество() > 0 Цикл
		Для Каждого ЭлементТекущийУровень ИЗ МассивТекущийУровень Цикл
			Для Каждого СтрокаПоследователь ИЗ ЭлементТекущийУровень.Последователи Цикл
				Если СтрокаПоследователь.СтрокаЗадача.Уровень <= ТекущийУровень Тогда
					СтрокаПоследователь.СтрокаЗадача.Уровень = ТекущийУровень + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТекущийУровень = ТекущийУровень + 1;
		МассивТекущийУровень = ТаблицаЗадач.НайтиСтроки(Новый Структура("Уровень", ТекущийУровень));
	КонецЦикла;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", ДатаНачалаПроекта);
	СтруктураТаблиц.Вставить("КалендарьПроекта", КалендарьПроекта);
	СтруктураТаблиц.Вставить("СпособПланирования", СпособПланирования);
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("УчитыватьФакт", РежимУчитыватьФакт);
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	Возврат АдресХранилища;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПерестроитьПолнуюТаблицуСвязей(ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей, РежимУчитыватьФакт, КалендарьПроекта, СтруктураПараметров)
	ТаблицаЗадач.Колонки.Удалить(ТаблицаЗадач.Колонки.Найти("Предшественники"));
	ТаблицаЗадач.Колонки.Удалить(ТаблицаЗадач.Колонки.Найти("Последователи"));
	
	ТаблицаЗадач.Колонки.Добавить("Предшественники", Новый ОписаниеТипов("Массив"));
	ТаблицаЗадач.Колонки.Добавить("Последователи", Новый ОписаниеТипов("Массив"));
	
	Если ТекущаяТаблицаСвязей.Колонки.Найти("ГруппаЗадач") = Неопределено Тогда
		ТекущаяТаблицаСвязей.Колонки.Добавить("ГруппаЗадач", Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	ТаблицаПредшественники = ТекущаяТаблицаСвязей.Скопировать();
	
	ПолнаяТаблицаСвязей.Очистить();
	ПолнаяТаблицаСвязей = ТекущаяТаблицаСвязей.СкопироватьКолонки();
	
	ПолнаяТаблицаСвязей.Колонки.Добавить("ТипСвязиЧисло");
	ПолнаяТаблицаСвязей.Колонки.Добавить("СтрокаЗадача");
	ПолнаяТаблицаСвязей.Колонки.Добавить("СтрокаПредшественник");
	ПолнаяТаблицаСвязей.Колонки.Добавить("РД", Новый ОписаниеТипов("Дата"));
	ПолнаяТаблицаСвязей.Колонки.Добавить("ПД", Новый ОписаниеТипов("Дата"));
	ПолнаяТаблицаСвязей.Колонки.Добавить("Рассчитан", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	ПолнаяТаблицаСвязей.Колонки.Добавить("РассчитанОбратный", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	
	СоответствиеСвязей = Новый Соответствие;
	СоответствиеСвязей.Вставить(ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоНачало"), 1);
	СоответствиеСвязей.Вставить(ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоОкончание"), 2);
	СоответствиеСвязей.Вставить(ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало"), 3);
	СоответствиеСвязей.Вставить(ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеОкончание"), 4);
	
	Для Каждого СтрокаПредшественник ИЗ ТаблицаПредшественники Цикл
		Если ПустаяСтрока(СтрокаПредшественник.УИД) ИЛИ ПустаяСтрока(СтрокаПредшественник.ПредшественникУИД) Тогда
			Продолжить;
		КонецЕсли;
		// Если у нас группа зависит от кого-то
		СтрокиРодитель = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", СтрокаПредшественник.УИД));
		Если СтрокиРодитель.Количество() > 0 Тогда
			Для Каждого СтрокаРодитель ИЗ СтрокиРодитель Цикл
				НоваяСтрокаПредшественник = ТаблицаПредшественники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПредшественник, СтрокаПредшественник);
				НоваяСтрокаПредшественник.УИД = СтрокаРодитель.УИД;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		// Если кто-то зависит от группы
		СтрокиРодитель = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", СтрокаПредшественник.ПредшественникУИД));
		Если СтрокиРодитель.Количество() > 0 Тогда
			ГруппаЗадач = ?(ПустаяСтрока(СтрокаПредшественник.ГруппаЗадач), СтрокаПредшественник.ПредшественникУИД, СтрокаПредшественник.ГруппаЗадач);
			Для Каждого СтрокаРодитель ИЗ СтрокиРодитель Цикл
				НоваяСтрокаПредшественник = ТаблицаПредшественники.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПредшественник, СтрокаПредшественник, "УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи");
				НоваяСтрокаПредшественник.ПредшественникУИД = СтрокаРодитель.УИД;
				НоваяСтрокаПредшественник.ГруппаЗадач = ГруппаЗадач;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		СтрокаПолнойТаблицы = ПолнаяТаблицаСвязей.Добавить();
		//ЗаполнитьЗначенияСвойств(СтрокаПолнойТаблицы, СтрокаПредшественник, , "НаименованиеЗадачи");
		ЗаполнитьЗначенияСвойств(СтрокаПолнойТаблицы, СтрокаПредшественник);
		
		СтрокаЗадача = ТаблицаЗадач.Найти(СтрокаПолнойТаблицы.УИД, "УИД");
		Если СтрокаЗадача = Неопределено Тогда
			ПолнаяТаблицаСвязей.Удалить(СтрокаПолнойТаблицы);
			Продолжить;
		КонецЕсли;
		СтрокаПолнойТаблицы.СтрокаЗадача = СтрокаЗадача;
		СтрокаЗадача = ТаблицаЗадач.Найти(СтрокаПолнойТаблицы.ПредшественникУИД, "УИД");
		Если СтрокаЗадача = Неопределено Тогда
			ПолнаяТаблицаСвязей.Удалить(СтрокаПолнойТаблицы);
			Продолжить;
		КонецЕсли;
		СтрокаПолнойТаблицы.СтрокаПредшественник = СтрокаЗадача;
		СтрокаПолнойТаблицы.Рассчитан = 1;
		
		СтрокаПолнойТаблицы.ТипСвязиЧисло = СоответствиеСвязей[СтрокаПолнойТаблицы.ТипСвязи];
		Если СтрокаПолнойТаблицы.ТипСвязиЧисло = 1 Тогда
			СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.РДН;
			СтрокаПолнойТаблицы.ПД = СтрокаПолнойТаблицы.СтрокаПредшественник.ПДН;
		ИначеЕсли СтрокаПолнойТаблицы.ТипСвязиЧисло = 2 Тогда
			СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.РДО;
			СтрокаПолнойТаблицы.ПД = СтрокаПолнойТаблицы.СтрокаПредшественник.ПДН;
		ИначеЕсли СтрокаПолнойТаблицы.ТипСвязиЧисло = 3 Тогда
			СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.РДН;
			СтрокаПолнойТаблицы.ПД = СтрокаПолнойТаблицы.СтрокаПредшественник.ПДО;
		ИначеЕсли СтрокаПолнойТаблицы.ТипСвязиЧисло = 4 Тогда
			СтрокаПолнойТаблицы.РД = СтрокаПолнойТаблицы.СтрокаЗадача.РДО;
			СтрокаПолнойТаблицы.ПД = СтрокаПолнойТаблицы.СтрокаПредшественник.ПДО;
		КонецЕсли;
		
		СтрокаПолнойТаблицы.СтрокаЗадача.Предшественники.Добавить(СтрокаПолнойТаблицы);
		СтрокаПолнойТаблицы.СтрокаПредшественник.Последователи.Добавить(СтрокаПолнойТаблицы);
	КонецЦикла;
	
	ПолнаяТаблицаСвязей.Индексы.Добавить("УИД");
	ПолнаяТаблицаСвязей.Индексы.Добавить("ПредшественникУИД");
	//ПолнаяТаблицаСвязей.Индексы.Добавить("ПредшественникУИД, РассчитанОбратный");
	//ПолнаяТаблицаСвязей.Индексы.Добавить("УИД, Рассчитан");
	
	СоответствиеОграничения = Новый Соответствие;
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноПозже"), 1);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноРаньше"), 2);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеПозднее"), 3);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеРанее"), 4);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеПозднее"), 5);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеРанее"), 6);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало"), 7);
	СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеОкончание"), 8);
	
	ПустаяДата = Дата(1,1,1);
	Для Каждого СтрокаЗадача ИЗ ТаблицаЗадач Цикл
		Если СтрокаЗадача.ФактическаяДатаНачала <> ПустаяДата И РежимУчитыватьФакт Тогда
			СтрокаЗадача.РучнойВвод = Истина;
			СтрокаЗадача.ДатаНачала = СтрокаЗадача.ФактическаяДатаНачала;
			КалендарьЗадачи = ?(СтрокаЗадача.Календарь.Пустая(), КалендарьПроекта, СтрокаЗадача.Календарь);
			СтрокаЗадача.ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.ДатаНачала, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0, Ложь, СтруктураПараметров);
		КонецЕсли;
		Если СтрокаЗадача.ФактическаяДатаОкончания <> ПустаяДата И РежимУчитыватьФакт Тогда
			СтрокаЗадача.РучнойВвод = Истина;
			СтрокаЗадача.ДатаОкончания = СтрокаЗадача.ФактическаяДатаОкончания;
		КонецЕсли;
		Если СтрокаЗадача.Последователи.Количество() > 0 И СтрокаЗадача.Предшественники.Количество() = 0 Тогда
			СтрокаЗадача.НулевойУровень = Истина;
		Иначе
			СтрокаЗадача.НулевойУровень = Ложь;
		КонецЕсли;
		Если СтрокаЗадача.Последователи.Количество() = 0 И СтрокаЗадача.Предшественники.Количество() > 0 Тогда
			СтрокаЗадача.ПоследнийУровень = Истина;
		Иначе
			СтрокаЗадача.ПоследнийУровень = Ложь;
		КонецЕсли;
		Если СтрокаЗадача.Последователи.Количество() = 0 И СтрокаЗадача.Предшественники.Количество() = 0 Тогда
			Если ТаблицаЗадач.Найти(СтрокаЗадача.УИД, "Родитель") = Неопределено Тогда
				СтрокаЗадача.НулевойУровень = Истина;
				СтрокаЗадача.ПоследнийУровень = Истина;
			Иначе
				СтрокаЗадача.НулевойУровень = Ложь;
				СтрокаЗадача.ПоследнийУровень = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаЗадача.хРДН = СтрокаЗадача.РДН;
		СтрокаЗадача.хРДО = СтрокаЗадача.РДО;
		СтрокаЗадача.хПДН = СтрокаЗадача.ПДН;
		СтрокаЗадача.хПДО = СтрокаЗадача.ПДО;
		СтрокаЗадача.хДлительность = СтрокаЗадача.Длительность;
		СтрокаЗадача.хДатаНачала = СтрокаЗадача.ДатаНачала;
		СтрокаЗадача.хДатаОкончания = СтрокаЗадача.ДатаОкончания;
		
		СтрокаЗадача.ТипОграниченияЧисло = СоответствиеОграничения[СтрокаЗадача.ТипОграничения];
		
		Если НЕ ПустаяСтрока(СтрокаЗадача.Родитель) Тогда
			СтрокаЗадача.СтрокаРодитель = ТаблицаЗадач.Найти(СтрокаЗадача.Родитель, "УИД");
		Иначе
			СтрокаЗадача.СтрокаРодитель = Неопределено;
		КонецЕсли;
	КонецЦикла;

	ТаблицаЗадач.ЗаполнитьЗначения(0, "Уровень");
	МассивТекущийУровень = ТаблицаЗадач.НайтиСтроки(Новый Структура("НулевойУровень", Истина));
	ТекущийУровень = 0;
	Пока МассивТекущийУровень.Количество() > 0 Цикл
		Для Каждого ЭлементТекущийУровень ИЗ МассивТекущийУровень Цикл
			Для Каждого СтрокаПоследователь ИЗ ЭлементТекущийУровень.Последователи Цикл
				Если СтрокаПоследователь.СтрокаЗадача.Уровень <= ТекущийУровень Тогда
					СтрокаПоследователь.СтрокаЗадача.Уровень = ТекущийУровень + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТекущийУровень = ТекущийУровень + 1;
		МассивТекущийУровень = ТаблицаЗадач.НайтиСтроки(Новый Структура("Уровень", ТекущийУровень));
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетОбнулитьЭлементыРекурсивноПрямой(УИД, ТаблицаЗадач, ПолнаяТаблицаСвязей)
	//СтрокаЗадача = ТаблицаЗадач.Получить(ИндексСтрокаЗадача);
	СтрокаЗадача = ТаблицаЗадач.Найти(УИД, "УИД");
	ПустаяДата = Дата(1,1,1);
	Если СтрокаЗадача.ДатаНачала = ПустаяДата Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтрокаЗадача.хДатаНачала = СтрокаЗадача.ДатаНачала;
	СтрокаЗадача.хДатаОкончания = СтрокаЗадача.ДатаОкончания;
	СтрокаЗадача.хРДН = СтрокаЗадача.РДН;
	СтрокаЗадача.хРДО = СтрокаЗадача.РДО;
	
	Если НЕ СтрокаЗадача.РучнойВвод Тогда
		СтрокаЗадача.ДатаНачала = ПустаяДата;
		СтрокаЗадача.ДатаОкончания = ПустаяДата;
	КонецЕсли;
	СтрокаЗадача.РДН = ПустаяДата;
	СтрокаЗадача.РДО = ПустаяДата;
	
	Если СтрокаЗадача.Последователи.Количество() > 0 И СтрокаЗадача.Последователи.Получить(0) = Неопределено Тогда СтрокаЗадача.Последователи = ПолнаяТаблицаСвязей.НайтиСтроки(Новый Структура("ПредшественникУИД", СтрокаЗадача.УИД)); КонецЕсли;
	Если СтрокаЗадача.Предшественники.Количество() > 0 И СтрокаЗадача.Предшественники.Получить(0) = Неопределено Тогда СтрокаЗадача.Предшественники = ПолнаяТаблицаСвязей.НайтиСтроки(Новый Структура("УИД", СтрокаЗадача.УИД)); КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаЗадача.Родитель) И СтрокаЗадача.Родитель = Неопределено Тогда
		СтрокаЗадача.СтрокаРодитель = ТаблицаЗадач.Найти(СтрокаЗадача.Родитель, "УИД");
	ИначеЕсли ПустаяСтрока(СтрокаЗадача.Родитель) Тогда
		СтрокаЗадача.СтрокаРодитель = Неопределено;
	КонецЕсли;
	Для Каждого СтрокаПоследователь ИЗ СтрокаЗадача.Последователи Цикл
		СтрокаПоследователь.Рассчитан = 0;
		РекурсивныйПересчетОбнулитьЭлементыРекурсивноПрямой(СтрокаПоследователь.УИД, ТаблицаЗадач, ПолнаяТаблицаСвязей);
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПрямойОбходУзла(ИндексСтрокаЗадача, ТаблицаЗадач, ПолнаяТаблицаСвязей, КалендарьПроекта, МассивВозврата, ТекстВывода, Табуляция, МассивПоследнийУровень, СтруктураПараметров)
	СтрокаЗадача = ТаблицаЗадач.Получить(ИндексСтрокаЗадача);
	// 1. При заходе в узел проверим все его связи. Если они не рассчитаны, то валим отсюда
	// 2. Выбираем максимальные сроки
	ПустаяДата = Дата(1,1,1);
	ТекущаяДата = ТекущаяДата();
	мДатаНачала = ПустаяДата;
	мДатаОкончания = ПустаяДата;
	
	Если СтрокаЗадача.РДН <> ПустаяДата И СтрокаЗадача.РДО <> ПустаяДата Тогда 
		Возврат Ложь;
	КонецЕсли;
		
	СтрокиЗадачиПроверка = ПолнаяТаблицаСвязей.НайтиСтроки(Новый Структура("УИД", СтрокаЗадача.УИД));
	Для Каждого СтрокаЗадачаПроверка ИЗ СтрокиЗадачиПроверка Цикл
		Если СтрокаЗадачаПроверка.Рассчитан = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;;
	
	// теперь вычислим сроки нашей задачи
	КалендарьЗадачи = ?(ЗначениеЗаполнено(СтрокаЗадача.Календарь), СтрокаЗадача.Календарь, КалендарьПроекта);
	
	Если СтрокаЗадача.РучнойВвод Тогда
		СтрокаЗадача.РДН = СтрокаЗадача.ДатаНачала;
		//СтрокаЗадача.РДО = СтрокаЗадача.ДатаОкончания;
		СтрокаЗадача.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДН, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадача.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
		СтрокаЗадача.ДатаОкончания = СтрокаЗадача.РДО;
		Если СтрокаЗадача.Длительность <> СтрокаЗадача.хДлительность Тогда
			СтрокаЗадача.ДлительностьВыделено = Истина;
		КонецЕсли;
	Иначе
		СоответствиеДатаНачала = Новый Соответствие;
		СоответствиеДатаОкончания = Новый Соответствие;
		
		Для Каждого СтрокаПредшественник ИЗ СтрокаЗадача.Предшественники Цикл
			Если СтрокаПредшественник.СтрокаПредшественник = Неопределено Тогда
				СтрокаПредшественник.СтрокаПредшественник = ТаблицаЗадач.Найти(СтрокаПредшественник.ПредшественникУИД, "УИД");
			КонецЕсли;
			ЗадачаПредшественник = СтрокаПредшественник.СтрокаПредшественник;
			
			Если СтрокаПредшественник.ТипСвязиЧисло = 1 Тогда		//	НН
				СтрокаПредшественник.РД = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.РДН, СтрокаПредшественник.Задержка, СтрокаПредшественник.ЕдиницаВремени, КалендарьЗадачи, Истина, Ложь, СтруктураПараметров);
				ДатаСоответствия = СоответствиеДатаНачала.Получить(СтрокаПредшественник.ГруппаЗадач);
				Если СтрокаПредшественник.ГруппаЗадач = "" Тогда
					Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < СтрокаПредшественник.РД Тогда
						СоответствиеДатаНачала.Вставить("", СтрокаПредшественник.РД);
					КонецЕсли;
				Иначе
					Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия > СтрокаПредшественник.РД Тогда
						СоответствиеДатаНачала.Вставить(СтрокаПредшественник.ГруппаЗадач, СтрокаПредшественник.РД);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаПредшественник.ТипСвязиЧисло = 2 Тогда	//	НО
				СтрокаПредшественник.РД = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.РДН, СтрокаПредшественник.Задержка, СтрокаПредшественник.ЕдиницаВремени, КалендарьЗадачи, Истина, Ложь, СтруктураПараметров);
				ДатаСоответствия = СоответствиеДатаОкончания.Получить(СтрокаПредшественник.ГруппаЗадач);
				Если СтрокаПредшественник.ГруппаЗадач = "" Тогда
					Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < СтрокаПредшественник.РД Тогда
						СоответствиеДатаОкончания.Вставить("", СтрокаПредшественник.РД);
					КонецЕсли;
				Иначе
					Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия > СтрокаПредшественник.РД Тогда
						СоответствиеДатаОкончания.Вставить(СтрокаПредшественник.ГруппаЗадач, СтрокаПредшественник.РД);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли СтрокаПредшественник.ТипСвязиЧисло = 3 Тогда	//	ОН
				СтрокаПредшественник.РД = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.РДО, СтрокаПредшественник.Задержка, СтрокаПредшественник.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0, Ложь, СтруктураПараметров);
				ДатаСоответствия = СоответствиеДатаНачала.Получить("");
				Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < СтрокаПредшественник.РД Тогда
					СоответствиеДатаНачала.Вставить("", СтрокаПредшественник.РД);
				КонецЕсли;
			ИначеЕсли СтрокаПредшественник.ТипСвязиЧисло = 4 Тогда	//	ОО
				СтрокаПредшественник.РД = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.РДО, СтрокаПредшественник.Задержка, СтрокаПредшественник.ЕдиницаВремени, КалендарьЗадачи, Ложь, Ложь, СтруктураПараметров);
				ДатаСоответствия = СоответствиеДатаОкончания.Получить("");
				Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < СтрокаПредшественник.РД Тогда
					СоответствиеДатаОкончания.Вставить("", СтрокаПредшественник.РД);
				КонецЕсли;
			КонецЕсли;
			СтрокаПредшественник.Рассчитан = 1;
		КонецЦикла;
		
		Для Каждого КлючИЗначение ИЗ СоответствиеДатаНачала Цикл
			Если мДатаНачала < КлючИЗначение.Значение Тогда
				мДатаНачала = КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		Для Каждого КлючИЗначение ИЗ СоответствиеДатаОкончания Цикл
			Если мДатаОкончания < КлючИЗначение.Значение Тогда
				мДатаОкончания = КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		
		Если мДатаНачала <> ПустаяДата Тогда
			СтрокаЗадача.РДН = мДатаНачала;
		КонецЕсли;
		Если мДатаОкончания <> ПустаяДата Тогда
			СтрокаЗадача.РДО = мДатаОкончания;
		КонецЕсли;
		
		Если СтрокаЗадача.РДН <> ПустаяДата Тогда
			НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДН, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадача.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
			Если СтрокаЗадача.РДО = ПустаяДата ИЛИ СтрокаЗадача.РДО < НоваяДата Тогда
				СтрокаЗадача.РДО = НоваяДата;
			ИначеЕсли СтрокаЗадача.РДО > НоваяДата Тогда
				СтрокаЗадача.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДО, -СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0 И СтрокаЗадача.РДО <> НачалоДня(СтрокаЗадача.РДО), Ложь, СтруктураПараметров);
			КонецЕсли;
		Иначе
			СтрокаЗадача.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДО, -СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0 И СтрокаЗадача.РДО <> НачалоДня(СтрокаЗадача.РДО), Ложь, СтруктураПараметров);
		КонецЕсли;
		
		Если СтрокаЗадача.ТипОграниченияЧисло = Неопределено ИЛИ СтрокаЗадача.ТипОграниченияЧисло = 0 Тогда	
		ИначеЕсли СтрокаЗадача.ТипОграниченияЧисло = 1 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноПозже") Тогда
		ИначеЕсли СтрокаЗадача.ТипОграниченияЧисло = 2 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноРаньше") Тогда
		ИначеЕсли СтрокаЗадача.ТипОграниченияЧисло = 3 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеПозднее") Тогда
			Если СтрокаЗадача.РДН > СтрокаЗадача.ДатаОграничения И СтрокаЗадача.ДатаОграничения <> ПустаяДата Тогда
				СтрокаЗадача.РДН = СтрокаЗадача.ДатаОграничения;
				СтрокаЗадача.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДН, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадача.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
			КонецЕсли;
		ИначеЕсли СтрокаЗадача.ТипОграниченияЧисло = 4 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеРанее") Тогда
			Если СтрокаЗадача.РДН < СтрокаЗадача.ДатаОграничения И СтрокаЗадача.ДатаОграничения <> ПустаяДата Тогда
				СтрокаЗадача.РДН = СтрокаЗадача.ДатаОграничения;
				СтрокаЗадача.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДН, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадача.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
			КонецЕсли;
		ИначеЕсли СтрокаЗадача.ТипОграниченияЧисло = 5 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеПозднее") Тогда
			Если СтрокаЗадача.ДатаОграничения <> ПустаяДата Тогда
				ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(СтрокаЗадача.ДатаОграничения, КалендарьЗадачи);
				Если СтрокаЗадача.РДО > ДатаОкончания Тогда
					СтрокаЗадача.РДО = ДатаОкончания;
					СтрокаЗадача.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДО, -СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0 И СтрокаЗадача.РДО <> НачалоДня(СтрокаЗадача.РДО), Ложь, СтруктураПараметров);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаЗадача.ТипОграниченияЧисло = 6 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеРанее") Тогда
			Если СтрокаЗадача.ДатаОграничения <> ПустаяДата Тогда
				//ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(СтрокаЗадача.ДатаОграничения, КалендарьЗадачи);
				ДатаОкончания = СтрокаЗадача.ДатаОграничения;
				Если СтрокаЗадача.РДО < ДатаОкончания Тогда
					СтрокаЗадача.РДО = ДатаОкончания;
					СтрокаЗадача.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДО, -СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0 И СтрокаЗадача.РДО <> НачалоДня(СтрокаЗадача.РДО), Ложь, СтруктураПараметров);
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаЗадача.ТипОграниченияЧисло = 7 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало") Тогда
			Если СтрокаЗадача.РДН <> СтрокаЗадача.ДатаОграничения И СтрокаЗадача.ДатаОграничения <> ПустаяДата Тогда
				СтрокаЗадача.РДН = СтрокаЗадача.ДатаОграничения;
				СтрокаЗадача.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДН, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадача.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
			КонецЕсли;
		ИначеЕсли СтрокаЗадача.ТипОграниченияЧисло = 8 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеОкончание") Тогда
			Если СтрокаЗадача.ДатаОграничения <> ПустаяДата Тогда
				ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(СтрокаЗадача.ДатаОграничения, КалендарьЗадачи);
				Если СтрокаЗадача.РДО <> ДатаОкончания Тогда
					СтрокаЗадача.РДО = ДатаОкончания;
					СтрокаЗадача.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДО, -СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0 И СтрокаЗадача.РДО <> НачалоДня(СтрокаЗадача.РДО), Ложь, СтруктураПараметров);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаЗадача.ДатаНачала = СтрокаЗадача.РДН;
		СтрокаЗадача.ДатаОкончания = СтрокаЗадача.РДО;
	КонецЕсли;
	
	БылоИзменение = Ложь;
	СтрокаЗадача.ДатаНачалаВыделено = Ложь;
	СтрокаЗадача.ДатаОкончанияВыделено = Ложь;
	Если СтрокаЗадача.ДатаНачала <> СтрокаЗадача.хДатаНачала Тогда
		Если НачалоДня(СтрокаЗадача.ДатаНачала) <> НачалоДня(СтрокаЗадача.хДатаНачала) Тогда
			СтрокаЗадача.ДатаНачалаВыделено = Истина;
		КонецЕсли;
		СтрокаЗадача.хДатаНачала = СтрокаЗадача.ДатаНачала;
		СтрокаЗадача.КонтрактныйДатаНачалаОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадача.КонтрактныйДатаНачала, СтрокаЗадача.ДатаНачала);
		БылоИзменение = Истина;
	КонецЕсли;
	НоваяАктуализация = ?(СтрокаЗадача.ФактическаяДатаНачала = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадача.ДатаНачала, ТекущаяДата), 0);
	Если СтрокаЗадача.АктуализацияДатаНачалаОтклонение <> НоваяАктуализация Тогда
		СтрокаЗадача.АктуализацияДатаНачалаОтклонение = НоваяАктуализация;
		БылоИзменение = Истина;
	КонецЕсли;
	Если СтрокаЗадача.ДатаОкончания <> СтрокаЗадача.хДатаОкончания Тогда
		Если НачалоДня(СтрокаЗадача.ДатаОкончания) <> НачалоДня(СтрокаЗадача.хДатаОкончания) Тогда
			СтрокаЗадача.ДатаОкончанияВыделено = Истина;
		КонецЕсли;
		СтрокаЗадача.хДатаОкончания = СтрокаЗадача.ДатаОкончания;
		СтрокаЗадача.КонтрактныйДатаОкончанияОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадача.КонтрактныйДатаОкончания, СтрокаЗадача.ДатаОкончания);
		БылоИзменение = Истина;
	КонецЕсли;
	НоваяАктуализация = ?(СтрокаЗадача.ФактическаяДатаОкончания = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадача.ДатаОкончания, ТекущаяДата), 0);
	Если СтрокаЗадача.АктуализацияДатаОкончанияОтклонение <> НоваяАктуализация Тогда
		СтрокаЗадача.АктуализацияДатаОкончанияОтклонение = НоваяАктуализация;
		БылоИзменение = Истина
	КонецЕсли;
		
	// Теперь посчитаем связи
	Для Каждого СтрокаПоследователь ИЗ СтрокаЗадача.Последователи Цикл
		Если СтрокаПоследователь = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПоследователь.СтрокаЗадача = Неопределено Тогда
			СтрокаПоследователь.СтрокаЗадача = ТаблицаЗадач.Найти(СтрокаПоследователь.УИД, "УИД");
		КонецЕсли;
		ЗадачаПоследователь = СтрокаПоследователь.СтрокаЗадача;
		КалендарьПоследователь = ?(ЗначениеЗаполнено(ЗадачаПоследователь.Календарь), ЗадачаПоследователь.Календарь, КалендарьПроекта);
		Если СтрокаПоследователь.ТипСвязиЧисло = 1 Тогда		//	НН
			СтрокаПоследователь.РД = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДН, СтрокаПоследователь.Задержка, СтрокаПоследователь.ЕдиницаВремени, КалендарьПоследователь, Ложь, Ложь, СтруктураПараметров);
		ИначеЕсли СтрокаПоследователь.ТипСвязиЧисло = 2 Тогда	//	НО
			СтрокаПоследователь.РД = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДН, СтрокаПоследователь.Задержка, СтрокаПоследователь.ЕдиницаВремени, КалендарьПоследователь, Ложь, Ложь, СтруктураПараметров);
		ИначеЕсли СтрокаПоследователь.ТипСвязиЧисло = 3 Тогда	//	ОН
			СтрокаПоследователь.РД = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДО, СтрокаПоследователь.Задержка, СтрокаПоследователь.ЕдиницаВремени, КалендарьПоследователь, ЗадачаПоследователь.Длительность > 0, Ложь, СтруктураПараметров);
		ИначеЕсли СтрокаПоследователь.ТипСвязиЧисло = 4 Тогда	//	ОО
			СтрокаПоследователь.РД = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.РДО, СтрокаПоследователь.Задержка, СтрокаПоследователь.ЕдиницаВремени, КалендарьПоследователь, Ложь, Ложь, СтруктураПараметров);
		КонецЕсли;
		СтрокаПоследователь.Рассчитан = 1;
	КонецЦикла;
	
	// ((( grznt.Solntsev 30.08.2016
	//ПолнаяТаблицаСвязей.Индексы.Добавить("УИД, Рассчитан");
	// ))) grznt.Solntsev 30.08.2016
	
	Если СтрокаЗадача.Последователи.Количество() = 0 Тогда
		МассивПоследнийУровень.Добавить(СтрокаЗадача);
	КонецЕсли;
	
	НоваяТабуляция = "" + Табуляция + Символы.Таб;
	Для Каждого СтрокаПоследователь ИЗ СтрокаЗадача.Последователи Цикл
		РекурсивныйПересчетПрямойОбходУзла(ТаблицаЗадач.Индекс(СтрокаПоследователь.СтрокаЗадача), ТаблицаЗадач, ПолнаяТаблицаСвязей, КалендарьПроекта, МассивВозврата, ТекстВывода, НоваяТабуляция, МассивПоследнийУровень, СтруктураПараметров);
	КонецЦикла;

	БылоИзменение = БылоИзменение ИЛИ СтрокаЗадача.РДО <> СтрокаЗадача.хРДО ИЛИ СтрокаЗадача.РДН <> СтрокаЗадача.хРДН ИЛИ СтрокаЗадача.Длительность <> СтрокаЗадача.хДлительность;
	//Если СтрокаЗадача.РДО <> СтрокаЗадача.хРДО ИЛИ СтрокаЗадача.РДН <> СтрокаЗадача.хРДН ИЛИ СтрокаЗадача.Длительность <> СтрокаЗадача.хДлительность
	//	ИЛИ СтрокаЗадача.хДатаНачала <> СтрокаЗадача.ДатаНачала ИЛИ СтрокаЗадача.хДатаОкончания <> СтрокаЗадача.ДатаОкончания Тогда
	Если БылоИзменение Тогда
		СтрокаЗадача.хРДН = СтрокаЗадача.РДН;
		СтрокаЗадача.хРДО = СтрокаЗадача.РДО;
		СтрокаЗадача.хПДН = СтрокаЗадача.ПДН;
		СтрокаЗадача.хПДО = СтрокаЗадача.ПДО;
		СтрокаЗадача.хДлительность = СтрокаЗадача.Длительность;
		
		СтрокаЗадача.КонтрактныйДатаНачалаОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадача.КонтрактныйДатаНачала, СтрокаЗадача.ДатаНачала);
		СтрокаЗадача.КонтрактныйДатаОкончанияОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадача.КонтрактныйДатаОкончания, СтрокаЗадача.ДатаОкончания);
		//СтрокаЗадача.АктуализацияДатаНачалаОтклонение = ?(СтрокаЗадача.ФактическаяДатаНачала = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадача.ДатаНачала, ТекущаяДата), 0);
		//СтрокаЗадача.АктуализацияДатаОкончанияОтклонение = ?(СтрокаЗадача.ФактическаяДатаОкончания = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадача.ДатаОкончания, ТекущаяДата), 0);
		
		СтруктураИзменения = Новый Структура("УИД, ИндексТаблицы, РДН, РДО, ДатаНачала, ДатаОкончания, ПДН, ПДО, Длительность, КритическийПуть, ДатаНачалаВыделено, ДатаОкончанияВыделено, ДлительностьВыделено, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение");
		ЗаполнитьЗначенияСвойств(СтруктураИзменения, СтрокаЗадача);
		СтруктураИзменения.Вставить("ИндексСтроки", ТаблицаЗадач.Индекс(СтрокаЗадача));
		СтруктураИзменения.Вставить("ИндексТаблицы", ИндексСтрокаЗадача);
		МассивВозврата.Добавить(СтруктураИзменения);
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПересчетСроковРодителейРекурсивно(ИндексСтрокиРодителя, ТаблицаЗадач, КалендарьПроекта, МассивВозврата)
	ПустаяДата = Дата(1,1,1);
	ТекущаяДата = ТекущаяДата();
	СтрокаРодитель = ТаблицаЗадач.Получить(ИндексСтрокиРодителя);
	СтрокиПодчиненные = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", СтрокаРодитель.УИД));
	Если СтрокиПодчиненные.Количество() > 0 Тогда
		СтрокаРодитель.хДатаНачала = СтрокаРодитель.ДатаНачала;
		СтрокаРодитель.ДатаНачала = ПустаяДата;
		СтрокаРодитель.хДатаОкончания = СтрокаРодитель.ДатаОкончания;
		СтрокаРодитель.ДатаОкончания = ПустаяДата;
		СтрокаРодитель.хРДН = СтрокаРодитель.РДН;
		СтрокаРодитель.РДН = ПустаяДата;
		СтрокаРодитель.хРДО = СтрокаРодитель.РДО;
		СтрокаРодитель.РДО = ПустаяДата;
		
		СтрокаРодитель.хПДН = СтрокаРодитель.ПДН;
		СтрокаРодитель.ПДН = ПустаяДата;
		СтрокаРодитель.хПДО = СтрокаРодитель.ПДО;
		СтрокаРодитель.ПДО = ПустаяДата;
		
		СтрокаРодитель.хДлительность = СтрокаРодитель.Длительность;
		СтрокаРодитель.Длительность = 0;
	Иначе
		Возврат Истина;
	КонецЕсли;
	Для Каждого СтрокаПодчиненные ИЗ СтрокиПодчиненные Цикл
		РекурсивныйПересчетПересчетСроковРодителейРекурсивно(ТаблицаЗадач.Индекс(СтрокаПодчиненные), ТаблицаЗадач, КалендарьПроекта, МассивВозврата);
		Если СтрокаПодчиненные.ДатаНачала < СтрокаРодитель.ДатаНачала ИЛИ СтрокаРодитель.ДатаНачала = ПустаяДата Тогда
			СтрокаРодитель.ДатаНачала = СтрокаПодчиненные.ДатаНачала;
		КонецЕсли;
		Если СтрокаПодчиненные.ДатаОкончания > СтрокаРодитель.ДатаОкончания Тогда
			СтрокаРодитель.ДатаОкончания = СтрокаПодчиненные.ДатаОкончания;
		КонецЕсли;
		Если СтрокаПодчиненные.РДН < СтрокаРодитель.РДН ИЛИ СтрокаРодитель.РДН = ПустаяДата Тогда
			СтрокаРодитель.РДН = СтрокаПодчиненные.РДН;
		КонецЕсли;
		Если СтрокаПодчиненные.РДО > СтрокаРодитель.РДО Тогда
			СтрокаРодитель.РДО = СтрокаПодчиненные.РДО;
		КонецЕсли;
		Если СтрокаПодчиненные.ПДН < СтрокаРодитель.ПДН ИЛИ СтрокаРодитель.ПДН = ПустаяДата Тогда
			СтрокаРодитель.ПДН = СтрокаПодчиненные.ПДН;
		КонецЕсли;
		Если СтрокаПодчиненные.ПДО > СтрокаРодитель.ПДО Тогда
			СтрокаРодитель.ПДО = СтрокаПодчиненные.ПДО;
		КонецЕсли;
	КонецЦикла;
	СтрокаРодитель.Длительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаРодитель.ДатаНачала, СтрокаРодитель.ДатаОкончания, КалендарьПроекта, СтрокаРодитель.ЕдиницаВремени);
	СтрокаРодитель.ДатаНачалаВыделено = Ложь;
	СтрокаРодитель.ДатаОкончанияВыделено = Ложь;
	БылиИзменения = Ложь;
	Если СтрокаРодитель.ДатаНачала <> СтрокаРодитель.хДатаНачала Тогда
		Если НачалоДня(СтрокаРодитель.ДатаНачала) <> НачалоДня(СтрокаРодитель.хДатаНачала) Тогда
			СтрокаРодитель.ДатаНачалаВыделено = Истина;
		КонецЕсли;
		СтрокаРодитель.хДатаНачала = СтрокаРодитель.ДатаНачала;
		СтрокаРодитель.КонтрактныйДатаНачалаОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаРодитель.КонтрактныйДатаНачала, СтрокаРодитель.ДатаНачала);
	КонецЕсли;
	НоваяАктуализация = ?(СтрокаРодитель.ФактическаяДатаНачала = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаРодитель.ДатаНачала, ТекущаяДата), 0);
	Если СтрокаРодитель.АктуализацияДатаНачалаОтклонение <> НоваяАктуализация Тогда
		СтрокаРодитель.АктуализацияДатаНачалаОтклонение = НоваяАктуализация;
		БылиИзменения = Истина;
	КонецЕсли;
	
	Если СтрокаРодитель.ДатаОкончания <> СтрокаРодитель.хДатаОкончания Тогда
		Если НачалоДня(СтрокаРодитель.ДатаОкончания) <> НачалоДня(СтрокаРодитель.хДатаОкончания) Тогда
			СтрокаРодитель.ДатаОкончанияВыделено = Истина;
		КонецЕсли;
		СтрокаРодитель.хДатаОкончания = СтрокаРодитель.ДатаОкончания;
		СтрокаРодитель.КонтрактныйДатаОкончанияОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаРодитель.КонтрактныйДатаОкончания, СтрокаРодитель.ДатаОкончания);
	КонецЕсли;
	НоваяАктуализация = ?(СтрокаРодитель.ФактическаяДатаОкончания = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаРодитель.ДатаОкончания, ТекущаяДата), 0);
	Если СтрокаРодитель.АктуализацияДатаОкончанияОтклонение <> НоваяАктуализация Тогда
		СтрокаРодитель.АктуализацияДатаОкончанияОтклонение = НоваяАктуализация;
		БылиИзменения = Истина;
	КонецЕсли;
	Если СтрокаРодитель.Длительность <> СтрокаРодитель.хДлительность Тогда
		СтрокаРодитель.ДлительностьВыделено = Истина;
		СтрокаРодитель.хДлительность = СтрокаРодитель.Длительность;
	Иначе
		СтрокаРодитель.ДлительностьВыделено = Ложь;
	КонецЕсли;
	БылиИзменения = БылиИзменения ИЛИ СтрокаРодитель.ДатаНачала <> СтрокаРодитель.хДатаНачала ИЛИ СтрокаРодитель.ДатаОкончания <> СтрокаРодитель.хДатаОкончания
		ИЛИ СтрокаРодитель.РДО <> СтрокаРодитель.хРДО ИЛИ СтрокаРодитель.РДН <> СтрокаРодитель.хРДН 
		ИЛИ СтрокаРодитель.ПДО <> СтрокаРодитель.хПДО ИЛИ СтрокаРодитель.ПДН <> СтрокаРодитель.хПДН 
		ИЛИ СтрокаРодитель.ДлительностьВыделено = Истина;
	Если СтрокаРодитель.РДН = СтрокаРодитель.ПДН И СтрокаРодитель.РДО = СтрокаРодитель.ПДО Тогда
		БылиИзменения = БылиИзменения ИЛИ НЕ СтрокаРодитель.КритическийПуть;
		СтрокаРодитель.КритическийПуть = Истина;
	Иначе
		БылиИзменения = БылиИзменения ИЛИ СтрокаРодитель.КритическийПуть;
		СтрокаРодитель.КритическийПуть = Ложь;
	КонецЕсли;
	//Если СтрокаРодитель.ДатаНачала <> СтрокаРодитель.хДатаНачала ИЛИ СтрокаРодитель.ДатаОкончания <> СтрокаРодитель.хДатаОкончания
	//	ИЛИ СтрокаРодитель.РДО <> СтрокаРодитель.хРДО ИЛИ СтрокаРодитель.РДН <> СтрокаРодитель.хРДН 
	//	ИЛИ СтрокаРодитель.ПДО <> СтрокаРодитель.хПДО ИЛИ СтрокаРодитель.ПДН <> СтрокаРодитель.хПДН 
	//	ИЛИ СтрокаРодитель.ДлительностьВыделено = Истина Тогда
	Если БылиИзменения Тогда
		СтрокаРодитель.хРДО = СтрокаРодитель.РДО;
		СтрокаРодитель.хРДН = СтрокаРодитель.РДН;
		СтрокаРодитель.хПДО = СтрокаРодитель.ПДО;
		СтрокаРодитель.хПДН = СтрокаРодитель.ПДН;
		
		СтрокаРодитель.КонтрактныйДатаНачалаОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаРодитель.КонтрактныйДатаНачала, СтрокаРодитель.ДатаНачала);
		СтрокаРодитель.КонтрактныйДатаОкончанияОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаРодитель.КонтрактныйДатаОкончания, СтрокаРодитель.ДатаОкончания);
		//СтрокаРодитель.АктуализацияДатаНачалаОтклонение = ?(СтрокаРодитель.ФактическаяДатаНачала = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаРодитель.ДатаНачала, ТекущаяДата), 0);
		//СтрокаРодитель.АктуализацияДатаОкончанияОтклонение = ?(СтрокаРодитель.ФактическаяДатаОкончания = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаРодитель.ДатаОкончания, ТекущаяДата), 0);
				
		СтруктураИзменения = Новый Структура("УИД, РДН, РДО, ДатаНачала, ДатаОкончания, ПДН, ПДО, Длительность, КритическийПуть, ДатаНачалаВыделено, ДатаОкончанияВыделено, ДлительностьВыделено, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение");
		ЗаполнитьЗначенияСвойств(СтруктураИзменения, СтрокаРодитель);
		СтруктураИзменения.Вставить("ИндексСтроки", ТаблицаЗадач.Индекс(СтрокаРодитель));
		СтруктураИзменения.Вставить("ИндексТаблицы", ИндексСтрокиРодителя);
		МассивВозврата.Добавить(СтруктураИзменения);
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПолучитьСтруктуруТаблицПоУмолчанию()
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", Дата(1,1,1));
	СтруктураТаблиц.Вставить("КалендарьПроекта", ПредопределенноеЗначение("Справочник.грзнтРабочиеКалендари.ПустаяСсылка"));
	СтруктураТаблиц.Вставить("СпособПланирования", Неопределено);
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("УИД", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
	ТаблицаЗадач.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("ИндексТаблицы", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("Родитель", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
	ТаблицаЗадач.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("РДН", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("РДО", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ПДН", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ПДО", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("Длительность", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("РучнойВвод", Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("НулевойУровень", Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("ПоследнийУровень", Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("хДатаНачала");
	ТаблицаЗадач.Колонки.Добавить("хДатаОкончания");
	ТаблицаЗадач.Колонки.Добавить("хРДН");
	ТаблицаЗадач.Колонки.Добавить("хРДО");
	ТаблицаЗадач.Колонки.Добавить("хПДН");
	ТаблицаЗадач.Колонки.Добавить("хПДО");
	ТаблицаЗадач.Колонки.Добавить("хДлительность");
	ТаблицаЗадач.Колонки.Добавить("ДатаНачалаВыделено", Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОкончанияВыделено", Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("ДлительностьВыделено", Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("КритическийПуть", Новый ОписаниеТипов("Булево"));
	ТаблицаЗадач.Колонки.Добавить("ЕдиницаВремени");
	ТаблицаЗадач.Колонки.Добавить("Календарь");
	ТаблицаЗадач.Колонки.Добавить("ТипОграничения");
	ТаблицаЗадач.Колонки.Добавить("ТипОграниченияЧисло", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("ДатаОграничения", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("СтрокаРодитель");
	ТаблицаЗадач.Колонки.Добавить("Предшественники");
	ТаблицаЗадач.Колонки.Добавить("Последователи");
	ТаблицаЗадач.Колонки.Добавить("ФактическаяДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("ФактическаяДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	ТаблицаЗадач.Колонки.Добавить("КонтрактныйДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("КонтрактныйДатаОкончания", Новый ОписаниеТипов("Дата"));
	ТаблицаЗадач.Колонки.Добавить("КонтрактныйДатаНачалаОтклонение", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("КонтрактныйДатаОкончанияОтклонение", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("АктуализацияДатаНачалаОтклонение", Новый ОписаниеТипов("Число"));
	ТаблицаЗадач.Колонки.Добавить("АктуализацияДатаОкончанияОтклонение", Новый ОписаниеТипов("Число"));
	
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	
	ПолнаяТаблицаСвязей = Новый ТаблицаЗначений;
	ПолнаяТаблицаСвязей.Колонки.Добавить("УИД", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
	ПолнаяТаблицаСвязей.Колонки.Добавить("ПредшественникУИД", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
	ПолнаяТаблицаСвязей.Колонки.Добавить("ТипСвязи");
	ПолнаяТаблицаСвязей.Колонки.Добавить("ТипСвязиЧисло", Новый ОписаниеТипов("Число"));
	ПолнаяТаблицаСвязей.Колонки.Добавить("Задержка");
	ПолнаяТаблицаСвязей.Колонки.Добавить("ЕдиницаВремени");
	ПолнаяТаблицаСвязей.Колонки.Добавить("РД");
	ПолнаяТаблицаСвязей.Колонки.Добавить("ПД");
	ПолнаяТаблицаСвязей.Колонки.Добавить("СтрокаЗадача");
	ПолнаяТаблицаСвязей.Колонки.Добавить("СтрокаПредшественник");
	ПолнаяТаблицаСвязей.Колонки.Добавить("Внешний", Новый ОписаниеТипов("Булево"));
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	
	ТекущаяТаблицаСвязей = Новый ТаблицаЗначений;
	ТекущаяТаблицаСвязей.Колонки.Добавить("УИД", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
	ТекущаяТаблицаСвязей.Колонки.Добавить("ПредшественникУИД", Новый ОписаниеТипов("Строка", , , ,Новый КвалификаторыСтроки("36")));
	ТекущаяТаблицаСвязей.Колонки.Добавить("ТипСвязи");
	ТекущаяТаблицаСвязей.Колонки.Добавить("Задержка");
	ТекущаяТаблицаСвязей.Колонки.Добавить("ЕдиницаВремени");
	ТекущаяТаблицаСвязей.Колонки.Добавить("Внешний", Новый ОписаниеТипов("Булево"));
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	
	Возврат СтруктураТаблиц;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПриИзмененииРеквизитаБезПересчета(АдресВременногоХранилища, УникальныйИдентификатор, МассивСтруктураИзменения, РежимУчитыватьФакт) Экспорт
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		СтруктураТаблиц = РекурсивныйПересчетПолучитьСтруктуруТаблицПоУмолчанию();
	Иначе
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	КонецЕсли;
	ДатаНачалаПроекта = СтруктураТаблиц.ДатаНачалаПроекта;
	КалендарьПроекта = СтруктураТаблиц.КалендарьПроекта;
	СпособПланирования = СтруктураТаблиц.СпособПланирования;
	ТаблицаЗадач = СтруктураТаблиц.ТаблицаЗадач;
	ПолнаяТаблицаСвязей = СтруктураТаблиц.ПолнаяТаблицаСвязей;
	ТекущаяТаблицаСвязей = СтруктураТаблиц.ТекущаяТаблицаСвязей;
	УчитыватьФакт = СтруктураТаблиц.УчитыватьФакт;
	
	Если ТипЗнч(МассивСтруктураИзменения) = Тип("Массив") Тогда
		Для Каждого СтруктураИзменения ИЗ МассивСтруктураИзменения Цикл
			СтрокаЗадача = ТаблицаЗадач.Найти(СтруктураИзменения.УИД, "УИД");
			РекурсивныйПересчетПриИзмененииРеквизитаБезПересчетаПоСтруктуре(СтрокаЗадача, СтруктураИзменения, ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей);
		КонецЦикла;
	ИначеЕсли ТипЗнч(МассивСтруктураИзменения) = Тип("Структура") Тогда
		СтрокаЗадача = ТаблицаЗадач.Найти(МассивСтруктураИзменения.УИД, "УИД");
		РекурсивныйПересчетПриИзмененииРеквизитаБезПересчетаПоСтруктуре(СтрокаЗадача, МассивСтруктураИзменения, ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей);
	КонецЕсли;
	
	Если ПолнаяТаблицаСвязей.Количество() = 0 Тогда
		РекурсивныйПересчетПерестроитьПолнуюТаблицуСвязей(ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей, РежимУчитыватьФакт, КалендарьПроекта, Новый Структура);
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", ДатаНачалаПроекта);
	СтруктураТаблиц.Вставить("КалендарьПроекта", КалендарьПроекта);
	СтруктураТаблиц.Вставить("СпособПланирования", СпособПланирования);
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("УчитыватьФакт", РежимУчитыватьФакт);
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	Возврат АдресХранилища;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПриИзмененииРеквизитаБезПересчетаПоСтруктуре(СтрокаЗадача, СтруктураИзменения, ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей)
	Если СтруктураИзменения.Событие = "ИзменениеРеквизита" Тогда
		Если СтруктураИзменения.ИмяРеквизита = "УИД" Тогда
			Для Каждого СтрокаПроекта ИЗ ТаблицаЗадач Цикл
				Если СтрокаПроекта.УИД = СтруктураИзменения.УИД Тогда
					СтрокаПроекта.УИД = СтруктураИзменения.НовоеЗначение;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаПредшественник ИЗ ПолнаяТаблицаСвязей Цикл
				Если СтрокаПредшественник.УИД = СтруктураИзменения.УИД Тогда
					СтрокаПредшественник.УИД = СтруктураИзменения.НовоеЗначение;
				КонецЕсли;
				Если СтрокаПредшественник.ПредшественникУИД = СтруктураИзменения.УИД Тогда
					СтрокаПредшественник.ПредшественникУИД = СтруктураИзменения.НовоеЗначение;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТаблицаЗадач.Колонки.Найти(СтруктураИзменения.ИмяРеквизита) <> Неопределено Тогда
			СтрокаЗадача[СтруктураИзменения.ИмяРеквизита] = СтруктураИзменения.НовоеЗначение;
		КонецЕсли;
	ИначеЕсли СтруктураИзменения.Событие = "ДобавлениеЗадачи" Тогда
		СтрокаЗадача = ТаблицаЗадач.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗадача, СтруктураИзменения.ДанныеЗадачи);
		ПолнаяТаблицаСвязей.Очистить();
	ИначеЕсли СтруктураИзменения.Событие = "УдалениеЗадачи" Тогда
		//Для Каждого СтрокаПоследователь ИЗ СтрокаЗадача.Последователи Цикл
		//	Если СтрокаПоследователь.СтрокаЗадача <> Неопределено Тогда
		//		Для К = 0 ПО СтрокаПоследователь.СтрокаЗадача.Предшественники.Количество() - 1 Цикл
		//			СтрокаПредшественник = СтрокаПоследователь.СтрокаЗадача.Предшественники.Получить(К);
		//			Если СтрокаПредшественник <> Неопределено И СтрокаПредшественник.ПредшественникУИД = СтруктураИзменения.УИД Тогда
		//				СтрокаПоследователь.СтрокаЗадача.Предшественники.Удалить(К);
		//				Прервать;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЦикла;
		//
		//Для Каждого СтрокаПредшественник ИЗ СтрокаЗадача.Предшественники Цикл
		//	Если СтрокаПредшественник.СтрокаЗадача <> Неопределено Тогда
		//		Для К = 0 ПО СтрокаПредшественник.СтрокаПредшественник.Последователи.Количество() - 1 Цикл
		//			СтрокаПоследователь = СтрокаПредшественник.СтрокаПредшественник.Последователи.Получить(К);
		//			Если СтрокаПоследователь <> Неопределено И СтрокаПоследователь.УИД = СтруктураИзменения.УИД Тогда
		//				СтрокаПредшественник.СтрокаПредшественник.Последователи.Удалить(К);
		//				Прервать;
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЕсли;
		//КонецЦикла;
		ТаблицаЗадач.Удалить(СтрокаЗадача);
		//К = 0;
		//Пока К < ПолнаяТаблицаСвязей.Количество() Цикл
		//	СтрокаПредшественник = ПолнаяТаблицаСвязей.Получить(К);
		//	Если СтрокаПредшественник.УИД = СтруктураИзменения.УИД ИЛИ СтрокаПредшественник.ПредшественникУИД = СтруктураИзменения.УИД Тогда
		//		ПолнаяТаблицаСвязей.Удалить(К);
		//		Продолжить;
		//	КонецЕсли;
		//	К = К + 1;
		//КонецЦикла;
		К = 0;
		Пока К < ТекущаяТаблицаСвязей.Количество() Цикл
			СтрокаПредшественник = ТекущаяТаблицаСвязей.Получить(К);
			Если СтрокаПредшественник.УИД = СтруктураИзменения.УИД ИЛИ СтрокаПредшественник.ПредшественникУИД = СтруктураИзменения.УИД Тогда
				ТекущаяТаблицаСвязей.Удалить(К);
				Продолжить;
			КонецЕсли;
			К = К + 1;
		КонецЦикла;
	ИначеЕсли СтруктураИзменения.Событие = "ДобавитьПредшественника" Тогда
		// Логика везде одинакова - если есть подчиненные, то делаем только в текущей таблице. Если подчиненных нет, то делаем в обеих таблицах
		СтрокаТаблицыСвязей = ТекущаяТаблицаСвязей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыСвязей, СтруктураИзменения.ДанныеЗадачи);
		ПолнаяТаблицаСвязей.Очистить();
		СтрокаТаблицыСвязей.УИД = СтруктураИзменения.УИД;
	ИначеЕсли СтруктураИзменения.Событие = "УдалитьПредшественника" Тогда
		// Логика везде одинакова - если есть подчиненные, то делаем только в текущей таблице. Если подчиненных нет, то делаем в обеих таблицах
		СтрокиТаблицыСвязей = ТекущаяТаблицаСвязей.НайтиСтроки(Новый Структура("УИД, ПредшественникУИД", СтруктураИзменения.УИД, СтруктураИзменения.ДанныеЗадачи.ПредшественникУИД));
		Для Каждого СтрокаТаблицыСвязей ИЗ СтрокиТаблицыСвязей Цикл
			ТекущаяТаблицаСвязей.Удалить(СтрокаТаблицыСвязей);
		КонецЦикла;
		ПолнаяТаблицаСвязей.Очистить();
	ИначеЕсли СтруктураИзменения.Событие = "ИзменитьПараметрыПредшественника" Тогда
		// Логика везде одинакова - если есть подчиненные, то делаем только в текущей таблице. Если подчиненных нет, то делаем в обеих таблицах
		СтрокиТаблицыСвязей = ТекущаяТаблицаСвязей.НайтиСтроки(Новый Структура("УИД, ПредшественникУИД", СтруктураИзменения.УИД, СтруктураИзменения.ДанныеЗадачи.ПредшественникУИД));
		Для Каждого СтрокаТаблицыСвязей ИЗ СтрокиТаблицыСвязей Цикл
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСвязей, СтруктураИзменения.ДанныеЗадачи);
		КонецЦикла;
		ПолнаяТаблицаСвязей.Очистить();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилища, УникальныйИдентификатор, МассивСтруктураИзменения, МассивВозврата, РежимУчитыватьФакт) Экспорт
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		СтруктураТаблиц = РекурсивныйПересчетПолучитьСтруктуруТаблицПоУмолчанию();
	Иначе
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	КонецЕсли;
	ДатаНачалаПроекта = СтруктураТаблиц.ДатаНачалаПроекта;
	КалендарьПроекта = СтруктураТаблиц.КалендарьПроекта;
	СпособПланирования = СтруктураТаблиц.СпособПланирования;
	ТаблицаЗадач = СтруктураТаблиц.ТаблицаЗадач;
	ПолнаяТаблицаСвязей = СтруктураТаблиц.ПолнаяТаблицаСвязей;
	ТекущаяТаблицаСвязей = СтруктураТаблиц.ТекущаяТаблицаСвязей;
	УчитыватьФакт = СтруктураТаблиц.УчитыватьФакт;
	
	ЕстьОшибкиРасчетаСроков = Ложь;
	Если ТаблицаЗадач.Количество() > 0 И ДатаНачалаПроекта = Дата(1,1,1) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задана плановая дата начала старта проекта для открытого экземпляра версии. Расчет сроков невозможен.";
		Сообщение.Сообщить();
		ЕстьОшибкиРасчетаСроков = Истина;
	КонецЕсли;
	Если ТаблицаЗадач.Количество() > 0 И НЕ ЗначениеЗаполнено(КалендарьПроекта) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задан календарь проекта для открытого экземпляра версии. Расчет сроков невозможен.";
		Сообщение.Сообщить();
		ЕстьОшибкиРасчетаСроков = Истина;
	КонецЕсли;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибкиРасчетаСроков", ЕстьОшибкиРасчетаСроков);
	
	МассивСтрокЗадач = Новый Массив;
	
	Если ТипЗнч(МассивСтруктураИзменения) = Тип("Массив") Тогда
		Для Каждого СтруктураИзменения ИЗ МассивСтруктураИзменения Цикл
			СтрокаЗадача = ТаблицаЗадач.Найти(СтруктураИзменения.УИД, "УИД");
			КопияСтроки = Новый Структура("ДатаНачала, ДатаОкончания, Длительность, РучнойВвод");
			ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаЗадача);
			СтруктураИзменения.Вставить("КопияСтроки", КопияСтроки);
			РекурсивныйПересчетПриИзмененииСроковПоСтруктуре(СтрокаЗадача, СтруктураИзменения, ТаблицаЗадач, ПолнаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, СтруктураПараметров, РежимУчитыватьФакт);
			Если МассивСтрокЗадач.Найти(СтрокаЗадача) = Неопределено Тогда
				МассивСтрокЗадач.Добавить(СтрокаЗадача);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(МассивСтруктураИзменения) = Тип("Структура") Тогда
		СтрокаЗадача = ТаблицаЗадач.Найти(МассивСтруктураИзменения.УИД, "УИД");
		КопияСтроки = Новый Структура("ДатаНачала, ДатаОкончания, Длительность, РучнойВвод");
		ЗаполнитьЗначенияСвойств(КопияСтроки, СтрокаЗадача);
		МассивСтруктураИзменения.Вставить("КопияСтроки", КопияСтроки);
		РекурсивныйПересчетПриИзмененииСроковПоСтруктуре(СтрокаЗадача, МассивСтруктураИзменения, ТаблицаЗадач, ПолнаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, СтруктураПараметров, РежимУчитыватьФакт);
		МассивСтрокЗадач.Добавить(СтрокаЗадача);
	КонецЕсли;
	Если РежимУчитыватьФакт <> УчитыватьФакт Тогда
		РекурсивныйПересчетОбновитьУчетФакта(ТаблицаЗадач, РежимУчитыватьФакт, КалендарьПроекта, СтруктураПараметров);
		МассивСтрокЗадач = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", ""));
	КонецЕсли;
	
	Для Каждого СтрокаЗадача ИЗ МассивСтрокЗадач Цикл
		РекурсивныйПересчетОбнулитьЭлементыРекурсивноПрямой(СтрокаЗадача.УИД, ТаблицаЗадач, ПолнаяТаблицаСвязей);
	КонецЦикла;
	
	МассивПоследнийУровень = Новый Массив;
	МассивВозврата = Новый Массив;
	ТекстВывода = "";
	Для Каждого СтрокаЗадача ИЗ МассивСтрокЗадач Цикл
		СтрокаЗадача.РДН = ДатаНачалаПроекта;
		РекурсивныйПересчетПрямойОбходУзла(ТаблицаЗадач.Индекс(СтрокаЗадача), ТаблицаЗадач, ПолнаяТаблицаСвязей, КалендарьПроекта, МассивВозврата, ТекстВывода, "", МассивПоследнийУровень, СтруктураПараметров);
	КонецЦикла;
	
	МассивРодителейВерхнегоУровня = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", ""));
	Для Каждого ЭлементМассиваРодителей ИЗ МассивРодителейВерхнегоУровня Цикл
		РекурсивныйПересчетПересчетСроковРодителейРекурсивно(ТаблицаЗадач.Индекс(ЭлементМассиваРодителей), ТаблицаЗадач, КалендарьПроекта, МассивВозврата);
	КонецЦикла;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", ДатаНачалаПроекта);
	СтруктураТаблиц.Вставить("КалендарьПроекта", КалендарьПроекта);
	СтруктураТаблиц.Вставить("СпособПланирования", СпособПланирования);
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("УчитыватьФакт", РежимУчитыватьФакт);
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	Возврат АдресХранилища;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетОбновитьУчетФакта(ТаблицаЗадач, РежимУчитыватьФакт, КалендарьПроекта, СтруктураПараметров)
	ПустаяДата = Дата(1,1,1);
	
	Если РежимУчитыватьФакт Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаЗадач Цикл
			Если СтрокаТаблицы.ФактическаяДатаНачала <> ПустаяДата Тогда
				СтрокаТаблицы.РучнойВвод = Истина;
				СтрокаТаблицы.ДатаНачала = СтрокаТаблицы.ФактическаяДатаНачала;
				Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
					КалендарьЗадачи = ?(СтрокаТаблицы.Календарь.Пустая(), КалендарьПроекта, СтрокаТаблицы.Календарь);
					СтрокаТаблицы.ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаТаблицы.ДатаНачала, СтрокаТаблицы.Длительность, СтрокаТаблицы.ЕдиницаВремени, КалендарьЗадачи, СтрокаТаблицы.Длительность <> 0, Ложь, СтруктураПараметров);
				Иначе
					СтрокаТаблицы.ДатаОкончания = СтрокаТаблицы.ФактическаяДатаОкончания;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы ИЗ ТаблицаЗадач Цикл
			Если СтрокаТаблицы.ФактическаяДатаНачала <> ПустаяДата Тогда
				СтрокаТаблицы.РучнойВвод = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПриИзмененииСроковПоСтруктуре(СтрокаЗадача, СтруктураИзменения, ТаблицаЗадач, ПолнаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, СтруктураПараметров, РежимУчитыватьФакт)
	КопияСтроки = СтруктураИзменения.КопияСтроки;
	// 3. рекурсивно рассчитаем элементы и связи
	Если СтруктураИзменения.ИмяРеквизита = "Длительность" Тогда
		СтрокаЗадача.Длительность = СтруктураИзменения.НовоеЗначение;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ДатаНачала" Тогда
		СтрокаЗадача.ДатаНачала = СтруктураИзменения.НовоеЗначение;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ДатаОкончания" Тогда
		СтрокаЗадача.ДатаНачала = КопияСтроки.ДатаНачала;
		СтрокаЗадача.ДатаОкончания = СтруктураИзменения.НовоеЗначение;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "РучнойВвод" Тогда
		СтрокаЗадача.РучнойВвод = СтруктураИзменения.НовоеЗначение;
		Если СтрокаЗадача.РучнойВвод Тогда
			СтрокаЗадача.ДатаНачала = КопияСтроки.ДатаНачала;
			СтрокаЗадача.ДатаОкончания = КопияСтроки.ДатаОкончания;
		Иначе
			СтрокаЗадача.РДН = ДатаНачалаПроекта;
		КонецЕсли;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ЕдиницаВремени" Тогда
		СтрокаЗадача.ЕдиницаВремени = СтруктураИзменения.НовоеЗначение;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "Календарь" Тогда
		СтрокаЗадача.Календарь = СтруктураИзменения.НовоеЗначение;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ТипОграничения" Тогда
		СтрокаЗадача.ТипОграничения = СтруктураИзменения.НовоеЗначение;
		СоответствиеОграничения = Новый Соответствие;
		СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноПозже"), 1);
		СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноРаньше"), 2);
		СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеПозднее"), 3);
		СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеРанее"), 4);
		СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеПозднее"), 5);
		СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеРанее"), 6);
		СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало"), 7);
		СоответствиеОграничения.Вставить(ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеОкончание"), 8);
		СтрокаЗадача.ТипОграниченияЧисло = СоответствиеОграничения[СтруктураИзменения.НовоеЗначение];
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ДатаОграничения" Тогда
		СтрокаЗадача.ДатаОграничения = СтруктураИзменения.НовоеЗначение;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ФактическаяДатаНачала" Тогда
		СтрокаЗадача.ФактическаяДатаНачала = СтруктураИзменения.НовоеЗначение;
		Если СтрокаЗадача.ФактическаяДатаНачала <> Дата(1,1,1) И РежимУчитыватьФакт Тогда
			СтрокаЗадача.ДатаНачала = СтрокаЗадача.ФактическаяДатаНачала;
		КонецЕсли;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ФактическаяДатаОкончания" Тогда
		СтрокаЗадача.ФактическаяДатаОкончания = СтруктураИзменения.НовоеЗначение;
		Если СтрокаЗадача.ФактическаяДатаОкончания <> Дата(1,1,1) И РежимУчитыватьФакт Тогда
			СтрокаЗадача.ДатаОкончания = СтрокаЗадача.ФактическаяДатаОкончания;
		КонецЕсли;
	ИначеЕсли СтруктураИзменения.ИмяРеквизита = "УИД" Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "РекурсивныйПересчетПриИзмененииСроков: Некорректный вызов изменения УИД задачи на сервере. Обратитесь к разработчику.";
		Сообщение.Сообщить();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "РекурсивныйПересчетПриИзмененииСроков: неизвестный реквизит """ + СтруктураИзменения.ИмяРеквизита + """";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	КалендарьЗадачи = ?(ЗначениеЗаполнено(СтрокаЗадача.Календарь), СтрокаЗадача.Календарь, КалендарьПроекта);
	Если СтруктураИзменения.ИмяРеквизита = "ДатаОкончания" Тогда
		СтрокаЗадача.Длительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаЗадача.ДатаНачала, СтруктураИзменения.НовоеЗначение, КалендарьЗадачи, СтрокаЗадача.ЕдиницаВремени);
	ИначеЕсли СтрокаЗадача.РучнойВвод Тогда
		СтрокаЗадача.ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.ДатаНачала, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадача.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
	КонецЕсли;
	Если СтрокаЗадача.Предшественники.Количество() = 0 Тогда
		СтрокаЗадача.РДН = ДатаНачалаПроекта;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилища, УникальныйИдентификатор, СтруктураИзменения, МассивВозврата, РежимУчитыватьФакт) Экспорт
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		СтруктураТаблиц = РекурсивныйПересчетПолучитьСтруктуруТаблицПоУмолчанию();
	Иначе
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	КонецЕсли;
	ДатаНачалаПроекта = СтруктураТаблиц.ДатаНачалаПроекта;
	КалендарьПроекта = СтруктураТаблиц.КалендарьПроекта;
	СпособПланирования = СтруктураТаблиц.СпособПланирования;
	ТаблицаЗадач = СтруктураТаблиц.ТаблицаЗадач;
	ПолнаяТаблицаСвязей = СтруктураТаблиц.ПолнаяТаблицаСвязей;
	ТекущаяТаблицаСвязей = СтруктураТаблиц.ТекущаяТаблицаСвязей;
	УчитыватьФакт = СтруктураТаблиц.УчитыватьФакт;
	
	ЕстьОшибкиРасчетаСроков = Ложь;
	Если ТаблицаЗадач.Количество() > 0 И ДатаНачалаПроекта = Дата(1,1,1) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задана плановая дата начала старта проекта для открытого экземпляра версии. Расчет сроков невозможен.";
		Сообщение.Сообщить();
		ЕстьОшибкиРасчетаСроков = Истина;
	КонецЕсли;
	Если ТаблицаЗадач.Количество() > 0 И НЕ ЗначениеЗаполнено(КалендарьПроекта) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задан календарь проекта для открытого экземпляра версии. Расчет сроков невозможен.";
		Сообщение.Сообщить();
		ЕстьОшибкиРасчетаСроков = Истина;
	КонецЕсли;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибкиРасчетаСроков", ЕстьОшибкиРасчетаСроков);
	
	МассивВозврата = Новый Массив;
	Если ТипЗнч(СтруктураИзменения) = Тип("Массив") Тогда
		РекурсивныйПересчетОбработатьМассивИзмененийДерева(СтруктураИзменения, ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, СтруктураПараметров, РежимУчитыватьФакт);
	ИначеЕсли ТипЗнч(СтруктураИзменения) = Тип("Структура") Тогда
		МассивОбработки = Новый Массив;
		МассивОбработки.Добавить(СтруктураИзменения);
		РекурсивныйПересчетОбработатьМассивИзмененийДерева(МассивОбработки, ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, СтруктураПараметров, РежимУчитыватьФакт);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "РекурсивныйПересчетПриИзмененииДерева: неизвестный тип параметра изменения";
		Сообщение.Сообщить();
	КонецЕсли;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", ДатаНачалаПроекта);
	СтруктураТаблиц.Вставить("КалендарьПроекта", КалендарьПроекта);
	СтруктураТаблиц.Вставить("СпособПланирования", СпособПланирования);
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("УчитыватьФакт", РежимУчитыватьФакт);
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	Возврат АдресХранилища;
КонецФункции

&НаСервереБезКонтекста
Процедура РекурсивныйПересчетОбработатьМассивИзмененийДерева(МассивОбработки, ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, СтруктураПараметров, РежимУчитыватьФакт)
	РассчитыватьСтрокиОтУзла = Ложь;
	УзелРасчета = "";
	Для Каждого СтруктураИзменения ИЗ МассивОбработки Цикл
		Если НЕ СтруктураИзменения.Свойство("ИмяСобытия") Тогда
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "ДобавлениеЗадачи" Тогда
			// 1. Добавим элемент в таблицу
			//СтруктураДанныхЗадачи = Новый Структура("Идентификатор, ДатаНачала, ДатаОкончания, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель");
			СтрокаЗадача = ТаблицаЗадач.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗадача, СтруктураИзменения.ДанныеЗадачи);
			// 2. Попробуем растащить связи родителей на новый элемент
			//ТекущийЭлемент = СтрокаЗадача;
			//Пока НЕ ПустаяСтрока(ТекущийЭлемент.Родитель) Цикл
			//	ТекущийЭлемент = ТаблицаЗадач.Найти(ТекущийЭлемент.Родитель, "УИД");
			//	
			//КонецЦикла;
			//УзелРасчета = СтрокаЗадача.УИД;
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "УдалениеЗадачи" Тогда
			РекурсивныйПересчетУдалитьРекурсивно(СтруктураИзменения.ДанныеЗадачи.УИД, ТаблицаЗадач, ТекущаяТаблицаСвязей);
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "ИзменитьУИДПредшественника" Тогда
			СтрокиПредшественники = ТекущаяТаблицаСвязей.НайтиСтроки(Новый Структура("УИД", СтруктураИзменения.ДанныеЗадачи.УИД));
			Для Каждого СтрокаПредшественник ИЗ СтрокиПредшественники Цикл
				СтрокаПредшественник.УИД = СтруктураИзменения.ДанныеЗадачи.НовыйУИД;
			КонецЦикла;
			СтрокиПоследователи = ТекущаяТаблицаСвязей.НайтиСтроки(Новый Структура("ПредшественникУИД", СтруктураИзменения.ДанныеЗадачи.УИД));
			Для Каждого СтрокаПоследователь ИЗ СтрокиПоследователи Цикл
				СтрокаПоследователь.ПредшественникУИД = СтруктураИзменения.ДанныеЗадачи.НовыйУИД;
			КонецЦикла;
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "ИзменитьПараметрыПредшественника" Тогда
			СтрокиПредшественники = ТекущаяТаблицаСвязей.НайтиСтроки(Новый Структура("УИД, ПредшественникУИД", СтруктураИзменения.ДанныеЗадачи.УИД, СтруктураИзменения.ДанныеЗадачи.ПредшественникУИД));
			Для Каждого СтрокаПредшественник ИЗ СтрокиПредшественники Цикл
				ЗаполнитьЗначенияСвойств(СтрокаПредшественник, СтруктураИзменения.ДанныеЗадачи);
			КонецЦикла;
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "УдалитьПредшественника" Тогда
			СтрокиПредшественники = ТекущаяТаблицаСвязей.НайтиСтроки(СтруктураИзменения.ДанныеЗадачи);
			Для Каждого СтрокаПредшественник ИЗ СтрокиПредшественники Цикл
				ТекущаяТаблицаСвязей.Удалить(СтрокаПредшественник);
			КонецЦикла;
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "ДобавитьПредшественника" Тогда
			СтрокаПредшественник = ТекущаяТаблицаСвязей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПредшественник, СтруктураИзменения.ДанныеЗадачи);
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "ИзменениеДатыНачалаПроекта" Тогда
			ДатаНачалаПроекта = СтруктураИзменения.ДанныеПроекта.ДатаНачала;
			Возврат;
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "ИзменениеКалендаряПроекта" Тогда
			КалендарьПроекта = СтруктураИзменения.ДанныеПроекта.Календарь;
			Возврат;
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "ИзменениеРеквизита" Тогда
			СтрокаЗадача = ТаблицаЗадач.Найти(СтруктураИзменения.УИД, "УИД");
			Если СтруктураИзменения.ИмяРеквизита = "Длительность" Тогда
				СтрокаЗадача.Длительность = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ДатаНачала" Тогда
				СтрокаЗадача.ДатаНачала = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ДатаОкончания" Тогда
				СтрокаЗадача.ДатаОкончания = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "РучнойВвод" Тогда
				СтрокаЗадача.РучнойВвод = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ЕдиницаВремени" Тогда
				СтрокаЗадача.ЕдиницаВремени = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "Календарь" Тогда
				СтрокаЗадача.Календарь = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ТипОграничения" Тогда
				СтрокаЗадача.ТипОграничения = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ДатаОграничения" Тогда
				СтрокаЗадача.ДатаОграничения = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ФактическаяДатаНачала" Тогда
				СтрокаЗадача.ФактическаяДатаНачала = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "ФактическаяДатаОкончания" Тогда
				СтрокаЗадача.ФактическаяДатаОкончания = СтруктураИзменения.НовоеЗначение;
			ИначеЕсли СтруктураИзменения.ИмяРеквизита = "Родитель" Тогда
				СтрокаЗадача.Родитель = СтруктураИзменения.НовоеЗначение
			КонецЕсли;
			КалендарьЗадачи = ?(ЗначениеЗаполнено(СтрокаЗадача.Календарь), СтрокаЗадача.Календарь, КалендарьПроекта);
			Если СтруктураИзменения.ИмяРеквизита = "ДатаОкончания" Тогда
				СтрокаЗадача.Длительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаЗадача.ДатаНачала, СтруктураИзменения.НовоеЗначение, КалендарьЗадачи, СтрокаЗадача.ЕдиницаВремени);
			ИначеЕсли СтрокаЗадача.РучнойВвод Тогда
				СтрокаЗадача.ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.ДатаНачала, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадача.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
			КонецЕсли;
		ИначеЕсли СтруктураИзменения.ИмяСобытия = "" Тогда
		КонецЕсли;
	КонецЦикла;
	РекурсивныйПересчетПерестроитьПолнуюТаблицуСвязей(ТаблицаЗадач, ПолнаяТаблицаСвязей, ТекущаяТаблицаСвязей, РежимУчитыватьФакт, КалендарьПроекта, СтруктураПараметров);
	РекурсивныйПересчетПолныйПрямойПересчет(ТаблицаЗадач, ПолнаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, УзелРасчета, СтруктураПараметров);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РекурсивныйПересчетУдалитьРекурсивно(УИД, ТаблицаЗадач, ТекущаяТаблицаСвязей)
	СвязиОт = ТекущаяТаблицаСвязей.НайтиСтроки(Новый Структура("УИД", УИД));
	Для Каждого СвязьОт ИЗ СвязиОт Цикл
		ТекущаяТаблицаСвязей.Удалить(СвязьОт);
	КонецЦикла;
	
	СвязиНа = ТекущаяТаблицаСвязей.НайтиСтроки(Новый Структура("ПредшественникУИД", УИД));
	Для Каждого СвязьНа ИЗ СвязиНа Цикл
		ТекущаяТаблицаСвязей.Удалить(СвязьНа);
	КонецЦикла;
	
	СтрокиПодчиненные = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", УИД));
	Для Каждого СтрокаПодчиненный ИЗ СтрокиПодчиненные Цикл
		РекурсивныйПересчетУдалитьРекурсивно(СтрокаПодчиненный.УИД, ТаблицаЗадач, ТекущаяТаблицаСвязей);
	КонецЦикла;
	
	К = 0;
	Пока К < ТекущаяТаблицаСвязей.Количество() Цикл
		СтрокаПредшественник = ТекущаяТаблицаСвязей.Получить(К);
		Если СтрокаПредшественник.УИД = УИД ИЛИ СтрокаПредшественник.ПредшественникУИД = УИД тогда
			ТекущаяТаблицаСвязей.Удалить(К);
			Продолжить;
		КонецЕсли;
		К = К + 1;
	КонецЦикла;
	
	СтрокаЗадача = ТаблицаЗадач.Найти(УИД, "УИД");
	ТаблицаЗадач.Удалить(СтрокаЗадача);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РекурсивныйПересчетПолныйПрямойПересчет(ТаблицаЗадач, ПолнаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, НачальныйУзел, СтруктураПараметров)
	
	МассивПоследнийУровень = Новый Массив;
	ТекстВывода = "";
	Если ПустаяСтрока(НачальныйУзел) Тогда
		МассивПервыйУровень = ТаблицаЗадач.НайтиСтроки(Новый Структура("НулевойУровень", Истина));
	Иначе
		МассивПервыйУровень = ТаблицаЗадач.НайтиСтроки(Новый Структура("УИД", НачальныйУзел));
	КонецЕсли;
	Для Каждого СтрокаЗадача ИЗ МассивПервыйУровень Цикл
		РекурсивныйПересчетОбнулитьЭлементыРекурсивноПрямой(СтрокаЗадача.УИД, ТаблицаЗадач, ПолнаяТаблицаСвязей);
	КонецЦикла;
	Для Каждого СтрокаЗадача ИЗ МассивПервыйУровень Цикл
		СтрокаЗадача.РДН = ДатаНачалаПроекта;
		РекурсивныйПересчетПрямойОбходУзла(ТаблицаЗадач.Индекс(СтрокаЗадача), ТаблицаЗадач, ПолнаяТаблицаСвязей, КалендарьПроекта, МассивВозврата, ТекстВывода, "", МассивПоследнийУровень, СтруктураПараметров);
	КонецЦикла;
	
	МассивРодителейВерхнегоУровня = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", ""));
	Для Каждого ЭлементМассиваРодителей ИЗ МассивРодителейВерхнегоУровня Цикл
		РекурсивныйПересчетПересчетСроковРодителейРекурсивно(ТаблицаЗадач.Индекс(ЭлементМассиваРодителей), ТаблицаЗадач, КалендарьПроекта, МассивВозврата);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция РекурсивныйПересчетВсехСроковПересчетПоУровням(АдресВременногоХранилища, УникальныйИдентификатор, МассивВозврата, РежимУчитыватьФакт) Экспорт
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		СтруктураТаблиц = РекурсивныйПересчетПолучитьСтруктуруТаблицПоУмолчанию();
	Иначе
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	КонецЕсли;
	ДатаНачалаПроекта = СтруктураТаблиц.ДатаНачалаПроекта;
	КалендарьПроекта = СтруктураТаблиц.КалендарьПроекта;
	СпособПланирования = СтруктураТаблиц.СпособПланирования;
	ТаблицаЗадач = СтруктураТаблиц.ТаблицаЗадач;
	ПолнаяТаблицаСвязей = СтруктураТаблиц.ПолнаяТаблицаСвязей;
	ТекущаяТаблицаСвязей = СтруктураТаблиц.ТекущаяТаблицаСвязей;
	УчитыватьФакт = СтруктураТаблиц.УчитыватьФакт;
	
	ЕстьОшибкиРасчетаСроков = Ложь;
	Если ТаблицаЗадач.Количество() > 0 И ДатаНачалаПроекта = Дата(1,1,1) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задана плановая дата начала старта проекта для открытого экземпляра версии. Расчет сроков невозможен.";
		Сообщение.Сообщить();
		ЕстьОшибкиРасчетаСроков = Истина;
	КонецЕсли;
	Если ТаблицаЗадач.Количество() > 0 И НЕ ЗначениеЗаполнено(КалендарьПроекта) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не задан календарь проекта для открытого экземпляра версии. Расчет сроков невозможен.";
		Сообщение.Сообщить();
		ЕстьОшибкиРасчетаСроков = Истина;
	КонецЕсли;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЕстьОшибкиРасчетаСроков", ЕстьОшибкиРасчетаСроков);
	
	Если РежимУчитыватьФакт <> УчитыватьФакт Тогда
		РекурсивныйПересчетОбновитьУчетФакта(ТаблицаЗадач, РежимУчитыватьФакт, КалендарьПроекта, СтруктураПараметров);
		МассивСтрокЗадач = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", ""));
	КонецЕсли;
	
	РекурсивныйПересчетОбновитьТаблицыВнешнихСвязей(ТаблицаЗадач, ПолнаяТаблицаСвязей, КалендарьПроекта);
	
	МаксимальныйУровень = РекурсивныйПересчетСделатьПрямойПроходПоУровням(ТаблицаЗадач, ПолнаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, СтруктураПараметров);
	
	РекурсивныйПересчетСделатьОбратныйПроходПоУровням(ТаблицаЗадач, ПолнаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, СтруктураПараметров);
	Если ТаблицаЗадач.Найти(1, "ТипОграниченияЧисло") <> Неопределено Тогда
		РекурсивныйПересчетСделатьПрямойПроходСМодификаторами(ТаблицаЗадач, ПолнаяТаблицаСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, СтруктураПараметров);
	КонецЕсли;
	
	МассивРодителейВерхнегоУровня = ТаблицаЗадач.НайтиСтроки(Новый Структура("Родитель", ""));
	Для Каждого ЭлементМассиваРодителей ИЗ МассивРодителейВерхнегоУровня Цикл
		РекурсивныйПересчетПересчетСроковРодителейРекурсивно(ТаблицаЗадач.Индекс(ЭлементМассиваРодителей), ТаблицаЗадач, КалендарьПроекта, МассивВозврата);
	КонецЦикла;
	
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", ДатаНачалаПроекта);
	СтруктураТаблиц.Вставить("КалендарьПроекта", КалендарьПроекта);
	СтруктураТаблиц.Вставить("СпособПланирования", СпособПланирования);
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("УчитыватьФакт", РежимУчитыватьФакт);
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	Возврат АдресХранилища;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетОбновитьТаблицыВнешнихСвязей(ТаблицаЗадач, ПолныйСписокРассчитанныхСвязей, КалендарьПроекта)
	СтрокиВнешние = ПолныйСписокРассчитанныхСвязей.НайтиСтроки(Новый Структура("Внешний", Истина));
	МассивВнешних = Новый Массив;
	ТаблицаЗадач.Колонки.Добавить("ВнешняяЗадача");
	Для Каждого СтрокаВнешние ИЗ СтрокиВнешние Цикл
		СтрокаЗадача = ТаблицаЗадач.Найти(СтрокаВнешние.ПредшественникУИД, "УИД");
		Если СтрокаЗадача = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаЗадача.ВнешняяЗадача = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаВнешние.ПредшественникУИД));
		МассивВнешних.Добавить(СтрокаЗадача.ВнешняяЗадача);
	КонецЦикла;
	Если МассивВнешних.Количество() > 0 Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗапросСроки = Новый Запрос;
		ЗапросСроки.Текст =
		"ВЫБРАТЬ
		|	грзнтСрокиПроектов.Задача,
		|	грзнтСрокиПроектов.ДатаНачала,
		|	грзнтСрокиПроектов.ДатаОкончания
		|ИЗ
		|	РегистрСведений.грзнтСрокиПроектов КАК грзнтСрокиПроектов
		|ГДЕ
		|	грзнтСрокиПроектов.Задача В (&МассивЗадач)
		|	И грзнтСрокиПроектов.ЭкземплярВерсии = грзнтСрокиПроектов.Задача.грзнтПроектЗадачи.грзнтРедактируемыйЭкземплярВерсии";
		ЗапросСроки.УстановитьПараметр("МассивЗадач", МассивВнешних);
		ВыборкаСроки = ЗапросСроки.Выполнить().Выбрать();
		Пока ВыборкаСроки.Следующий() Цикл
			СтрокаЗадача = ТаблицаЗадач.Найти(ВыборкаСроки.Задача, "ВнешняяЗадача");
			Если СтрокаЗадача <> Неопределено Тогда
				СтрокаЗадача.ДатаНачала = ВыборкаСроки.ДатаНачала;
				СтрокаЗадача.ДатаОкончания = ВыборкаСроки.ДатаОкончания;
				СтрокаЗадача.ДатаОграничения = ВыборкаСроки.ДатаНачала;
				СтрокаЗадача.Длительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаЗадача.ДатаНачала, СтрокаЗадача.ДатаОкончания, КалендарьПроекта, СтрокаЗадача.ЕдиницаВремени);
			КонецЕсли;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	ТаблицаЗадач.Колонки.Удалить(ТаблицаЗадач.Колонки.ВнешняяЗадача);
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетСделатьПрямойПроходПоУровням(ТаблицаЗадач, ПолныйСписокРассчитанныхСвязей, ДатаНачалаПроекта, КалендарьПроекта, СтруктураПараметров)
	ТекущийУровень = 0;
	ПустаяДата = Дата(1,1,1);
	ЗадачиТекущегоУровня = ТаблицаЗадач.НайтиСтроки(Новый Структура("Уровень", ТекущийУровень));
	Пока ЗадачиТекущегоУровня.Количество() > 0 Цикл
		Для Каждого ЗадачаТекущегоУровня ИЗ ЗадачиТекущегоУровня Цикл
			Если ТаблицаЗадач.Найти(ЗадачаТекущегоУровня.УИД, "Родитель") <> Неопределено Тогда
				Продолжить
			КонецЕсли;
			Если НЕ ЗадачаТекущегоУровня.РучнойВвод Тогда
				ЗадачаТекущегоУровня.РДН = ПустаяДата;
				ЗадачаТекущегоУровня.РДО = ПустаяДата;
			КонецЕсли;
			КалендарьЗадачи = ?(ЗначениеЗаполнено(ЗадачаТекущегоУровня.Календарь), ЗадачаТекущегоУровня.Календарь, КалендарьПроекта);
			Если ТекущийУровень = 0 ИЛИ ЗадачаТекущегоУровня.РучнойВвод Тогда
				Если ЗадачаТекущегоУровня.РучнойВвод Тогда
					ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ДатаНачала;
					//ЗадачаТекущегоУровня.РДО = ЗадачаТекущегоУровня.ДатаОкончания;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				Иначе
					ЗадачаТекущегоУровня.РДН = ДатаНачалаПроекта;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				КонецЕсли;
			Иначе
				Если ЗадачаТекущегоУровня.Предшественники.Количество() > 0 И ЗадачаТекущегоУровня.Предшественники.Получить(0) = Неопределено Тогда
					ЗадачаТекущегоУровня.Предшественники = ПолныйСписокРассчитанныхСвязей.НайтиСтроки(Новый Структура("УИД", ЗадачаТекущегоУровня.УИД));
				КонецЕсли;
				СоответствиеДатаНачало = Новый Соответствие;
				СоответствиеДатаОкончания = Новый Соответствие;
				Для Каждого СтрокаСвязей ИЗ ЗадачаТекущегоУровня.Предшественники Цикл
					Если СтрокаСвязей.СтрокаПредшественник = Неопределено Тогда
						СтрокаСвязей.СтрокаПредшественник = ТаблицаЗадач.Найти(СтрокаСвязей.ПредшественникУИД, "УИД");
					КонецЕсли;
					ЗадачаПредшественник = СтрокаСвязей.СтрокаПредшественник;
					Если СтрокаСвязей.ТипСвязиЧисло = 1 Тогда		// НН
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.РДН, СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, Истина, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаНачало.Получить(СтрокаСвязей.ГруппаЗадач);
						Если СтрокаСвязей.ГруппаЗадач = "" Тогда
							Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < НоваяДата Тогда
								СоответствиеДатаНачало.Вставить("", НоваяДата);
							КонецЕсли;
						Иначе
							Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия > НоваяДата Тогда
								СоответствиеДатаНачало.Вставить(СтрокаСвязей.ГруппаЗадач, НоваяДата);
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 2 Тогда	// НО
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.РДН, СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, Истина, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаОкончания.Получить(СтрокаСвязей.ГруппаЗадач);
						Если СтрокаСвязей.ГруппаЗадач = "" Тогда
							Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < НоваяДата Тогда
								СоответствиеДатаОкончания.Вставить("", НоваяДата);
							КонецЕсли;
						Иначе
							Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия > НоваяДата Тогда
								СоответствиеДатаОкончания.Вставить(СтрокаСвязей.ГрупаЗадач, НоваяДата);
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 3 Тогда	// ОН
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.РДО, СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность > 0, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаНачало.Получить("");
						Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < НоваяДата Тогда
							СоответствиеДатаНачало.Вставить("", НоваяДата);
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 4 Тогда	// ОО
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.РДО, СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, Ложь, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаОкончания.Получить("");
						Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < НоваяДата Тогда
							СоответствиеДатаОкончания.Вставить("", НоваяДата);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				мДатаНачала = ПустаяДата;
				мДатаОкончания = ПустаяДата;
				Для Каждого КлючИЗначение ИЗ СоответствиеДатаНачало Цикл
					Если мДатаНачала < КлючИЗначение.Значение Тогда
						мДатаНачала = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючИЗначение ИЗ СоответствиеДатаОкончания Цикл
					Если мДатаОкончания < КлючИЗначение.Значение Тогда
						мДатаОкончания = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
				Если мДатаНачала <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДН = мДатаНачала;
				КонецЕсли;
				Если мДатаОкончания <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДО = мДатаОкончания;
				КонецЕсли;
		
				Если ЗадачаТекущегоУровня.РДН <> ПустаяДата Тогда
					НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
					Если ЗадачаТекущегоУровня.РДО = ПустаяДата ИЛИ ЗадачаТекущегоУровня.РДО < НоваяДата Тогда
						ЗадачаТекущегоУровня.РДО = НоваяДата;
					ИначеЕсли ЗадачаТекущегоУровня.РДО > НоваяДата Тогда
						ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				Иначе
					ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
				КонецЕсли;
		
			КонецЕсли;
			
			
			Если ЗадачаТекущегоУровня.ТипОграниченияЧисло = Неопределено ИЛИ ЗадачаТекущегоУровня.ТипОграниченияЧисло = 0 Тогда
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 1 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноПозже") Тогда
				//ЗадачаТекущегоУровня.ДатаНачала = ЗадачаТекущегоУровня.ПДН;
				//ЗадачаТекущегоУровня.ДатаОкончания = ЗадачаТекущегоУровня.ПДО;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 2 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноРаньше") Тогда
				
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 3 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеПозднее") Тогда
				Если ЗадачаТекущегоУровня.РДН > ЗадачаТекущегоУровня.ДатаОграничения И ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ДатаОграничения;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 4 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеРанее") Тогда
				Если ЗадачаТекущегоУровня.РДН < ЗадачаТекущегоУровня.ДатаОграничения И ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ДатаОграничения;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 5 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеПозднее") Тогда
				Если ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаТекущегоУровня.ДатаОграничения, КалендарьЗадачи);
					Если ЗадачаТекущегоУровня.РДО > ДатаОкончания Тогда
						ЗадачаТекущегоУровня.РДО = ДатаОкончания;
						ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 6 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеРанее") Тогда
				Если ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					//ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаТекущегоУровня.ДатаОграничения, КалендарьЗадачи);
					ДатаОкончания = ЗадачаТекущегоУровня.ДатаОграничения;
					Если ЗадачаТекущегоУровня.РДО < ДатаОкончания Тогда
						ЗадачаТекущегоУровня.РДО = ДатаОкончания;
						ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 7 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало") Тогда
				Если ЗадачаТекущегоУровня.РДН <> ЗадачаТекущегоУровня.ДатаОграничения И ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ДатаОграничения;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 8 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеОкончание") Тогда
				Если ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаТекущегоУровня.ДатаОграничения, КалендарьЗадачи);
					Если ЗадачаТекущегоУровня.РДО <> ДатаОкончания Тогда
						ЗадачаТекущегоУровня.РДО = ДатаОкончания;
						ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗадачаТекущегоУровня.ДатаНачала = ЗадачаТекущегоУровня.РДН;
			ЗадачаТекущегоУровня.ДатаОкончания = ЗадачаТекущегоУровня.РДО;
		КонецЦикла;
		ТекущийУровень = ТекущийУровень + 1;
		ЗадачиТекущегоУровня = ТаблицаЗадач.НайтиСтроки(Новый Структура("Уровень", ТекущийУровень));
	КонецЦикла;
	Возврат ТекущийУровень;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетСделатьОбратныйПроходПоУровням(ТаблицаЗадач, ПолныйСписокРассчитанныхСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, СтруктураПараметров)
	ПустаяДата = Дата(1,1,1);
	ТекущаяДата = ТекущаяДата();
	МассивЛистьевДерева = ТаблицаЗадач.НайтиСтроки(Новый Структура("ПоследнийУровень", Истина));
	МаксДатаОкончания = ПустаяДата;
	МаксимальныйУровень = 0;
	Для Каждого СтрокаЗадачаТекущегоУровня ИЗ МассивЛистьевДерева Цикл
		Если МаксимальныйУровень < СтрокаЗадачаТекущегоУровня.Уровень Тогда
			МаксимальныйУровень = СтрокаЗадачаТекущегоУровня.Уровень;
		КонецЕсли;
		Если СтрокаЗадачаТекущегоУровня.РДО > МаксДатаОкончания ИЛИ МаксДатаОкончания = Дата(1,1,1) Тогда
			МаксДатаОкончания = СтрокаЗадачаТекущегоУровня.РДО;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЗадачаТекущегоУровня ИЗ МассивЛистьевДерева Цикл
		КалендарьЗадачи = ?(ЗначениеЗаполнено(СтрокаЗадачаТекущегоУровня.Календарь), СтрокаЗадачаТекущегоУровня.Календарь, КалендарьПроекта);
		СтрокаЗадачаТекущегоУровня.ПДО = МаксДатаОкончания;
		СтрокаЗадачаТекущегоУровня.ПДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадачаТекущегоУровня.ПДО, -СтрокаЗадачаТекущегоУровня.Длительность, СтрокаЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадачаТекущегоУровня.Длительность <> 0 И СтрокаЗадачаТекущегоУровня.ПДО <> НачалоДня(СтрокаЗадачаТекущегоУровня.ПДО), Ложь, СтруктураПараметров);
	КонецЦикла;
	//МаксимальныйУровень = МаксимальныйУровень - 1;
	
	Пока МаксимальныйУровень >= 0 Цикл
		ТаблицаЗадачТекущегоУровня = ТаблицаЗадач.НайтиСтроки(Новый Структура("Уровень", МаксимальныйУровень));
		Для Каждого СтрокаЗадачаТекущегоУровня ИЗ ТаблицаЗадачТекущегоУровня Цикл
			Если ТаблицаЗадач.Найти(СтрокаЗадачаТекущегоУровня.УИД, "Родитель") <> Неопределено Тогда
				Продолжить
			КонецЕсли;
			Если СтрокаЗадачаТекущегоУровня.Последователи.Количество() > 0 Тогда
				СтрокаЗадачаТекущегоУровня.ПДН = ПустаяДата;
				СтрокаЗадачаТекущегоУровня.ПДО = ПустаяДата;
				Если СтрокаЗадачаТекущегоУровня.Последователи.Получить(0) = Неопределено Тогда
					СтрокаЗадачаТекущегоУровня.Последователи = ПолныйСписокРассчитанныхСвязей.НайтиСтроки(Новый Структура("ПредшественникУИД", СтрокаЗадачаТекущегоУровня.УИД));
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаЗадачаТекущегоУровня.РучнойВвод Тогда
				СтрокаЗадачаТекущегоУровня.ПДН = СтрокаЗадачаТекущегоУровня.ДатаНачала;
				//СтрокаЗадачаТекущегоУровня.ПДО = СтрокаЗадачаТекущегоУровня.ДатаОкончания
				СтрокаЗадачаТекущегоУровня.ПДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадачаТекущегоУровня.ПДН, СтрокаЗадачаТекущегоУровня.Длительность, СтрокаЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
			Иначе
				СоответствиеДатаНачала = Новый Соответствие;
				СоответствиеДатаОкончания = Новый Соответствие;
				
				Для Каждого СтрокаСвязей ИЗ СтрокаЗадачаТекущегоУровня.Последователи Цикл
					Если СтрокаСвязей.СтрокаЗадача = Неопределено Тогда
						СтрокаСвязей.СтрокаЗадача = ТаблицаЗадач.Найти(СтрокаСвязей.УИД, "УИД");
					КонецЕсли;
					ЗадачаСледующегоУровня = СтрокаСвязей.СтрокаЗадача;
					КалендарьЗадачи = ?(ЗначениеЗаполнено(ЗадачаСледующегоУровня.Календарь), ЗадачаСледующегоУровня.Календарь, КалендарьПроекта);
					Если СтрокаСвязей.ТипСвязиЧисло = 1 Тогда		//	НН
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаСледующегоУровня.ПДН, -СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, Ложь, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаНачала.Получить("");
						Если ДатаСоответствия = Неопределено ИЛИ НоваяДата < ДатаСоответствия Тогда
							СоответствиеДатаНачала.Вставить("", НоваяДата);
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 2 Тогда	//	НО
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаСледующегоУровня.ПДО, -СтрокаСвязей.Задержка, ЗадачаСледующегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаНачала.Получить("");
						Если ДатаСоответствия = Неопределено ИЛИ НоваяДата < ДатаСоответствия Тогда
							СоответствиеДатаНачала.Вставить("", НоваяДата);
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 3 Тогда	//	ОН
						//НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаСледующегоУровня.ПДН, -СтрокаСвязей.Задержка, ЗадачаСледующегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаСледующегоУровня.Длительность <> 0 И ЗадачаСледующегоУровня.ПДН <> грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаСледующегоУровня.ПДН, КалендарьЗадачи), СтруктураПараметров);
						//НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаСледующегоУровня.ПДН, -СтрокаСвязей.Задержка, ЗадачаСледующегоУровня.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадачаТекущегоУровня.Предшественники.Количество() = 0, ЗадачаСледующегоУровня.Длительность <> 0 И ЗадачаСледующегоУровня.ПДН <> грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаСледующегоУровня.ПДН, КалендарьЗадачи), СтруктураПараметров);
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаСледующегоУровня.ПДН, -СтрокаСвязей.Задержка, ЗадачаСледующегоУровня.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадачаТекущегоУровня.Предшественники.Количество() = 0 И СтрокаЗадачаТекущегоУровня.Длительность = 0, ЗадачаСледующегоУровня.Длительность <> 0 И ЗадачаСледующегоУровня.ПДН <> грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаСледующегоУровня.ПДН, КалендарьЗадачи), СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаОкончания.Получить("");
						Если ДатаСоответствия = Неопределено ИЛИ НоваяДата < ДатаСоответствия Тогда
							СоответствиеДатаОкончания.Вставить("", НоваяДата);
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 4 Тогда	// ОО
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаСледующегоУровня.ПДО, -СтрокаСвязей.Задержка, ЗадачаСледующегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, Истина, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаОкончания.Получить("");
						Если ДатаСоответствия = Неопределено ИЛИ НоваяДата < ДатаСоответствия Тогда
							СоответствиеДатаОкончания.Вставить("", НоваяДата);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				БольшаяДата = Дата(2999, 12, 31);
				мДатаНачала = БольшаяДата;
				мДатаОкончания = БольшаяДата;
				Для Каждого КлючИЗначение ИЗ СоответствиеДатаНачала Цикл
					Если мДатаНачала > КлючИЗначение.Значение Тогда
						мДатаНачала = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючИЗначение ИЗ СоответствиеДатаОкончания Цикл
					Если мДатаОкончания > КлючИЗначение.Значение Тогда
						мДатаОкончания = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
				Если мДатаНачала <> БольшаяДата Тогда
					СтрокаЗадачаТекущегоУровня.ПДН = мДатаНачала;
				КонецЕсли;
				Если мДатаОкончания <> БольшаяДата Тогда
					СтрокаЗадачаТекущегоУровня.ПДО = мДатаОкончания;
				КонецЕсли;
			
				Если СтрокаЗадачаТекущегоУровня.ПДН <> ПустаяДата Тогда
					НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадачаТекущегоУровня.ПДН, СтрокаЗадачаТекущегоУровня.Длительность, СтрокаЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, СтрокаЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
					Если СтрокаЗадачаТекущегоУровня.ПДО = ПустаяДата ИЛИ СтрокаЗадачаТекущегоУровня.ПДО > НоваяДата Тогда
						СтрокаЗадачаТекущегоУровня.ПДО = НоваяДата;
					ИначеЕсли СтрокаЗадачаТекущегоУровня.ПДО < НоваяДата Тогда
						СтрокаЗадачаТекущегоУровня.ПДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадачаТекущегоУровня.ПДО, -СтрокаЗадачаТекущегоУровня.Длительность, СтрокаЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадачаТекущегоУровня.Длительность <> 0 И СтрокаЗадачаТекущегоУровня.ПДО <> НачалоДня(СтрокаЗадачаТекущегоУровня.ПДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				Иначе
					СтрокаЗадачаТекущегоУровня.ПДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадачаТекущегоУровня.ПДО, -СтрокаЗадачаТекущегоУровня.Длительность, СтрокаЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадачаТекущегоУровня.Длительность <> 0 И СтрокаЗадачаТекущегоУровня.ПДО <> НачалоДня(СтрокаЗадачаТекущегоУровня.ПДО), Ложь, СтруктураПараметров);
				КонецЕсли;
			КонецЕсли; // Ручной ввод
			
			БылиИзменения = Ложь;
			СтрокаЗадачаТекущегоУровня.ДатаНачалаВыделено = Ложь;
			СтрокаЗадачаТекущегоУровня.ДатаОкончанияВыделено = Ложь;
			Если СтрокаЗадачаТекущегоУровня.ДатаНачала <> СтрокаЗадачаТекущегоУровня.хДатаНачала Тогда
				Если НачалоДня(СтрокаЗадачаТекущегоУровня.ДатаНачала) <> НачалоДня(СтрокаЗадачаТекущегоУровня.хДатаНачала) Тогда
					СтрокаЗадачаТекущегоУровня.ДатаНачалаВыделено = Истина;
				КонецЕсли;
				СтрокаЗадачаТекущегоУровня.хДатаНачала = СтрокаЗадачаТекущегоУровня.ДатаНачала;
				СтрокаЗадачаТекущегоУровня.КонтрактныйДатаНачалаОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадачаТекущегоУровня.КонтрактныйДатаНачала, СтрокаЗадачаТекущегоУровня.ДатаНачала);
			КонецЕсли;
			НоваяАктуализация = ?(СтрокаЗадачаТекущегоУровня.ФактическаяДатаНачала = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадачаТекущегоУровня.ДатаНачала, ТекущаяДата), 0);
			Если СтрокаЗадачаТекущегоУровня.АктуализацияДатаНачалаОтклонение <> НоваяАктуализация Тогда
				СтрокаЗадачаТекущегоУровня.АктуализацияДатаНачалаОтклонение = НоваяАктуализация;
				БылиИзменения = Истина;
			КонецЕсли;
			Если СтрокаЗадачаТекущегоУровня.ДатаОкончания <> СтрокаЗадачаТекущегоУровня.хДатаОкончания Тогда
				Если НачалоДня(СтрокаЗадачаТекущегоУровня.ДатаОкончания) <> НачалоДня(СтрокаЗадачаТекущегоУровня.хДатаОкончания) Тогда
					СтрокаЗадачаТекущегоУровня.ДатаОкончанияВыделено = Истина;
				КонецЕсли;
				СтрокаЗадачаТекущегоУровня.хДатаОкончания = СтрокаЗадачаТекущегоУровня.ДатаОкончания;
				СтрокаЗадачаТекущегоУровня.КонтрактныйДатаОкончанияОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадачаТекущегоУровня.КонтрактныйДатаОкончания, СтрокаЗадачаТекущегоУровня.ДатаОкончания);
			КонецЕсли;
			НоваяАктуализация = ?(СтрокаЗадачаТекущегоУровня.ФактическаяДатаОкончания = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадачаТекущегоУровня.ДатаОкончания, ТекущаяДата), 0);
			Если СтрокаЗадачаТекущегоУровня.АктуализацияДатаОкончанияОтклонение <> НоваяАктуализация Тогда
				СтрокаЗадачаТекущегоУровня.АктуализацияДатаОкончанияОтклонение = НоваяАктуализация;
				БылиИзменения = Истина;
			КонецЕсли;
			
			БылиИзменения = БылиИзменения ИЛИ СтрокаЗадачаТекущегоУровня.ДатаНачала <> СтрокаЗадачаТекущегоУровня.хДатаНачала ИЛИ СтрокаЗадачаТекущегоУровня.ДатаОкончания <> СтрокаЗадачаТекущегоУровня.хДатаОкончания
				ИЛИ СтрокаЗадачаТекущегоУровня.РДН <> СтрокаЗадачаТекущегоУровня.хРДН ИЛИ СтрокаЗадачаТекущегоУровня.РДО <> СтрокаЗадачаТекущегоУровня.хРДО
				ИЛИ СтрокаЗадачаТекущегоУровня.ПДН <> СтрокаЗадачаТекущегоУровня.хПДН ИЛИ СтрокаЗадачаТекущегоУровня.ПДО <> СтрокаЗадачаТекущегоУровня.хПДО
				ИЛИ СтрокаЗадачаТекущегоУровня.Длительность <> СтрокаЗадачаТекущегоУровня.хДлительность;
			Если СтрокаЗадачаТекущегоУровня.РДН = СтрокаЗадачаТекущегоУровня.ПДН И СтрокаЗадачаТекущегоУровня.РДО = СтрокаЗадачаТекущегоУровня.ПДО Тогда
				БылиИзменения = БылиИзменения ИЛИ НЕ СтрокаЗадачаТекущегоУровня.КритическийПуть;
				СтрокаЗадачаТекущегоУровня.КритическийПуть = Истина;
			Иначе
				БылиИзменения = БылиИзменения ИЛИ СтрокаЗадачаТекущегоУровня.КритическийПуть;
				СтрокаЗадачаТекущегоУровня.КритическийПуть = Ложь;
			КонецЕсли;
			//Если СтрокаЗадачаТекущегоУровня.ДатаНачала <> СтрокаЗадачаТекущегоУровня.хДатаНачала ИЛИ СтрокаЗадачаТекущегоУровня.ДатаОкончания <> СтрокаЗадачаТекущегоУровня.хДатаОкончания
			//	ИЛИ СтрокаЗадачаТекущегоУровня.РДН <> СтрокаЗадачаТекущегоУровня.хРДН ИЛИ СтрокаЗадачаТекущегоУровня.РДО <> СтрокаЗадачаТекущегоУровня.хРДО
			//	ИЛИ СтрокаЗадачаТекущегоУровня.ПДН <> СтрокаЗадачаТекущегоУровня.хПДН ИЛИ СтрокаЗадачаТекущегоУровня.ПДО <> СтрокаЗадачаТекущегоУровня.хПДО
			//	ИЛИ СтрокаЗадачаТекущегоУровня.Длительность <> СтрокаЗадачаТекущегоУровня.хДлительность Тогда
			Если БылиИзменения Тогда
				СтрокаЗадачаТекущегоУровня.хРДН = СтрокаЗадачаТекущегоУровня.РДН;
				СтрокаЗадачаТекущегоУровня.хРДО = СтрокаЗадачаТекущегоУровня.РДО;
				СтрокаЗадачаТекущегоУровня.хПДН = СтрокаЗадачаТекущегоУровня.ПДН;
				СтрокаЗадачаТекущегоУровня.хПДО = СтрокаЗадачаТекущегоУровня.ПДО;
				СтрокаЗадачаТекущегоУровня.хДлительность = СтрокаЗадачаТекущегоУровня.Длительность;
				
				СтрокаЗадачаТекущегоУровня.КонтрактныйДатаНачалаОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадачаТекущегоУровня.КонтрактныйДатаНачала, СтрокаЗадачаТекущегоУровня.ДатаНачала);
				СтрокаЗадачаТекущегоУровня.КонтрактныйДатаОкончанияОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадачаТекущегоУровня.КонтрактныйДатаОкончания, СтрокаЗадачаТекущегоУровня.ДатаОкончания);
				//СтрокаЗадачаТекущегоУровня.АктуализацияДатаНачалаОтклонение = ?(СтрокаЗадачаТекущегоУровня.ФактическаяДатаНачала = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадачаТекущегоУровня.ДатаНачала, ТекущаяДата), 0);
				//СтрокаЗадачаТекущегоУровня.АктуализацияДатаОкончанияОтклонение = ?(СтрокаЗадачаТекущегоУровня.ФактическаяДатаОкончания = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(СтрокаЗадачаТекущегоУровня.ДатаОкончания, ТекущаяДата), 0);
		
				СтруктураВозврата = Новый Структура("УИД, ДатаНачала, ДатаОкончания, РДН, РДО, ПДН, ПДО, Длительность, КритическийПуть, ДатаНачалаВыделено, ДатаОкончанияВыделено, ДлительностьВыделено, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение");
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, СтрокаЗадачаТекущегоУровня);
				СтруктураВозврата.Вставить("ИндексТаблицы", ТаблицаЗадач.Индекс(СтрокаЗадачаТекущегоУровня));
				МассивВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
				
		КонецЦикла;
		МаксимальныйУровень = МаксимальныйУровень - 1;
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетСделатьПрямойПроходСМодификаторами(ТаблицаЗадач, ПолныйСписокРассчитанныхСвязей, ДатаНачалаПроекта, КалендарьПроекта, МассивВозврата, СтруктураПараметров)
	ТекущийУровень = 9999;
	СтрокиОграничений = ТаблицаЗадач.НайтиСтроки(Новый Структура("ТипОграниченияЧисло", 1));
	Для Каждого СтрокаОграничения ИЗ СтрокиОграничений Цикл
		Если СтрокаОграничения.Уровень < ТекущийУровень Тогда
			ТекущийУровень = СтрокаОграничения.Уровень;
		КонецЕсли;
	КонецЦикла;
	
	ПустаяДата = Дата(1,1,1);
	ТекущаяДата = ТекущаяДата();
	ЗадачиТекущегоУровня = ТаблицаЗадач.НайтиСтроки(Новый Структура("Уровень", ТекущийУровень));
	Пока ЗадачиТекущегоУровня.Количество() > 0 Цикл
		Для Каждого ЗадачаТекущегоУровня ИЗ ЗадачиТекущегоУровня Цикл
			Если ТаблицаЗадач.Найти(ЗадачаТекущегоУровня.УИД, "Родитель") <> Неопределено Тогда
				Продолжить
			КонецЕсли;
			Если НЕ ЗадачаТекущегоУровня.РучнойВвод Тогда
				ЗадачаТекущегоУровня.РДН = ПустаяДата;
				ЗадачаТекущегоУровня.РДО = ПустаяДата;
			КонецЕсли;
			КалендарьЗадачи = ?(ЗначениеЗаполнено(ЗадачаТекущегоУровня.Календарь), ЗадачаТекущегоУровня.Календарь, КалендарьПроекта);
			Если ТекущийУровень = 0 ИЛИ ЗадачаТекущегоУровня.РучнойВвод Тогда
				Если ЗадачаТекущегоУровня.РучнойВвод Тогда
					ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ДатаНачала;
					//ЗадачаТекущегоУровня.РДО = ЗадачаТекущегоУровня.ДатаОкончания;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				Иначе
					ЗадачаТекущегоУровня.РДН = ДатаНачалаПроекта;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				КонецЕсли;
			Иначе
				СоответствиеДатаНачало = Новый Соответствие;
				СоответствиеДатаОкончания = Новый Соответствие;
				Для Каждого СтрокаСвязей ИЗ ЗадачаТекущегоУровня.Предшественники Цикл
					Если СтрокаСвязей.СтрокаПредшественник = Неопределено Тогда
						СтрокаСвязей.СтрокаПредшественник = ТаблицаЗадач.Найти(СтрокаСвязей.ПредшественникУИД, "УИД");
					КонецЕсли;
					ЗадачаПредшественник = СтрокаСвязей.СтрокаПредшественник;
					Если СтрокаСвязей.ТипСвязиЧисло = 1 Тогда		// НН
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.ДатаНачала, СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, Истина, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаНачало.Получить(СтрокаСвязей.ГруппаЗадач);
						Если СтрокаСвязей.ГруппаЗадач = "" Тогда
							Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < НоваяДата Тогда
								СоответствиеДатаНачало.Вставить("", НоваяДата);
							КонецЕсли;
						Иначе
							Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия > НоваяДата Тогда
								СоответствиеДатаНачало.Вставить(СтрокаСвязей.ГруппаЗадач, НоваяДата);
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 2 Тогда	// НО
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.ДатаНачала, СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, Истина, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаОкончания.Получить(СтрокаСвязей.ГруппаЗадач);
						Если СтрокаСвязей.ГруппаЗадач = "" Тогда
							Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < НоваяДата Тогда
								СоответствиеДатаОкончания.Вставить("", НоваяДата);
							КонецЕсли;
						Иначе
							Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия > НоваяДата Тогда
								СоответствиеДатаОкончания.Вставить(СтрокаСвязей.ГруппаЗадач, НоваяДата);
							КонецЕсли;
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 3 Тогда	// ОН
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.ДатаОкончания, СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность > 0, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаНачало.Получить("");
						Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < НоваяДата Тогда
							СоответствиеДатаНачало.Вставить("", НоваяДата);
						КонецЕсли;
					ИначеЕсли СтрокаСвязей.ТипСвязиЧисло = 4 Тогда	// ОО
						НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаПредшественник.Окончания, СтрокаСвязей.Задержка, СтрокаСвязей.ЕдиницаВремени, КалендарьЗадачи, Ложь, Ложь, СтруктураПараметров);
						ДатаСоответствия = СоответствиеДатаОкончания.Получить("");
						Если ДатаСоответствия = Неопределено ИЛИ ДатаСоответствия < НоваяДата Тогда
							СоответствиеДатаОкончания.Вставить("", НоваяДата);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				мДатаНачала = ПустаяДата;
				мДатаОкончания = ПустаяДата;
				Для Каждого КлючИЗначение ИЗ СоответствиеДатаНачало Цикл
					Если мДатаНачала < КлючИЗначение.Значение Тогда
						мДатаНачала = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
				Для Каждого КлючИЗначение ИЗ СоответствиеДатаОкончания Цикл
					Если мДатаОкончания < КлючИЗначение.Значение Тогда
						мДатаОкончания = КлючИЗначение.Значение;
					КонецЕсли;
				КонецЦикла;
				Если мДатаНачала <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДН = мДатаНачала;
				КонецЕсли;
				Если мДатаОкончания <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДО = мДатаОкончания;
				КонецЕсли;
		
				Если ЗадачаТекущегоУровня.РДН <> ПустаяДата Тогда
					НоваяДата = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
					Если ЗадачаТекущегоУровня.РДО = ПустаяДата ИЛИ ЗадачаТекущегоУровня.РДО < НоваяДата Тогда
						ЗадачаТекущегоУровня.РДО = НоваяДата;
					ИначеЕсли ЗадачаТекущегоУровня.РДО > НоваяДата Тогда
						ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				Иначе
					ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ЗадачаТекущегоУровня.ТипОграниченияЧисло = Неопределено ИЛИ ЗадачаТекущегоУровня.ТипОграниченияЧисло = 0 Тогда
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 2 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноПозже") Тогда
				ЗадачаТекущегоУровня.ДатаНачала = ЗадачаТекущегоУровня.ПДН;
				ЗадачаТекущегоУровня.ДатаОкончания = ЗадачаТекущегоУровня.ПДО;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 1 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноРаньше") Тогда
				//ЗадачаТекущегоУровня.ДатаНачала = ЗадачаТекущегоУровня.РДН;
				//ЗадачаТекущегоУровня.ДатаОкончания = ЗадачаТекущегоУровня.РДО;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 3 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеПозднее") Тогда
				Если ЗадачаТекущегоУровня.РДН > ЗадачаТекущегоУровня.ДатаОграничения И ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ДатаОграничения;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 4 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.НачалоНеРанее") Тогда
				Если ЗадачаТекущегоУровня.РДН < ЗадачаТекущегоУровня.ДатаОграничения И ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ДатаОграничения;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 5 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеПозднее") Тогда
				Если ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаТекущегоУровня.ДатаОграничения, КалендарьЗадачи);
					Если ЗадачаТекущегоУровня.РДО > ДатаОкончания Тогда
						ЗадачаТекущегоУровня.РДО = ДатаОкончания;
						ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 6 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ОкончаниеНеРанее") Тогда
				Если ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					//ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаТекущегоУровня.ДатаОграничения, КалендарьЗадачи);
					ДатаОкончания = ЗадачаТекущегоУровня.ДатаОграничения;
					Если ЗадачаТекущегоУровня.РДО < ДатаОкончания Тогда
						ЗадачаТекущегоУровня.РДО = ДатаОкончания;
						ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 7 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало") Тогда
				Если ЗадачаТекущегоУровня.РДН <> ЗадачаТекущегоУровня.ДатаОграничения И ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ДатаОграничения;
					ЗадачаТекущегоУровня.РДО = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДН, ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, Ложь, ЗадачаТекущегоУровня.Длительность <> 0 И НЕ КалендарьЗадачи.СуточныйКалендарь, СтруктураПараметров);
				КонецЕсли;
			ИначеЕсли ЗадачаТекущегоУровня.ТипОграниченияЧисло = 8 Тогда	//	ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеОкончание") Тогда
				Если ЗадачаТекущегоУровня.ДатаОграничения <> ПустаяДата Тогда
					ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ЗадачаТекущегоУровня.ДатаОграничения, КалендарьЗадачи);
					Если ЗадачаТекущегоУровня.РДО <> ДатаОкончания Тогда
						ЗадачаТекущегоУровня.РДО = ДатаОкончания;
						ЗадачаТекущегоУровня.РДН = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(ЗадачаТекущегоУровня.РДО, -ЗадачаТекущегоУровня.Длительность, ЗадачаТекущегоУровня.ЕдиницаВремени, КалендарьЗадачи, ЗадачаТекущегоУровня.Длительность <> 0 И ЗадачаТекущегоУровня.РДО <> НачалоДня(ЗадачаТекущегоУровня.РДО), Ложь, СтруктураПараметров);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗадачаТекущегоУровня.ТипОграниченияЧисло = 1 Тогда
				ЗадачаТекущегоУровня.ДатаНачала = ЗадачаТекущегоУровня.ПДН;
				ЗадачаТекущегоУровня.ДатаОкончания = ЗадачаТекущегоУровня.ПДО;
			Иначе
				ЗадачаТекущегоУровня.ДатаНачала = ЗадачаТекущегоУровня.РДН;
				ЗадачаТекущегоУровня.ДатаОкончания = ЗадачаТекущегоУровня.РДО;
			КонецЕсли;
			
			БылиИзменения = Ложь;
			ЗадачаТекущегоУровня.ДатаНачалаВыделено = Ложь;
			ЗадачаТекущегоУровня.ДатаОкончанияВыделено = Ложь;
			Если ЗадачаТекущегоУровня.ДатаНачала <> ЗадачаТекущегоУровня.хДатаНачала Тогда
				Если НачалоДня(ЗадачаТекущегоУровня.ДатаНачала) <> НачалоДня(ЗадачаТекущегоУровня.хДатаНачала) Тогда
					ЗадачаТекущегоУровня.ДатаНачалаВыделено = Истина;
				КонецЕсли;
				ЗадачаТекущегоУровня.хДатаНачала = ЗадачаТекущегоУровня.ДатаНачала;
				ЗадачаТекущегоУровня.КонтрактныйДатаНачалаОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(ЗадачаТекущегоУровня.КонтрактныйДатаНачала, ЗадачаТекущегоУровня.ДатаНачала);
			КонецЕсли;
			НоваяАктуализация = ?(ЗадачаТекущегоУровня.ФактическаяДатаНачала = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(ЗадачаТекущегоУровня.ДатаНачала, ТекущаяДата), 0);
			Если ЗадачаТекущегоУровня.АктуализацияДатаНачалаОтклонение <> НоваяАктуализация Тогда
				ЗадачаТекущегоУровня.АктуализацияДатаНачалаОтклонение = НоваяАктуализация;
				БылиИзменения = Истина;
			КонецЕсли;
			
			Если ЗадачаТекущегоУровня.ДатаОкончания <> ЗадачаТекущегоУровня.хДатаОкончания Тогда
				Если НачалоДня(ЗадачаТекущегоУровня.ДатаОкончания) <> НачалоДня(ЗадачаТекущегоУровня.хДатаОкончания) Тогда
					ЗадачаТекущегоУровня.ДатаОкончанияВыделено = Истина;
				КонецЕсли;
				ЗадачаТекущегоУровня.хДатаОкончания = ЗадачаТекущегоУровня.ДатаОкончания;
				ЗадачаТекущегоУровня.КонтрактныйДатаОкончанияОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(ЗадачаТекущегоУровня.КонтрактныйДатаОкончания, ЗадачаТекущегоУровня.ДатаОкончания);
			КонецЕсли;
			НоваяАктуализация = ?(ЗадачаТекущегоУровня.ФактическаяДатаОкончания = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(ЗадачаТекущегоУровня.ДатаОкончания, ТекущаяДата), 0);
			Если ЗадачаТекущегоУровня.АктуализацияДатаОкончанияОтклонение <> НоваяАктуализация Тогда
				ЗадачаТекущегоУровня.АктуализацияДатаОкончанияОтклонение = НоваяАктуализация;
				БылиИзменения = Истина;
			КонецЕсли;
			
			БылиИзменения = БылиИзменения ИЛИ ЗадачаТекущегоУровня.ДатаНачала <> ЗадачаТекущегоУровня.хДатаНачала ИЛИ ЗадачаТекущегоУровня.ДатаОкончания <> ЗадачаТекущегоУровня.хДатаОкончания
				ИЛИ ЗадачаТекущегоУровня.РДН <> ЗадачаТекущегоУровня.хРДН ИЛИ ЗадачаТекущегоУровня.РДО <> ЗадачаТекущегоУровня.хРДО
				ИЛИ ЗадачаТекущегоУровня.ПДН <> ЗадачаТекущегоУровня.хПДН ИЛИ ЗадачаТекущегоУровня.ПДО <> ЗадачаТекущегоУровня.хПДО
				ИЛИ ЗадачаТекущегоУровня.Длительность <> ЗадачаТекущегоУровня.хДлительность;
			Если ЗадачаТекущегоУровня.РДН = ЗадачаТекущегоУровня.ПДН И ЗадачаТекущегоУровня.РДО = ЗадачаТекущегоУровня.ПДО Тогда
				БылиИзменения = БылиИзменения ИЛИ НЕ ЗадачаТекущегоУровня.КритическийПуть;
				ЗадачаТекущегоУровня.КритическийПуть = Истина;
			Иначе
				БылиИзменения = БылиИзменения ИЛИ ЗадачаТекущегоУровня.КритическийПуть;
				ЗадачаТекущегоУровня.КритическийПуть = Ложь;
			КонецЕсли;
			//Если ЗадачаТекущегоУровня.ДатаНачала <> ЗадачаТекущегоУровня.хДатаНачала ИЛИ ЗадачаТекущегоУровня.ДатаОкончания <> ЗадачаТекущегоУровня.хДатаОкончания
			//	ИЛИ ЗадачаТекущегоУровня.РДН <> ЗадачаТекущегоУровня.хРДН ИЛИ ЗадачаТекущегоУровня.РДО <> ЗадачаТекущегоУровня.хРДО
			//	ИЛИ ЗадачаТекущегоУровня.ПДН <> ЗадачаТекущегоУровня.хПДН ИЛИ ЗадачаТекущегоУровня.ПДО <> ЗадачаТекущегоУровня.хПДО
			//	ИЛИ ЗадачаТекущегоУровня.Длительность <> ЗадачаТекущегоУровня.хДлительность Тогда
			Если БылиИзменения Тогда
				ЗадачаТекущегоУровня.хРДН = ЗадачаТекущегоУровня.РДН;
				ЗадачаТекущегоУровня.хРДО = ЗадачаТекущегоУровня.РДО;
				ЗадачаТекущегоУровня.хПДН = ЗадачаТекущегоУровня.ПДН;
				ЗадачаТекущегоУровня.хПДО = ЗадачаТекущегоУровня.ПДО;
				ЗадачаТекущегоУровня.хДлительность = ЗадачаТекущегоУровня.Длительность;
				
				ЗадачаТекущегоУровня.КонтрактныйДатаНачалаОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(ЗадачаТекущегоУровня.КонтрактныйДатаНачала, ЗадачаТекущегоУровня.ДатаНачала);
				ЗадачаТекущегоУровня.КонтрактныйДатаОкончанияОтклонение = грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(ЗадачаТекущегоУровня.КонтрактныйДатаОкончания, ЗадачаТекущегоУровня.ДатаОкончания);
				//ЗадачаТекущегоУровня.АктуализацияДатаНачалаОтклонение = ?(ЗадачаТекущегоУровня.ФактическаяДатаНачала = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(ЗадачаТекущегоУровня.ДатаНачала, ТекущаяДата), 0);
				//ЗадачаТекущегоУровня.АктуализацияДатаОкончанияОтклонение = ?(ЗадачаТекущегоУровня.ФактическаяДатаОкончания = ПустаяДата, грзнтРасчетСроковПовторноеИспользование.РазностьДатДень(ЗадачаТекущегоУровня.ДатаОкончания, ТекущаяДата), 0);
				
				СтруктураВозврата = Новый Структура("УИД, ДатаНачала, ДатаОкончания, РДН, РДО, ПДН, ПДО, Длительность, КритическийПуть, ДатаНачалаВыделено, ДатаОкончанияВыделено, ДлительностьВыделено, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение");
				ЗаполнитьЗначенияСвойств(СтруктураВозврата, ЗадачаТекущегоУровня);
				СтруктураВозврата.Вставить("ИндексТаблицы", ТаблицаЗадач.Индекс(ЗадачаТекущегоУровня));
				МассивВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;
		ТекущийУровень = ТекущийУровень + 1;
		ЗадачиТекущегоУровня = ТаблицаЗадач.НайтиСтроки(Новый Структура("Уровень", ТекущийУровень));
	КонецЦикла;
	
	Возврат ТекущийУровень;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПроверитьВозможностьПеремещения(АдресВременногоХранилища, УникальныйИдентификатор, УИДЭлемента, УИДНовойГруппы, РезультатПроверки) Экспорт
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		СтруктураТаблиц = РекурсивныйПересчетПолучитьСтруктуруТаблицПоУмолчанию();
	Иначе
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	КонецЕсли;
	ДатаНачалаПроекта = СтруктураТаблиц.ДатаНачалаПроекта;
	КалендарьПроекта = СтруктураТаблиц.КалендарьПроекта;
	СпособПланирования = СтруктураТаблиц.СпособПланирования;
	ТаблицаЗадач = СтруктураТаблиц.ТаблицаЗадач;
	ПолнаяТаблицаСвязей = СтруктураТаблиц.ПолнаяТаблицаСвязей;
	ТекущаяТаблицаСвязей = СтруктураТаблиц.ТекущаяТаблицаСвязей;
	//--------------------------
	
	РезультатПроверки = РекурсивныйПересчетПроверитьВозможностьПеремещенияЭлемента(УИДЭлемента, УИДНовойГруппы, ТекущаяТаблицаСвязей, ТаблицаЗадач);
	
	//--------------------------
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", ДатаНачалаПроекта);
	СтруктураТаблиц.Вставить("КалендарьПроекта", КалендарьПроекта);
	СтруктураТаблиц.Вставить("СпособПланирования", СпособПланирования);
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	Возврат АдресХранилища;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПроверитьВозможностьПеремещенияЭлемента(УИДЭлемента, УИДНовойГруппы, ТаблицаПредшественниковИсходная, ТаблицаПроектаИсходная)
	// 1. Проверим, что выбрали не самого себя
	Если УИДЭлемента = УИДНовойГруппы Тогда
		Возврат "Нельзя выбрать задачу в качестве группы своей же группы!";
	КонецЕсли;
	
	// 2. Проверим, что выбрали не подчиненного
	Если РекурсивныйПересчетНайтиПодчиненного(УИДНовойГруппы, УИДЭлемента, ТаблицаПроектаИсходная) Тогда
		Возврат "Нельзя выбрать подчиненную задачу в качестве своей группы!";
	КонецЕсли;
	
	// Пересчитаем таблицу проекта
	КопияТаблицаПроекта = ТаблицаПроектаИсходная.Скопировать();
	КопияТаблицаПроекта.Индексы.Добавить("УИД");
	КопияТаблицаПроекта.Индексы.Добавить("Родитель");
	КопияТаблицаПроекта.Индексы.Добавить("УИД, Родитель");
	
	// Для того, чтобы проверять зацикленность, представим, что мы уже переместили элемент
	СтрокаЗадачи = КопияТаблицаПроекта.Найти(УИДЭлемента, "УИД");
	СтрокаЗадачи.Родитель = УИДНовойГруппы;
	
	// Сделаем полный пересчёт связей - связи на группы раскидаем на связи на элементы
	СтараяТаблицаПредшественников = ТаблицаПредшественниковИсходная.Скопировать();
	НоваяТаблицаПредшественников = СтараяТаблицаПредшественников.СкопироватьКолонки();
	НоваяТаблицаПредшественников.Индексы.Добавить("УИД");
	НоваяТаблицаПредшественников.Индексы.Добавить("ПредшественникУИД");
	Для Каждого СтрокаСтаройТаблицы ИЗ СтараяТаблицаПредшественников Цикл
		Если ПустаяСтрока(СтрокаСтаройТаблицы.ПредшественникУИД) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиПроекта = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("Родитель", СтрокаСтаройТаблицы.УИД));
		Если СтрокиПроекта.Количество() > 0 Тогда
			Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
				НоваяСтрока = СтараяТаблицаПредшественников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
				НоваяСтрока.УИД = СтрокаПроекта.УИД;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		СтрокиПроекта = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("Родитель", СтрокаСтаройТаблицы.ПредшественникУИД));
		Если СтрокиПроекта.Количество() > 0 Тогда
			Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
				НоваяСтрока = СтараяТаблицаПредшественников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
				НоваяСтрока.ПредшественникУИД = СтрокаПроекта.УИД;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяТаблицаПредшественников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
	КонецЦикла;
	
	// 3. Проверим, что нет предусловий на родителей 					// Проверим по всей цепочке связей
	// 4. Проверим, что у родителей нет предусловий на задачу
	// После преобразования таблицы предшественников это может означать только то, что ссылка делается на самого себя
	Для Каждого СтрокаНовойТаблицы ИЗ НоваяТаблицаПредшественников Цикл
		Если СтрокаНовойТаблицы.УИД = СтрокаНовойТаблицы.ПредшественникУИД Тогда
			Возврат "При выборе этой группы образуется циклическая связь!";
		КонецЕсли;
	КонецЦикла;
	
	// 5. Проверим, что у подчиненных нет предусловий на родителей
	// 6. проверим, что у родителей нет предусловий на подчиненных
	// Запилим универсальный цикл поиска связей, чё
	КопияТаблицаПроекта.Колонки.Добавить("ПометкаОбошли", Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	КопияТаблицаПроекта.ЗаполнитьЗначения(0, "ПометкаОбошли");
	Для К = 0 По КопияТаблицаПроекта.Количество() - 1 Цикл
		Если РекурсивныйПересчетНайтиЦиклическиеСвязи(К, КопияТаблицаПроекта, НоваяТаблицаПредшественников) Тогда
			Возврат "При выборе этой группы образуется циклическая связь!";
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПроверитьВозможностьВыбораПредшественника(АдресВременногоХранилища, УникальныйИдентификатор, УИДЭлемента, УИДПредшественника, УИДНовогоПредшественника, МассивСвязей, РезультатПроверки) Экспорт
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		СтруктураТаблиц = РекурсивныйПересчетПолучитьСтруктуруТаблицПоУмолчанию();
	Иначе
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	КонецЕсли;
	ДатаНачалаПроекта = СтруктураТаблиц.ДатаНачалаПроекта;
	КалендарьПроекта = СтруктураТаблиц.КалендарьПроекта;
	СпособПланирования = СтруктураТаблиц.СпособПланирования;
	ТаблицаЗадач = СтруктураТаблиц.ТаблицаЗадач;
	ПолнаяТаблицаСвязей = СтруктураТаблиц.ПолнаяТаблицаСвязей;
	ТекущаяТаблицаСвязей = СтруктураТаблиц.ТекущаяТаблицаСвязей;
	//--------------------------
	
	РезультатПроверки = РекурсивныйПересчетПроверитьВозможностьВыбораПредшественникаЭлемента(УИДЭлемента, УИДПредшественника, УИДНовогоПредшественника, МассивСвязей, ТекущаяТаблицаСвязей, ТаблицаЗадач);
	
	//--------------------------
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", ДатаНачалаПроекта);
	СтруктураТаблиц.Вставить("КалендарьПроекта", КалендарьПроекта);
	СтруктураТаблиц.Вставить("СпособПланирования", СпособПланирования);
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	Возврат АдресХранилища;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПроверитьВозможностьВыбораПредшественникаЭлемента(УИДЭлемента, УИДПредшественника, УИДНовогоПредшественника, МассивСвязей, ТаблицаПредшественниковИсходная, ТаблицаПроектаИсходная)
	// 1. Проверим, что выбрали не самого себя
	Если УИДЭлемента = УИДНовогоПредшественника Тогда
		Возврат "Нельзя выбрать задачу в качестве своего же предшественника!";
	КонецЕсли;
	
	// 2. Проверим, что выбрали не подчиненного
	Если РекурсивныйПересчетНайтиПодчиненного(УИДНовогоПредшественника, УИДЭлемента, ТаблицаПроектаИсходная) Тогда
		Возврат "Нельзя выбрать подчиненную задачу в качестве своего предшественника!";
	КонецЕсли;
	
	// Пересчитаем таблицу проекта
	КопияТаблицаПроекта = ТаблицаПроектаИсходная.Скопировать();
	КопияТаблицаПроекта.Индексы.Добавить("УИД");
	КопияТаблицаПроекта.Индексы.Добавить("Родитель");
	КопияТаблицаПроекта.Индексы.Добавить("УИД, Родитель");
	
	// Для того, чтобы проверять зацикленность, представим, что мы уже переместили элемент
	//СтрокаЗадачи = КопияТаблицаПроекта.Найти(УИДЭлемента, "УИД");
	//СтрокаЗадачи.Родитель = УИДНовойГруппы;
	
	// Сделаем полный пересчёт связей - связи на группы раскидаем на связи на элементы
	СтараяТаблицаПредшественников = ТаблицаПредшественниковИсходная.Скопировать();
	СтрокиТаблицы = СтараяТаблицаПредшественников.НайтиСтроки(Новый Структура("УИД", УИДЭлемента));
	Для Каждого СтрокаСтаройТаблицы ИЗ СтрокиТаблицы Цикл
		СтараяТаблицаПредшественников.Удалить(СтрокаСтаройТаблицы);
	КонецЦикла;
	Для Каждого ЭлементМассива ИЗ МассивСвязей Цикл
		СтрокаСтаройТаблицы = СтараяТаблицаПредшественников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтаройТаблицы, ЭлементМассива);
		Если СтрокаСтаройТаблицы.ПредшественникУИД = УИДПредшественника Тогда
			СтрокаСтаройТаблицы.ПредшественникУИД = УИДНовогоПредшественника;
		КонецЕсли;
	КонецЦикла;
	
	НоваяТаблицаПредшественников = СтараяТаблицаПредшественников.СкопироватьКолонки();
	Для Каждого СтрокаСтаройТаблицы ИЗ СтараяТаблицаПредшественников Цикл
		Если ПустаяСтрока(СтрокаСтаройТаблицы.ПредшественникУИД) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиПроекта = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("Родитель", СтрокаСтаройТаблицы.УИД));
		Если СтрокиПроекта.Количество() > 0 Тогда
			Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
				НоваяСтрока = СтараяТаблицаПредшественников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
				НоваяСтрока.УИД = СтрокаПроекта.УИД;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		СтрокиПроекта = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("Родитель", СтрокаСтаройТаблицы.ПредшественникУИД));
		Если СтрокиПроекта.Количество() > 0 Тогда
			Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
				НоваяСтрока = СтараяТаблицаПредшественников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
				НоваяСтрока.ПредшественникУИД = СтрокаПроекта.УИД;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяТаблицаПредшественников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
	КонецЦикла;
	НоваяТаблицаПредшественников.Индексы.Добавить("УИД");
	НоваяТаблицаПредшественников.Индексы.Добавить("ПредшественникУИД");
	
	// 3. Проверим, что нет предусловий на родителей 					// Проверим по всей цепочке связей
	// 4. Проверим, что у родителей нет предусловий на задачу
	// После преобразования таблицы предшественников это может означать только то, что ссылка делается на самого себя
	Для Каждого СтрокаНовойТаблицы ИЗ НоваяТаблицаПредшественников Цикл
		Если СтрокаНовойТаблицы.УИД = СтрокаНовойТаблицы.ПредшественникУИД Тогда
			Возврат "При выборе этой задачи образуется циклическая связь!";
		КонецЕсли;
	КонецЦикла;
	
	// 5. Проверим, что у подчиненных нет предусловий на родителей
	// 6. проверим, что у родителей нет предусловий на подчиненных
	// Запилим универсальный цикл поиска связей, чё
	КопияТаблицаПроекта.Колонки.Добавить("ПометкаОбошли");
	КопияТаблицаПроекта.ЗаполнитьЗначения(0, "ПометкаОбошли");
	Для К = 0 По КопияТаблицаПроекта.Количество() - 1 Цикл
		Если РекурсивныйПересчетНайтиЦиклическиеСвязи(К, КопияТаблицаПроекта, НоваяТаблицаПредшественников) Тогда
			Возврат "При выборе этой задачи образуется циклическая связь!";
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПроверитьВозможностьЗаменыПредшественников(АдресВременногоХранилища, УникальныйИдентификатор, МассивТекущие, МассивПредшественники, РезультатПроверки) Экспорт
	Если ПустаяСтрока(АдресВременногоХранилища) Тогда
		СтруктураТаблиц = РекурсивныйПересчетПолучитьСтруктуруТаблицПоУмолчанию();
	Иначе
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	КонецЕсли;
	ДатаНачалаПроекта = СтруктураТаблиц.ДатаНачалаПроекта;
	КалендарьПроекта = СтруктураТаблиц.КалендарьПроекта;
	СпособПланирования = СтруктураТаблиц.СпособПланирования;
	ТаблицаЗадач = СтруктураТаблиц.ТаблицаЗадач;
	ПолнаяТаблицаСвязей = СтруктураТаблиц.ПолнаяТаблицаСвязей;
	ТекущаяТаблицаСвязей = СтруктураТаблиц.ТекущаяТаблицаСвязей;
	//--------------------------
	
	//РезультатПроверки = РекурсивныйПересчетПроверитьВозможностьЗаменыПредшественниковЭлемента(ТаблицаЗадач, ТекущаяТаблицаСвязей, МассивТекущие, МассивПредшественники);
	Для К = 0 По МассивПредшественники.Количество() - 1 Цикл
		МассивЧастичный = Новый Массив;
		Для Инд = 0 ПО К Цикл
			МассивЧастичный.Добавить(МассивПредшественники.Получить(Инд));
			ПоследнийПредшественник = МассивПредшественники.Получить(Инд).ПредшественникУИД;
		КонецЦикла;
		РезультатПроверки = РекурсивныйПересчетПроверитьВозможностьЗаменыПредшественниковЭлемента(ТаблицаЗадач, ТекущаяТаблицаСвязей, МассивТекущие, МассивЧастичный);
		Если РезультатПроверки <> Неопределено Тогда
			РезультатПроверки.ПредшественникУИД = ПоследнийПредшественник;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	//--------------------------
	СтруктураТаблиц = Новый Структура;
	СтруктураТаблиц.Вставить("ДатаНачалаПроекта", ДатаНачалаПроекта);
	СтруктураТаблиц.Вставить("КалендарьПроекта", КалендарьПроекта);
	СтруктураТаблиц.Вставить("СпособПланирования", СпособПланирования);
	СтруктураТаблиц.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	СтруктураТаблиц.Вставить("ПолнаяТаблицаСвязей", ПолнаяТаблицаСвязей);
	СтруктураТаблиц.Вставить("ТекущаяТаблицаСвязей", ТекущаяТаблицаСвязей);
	АдресХранилища = ПоместитьВоВременноеХранилище(СтруктураТаблиц, УникальныйИдентификатор);
	Возврат АдресХранилища;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетПроверитьВозможностьЗаменыПредшественниковЭлемента(ТаблицаПроектаИсходная, ТаблицаПредшественниковИсходная, МассивТекущие, МассивПредшественники)
	// Пересчитаем таблицу проекта
	КопияТаблицаПроекта = ТаблицаПроектаИсходная.Скопировать();
	КопияТаблицаПроекта.Индексы.Добавить("УИД");
	КопияТаблицаПроекта.Индексы.Добавить("Родитель");
	КопияТаблицаПроекта.Индексы.Добавить("УИД, Родитель");
	
	// Сделаем полный пересчёт связей - связи на группы раскидаем на связи на элементы
	СтараяТаблицаПредшественников = ТаблицаПредшественниковИсходная.Скопировать();
	СтараяТаблицаПредшественников.Индексы.Добавить("УИД, ПредшественникУИД");
	
	Для Каждого СтруктураТекущие ИЗ МассивТекущие Цикл
		СтрокиСтараяТаблица = СтараяТаблицаПредшественников.НайтиСтроки(СтруктураТекущие);
		Для Каждого СтрокаСтараяТаблица ИЗ СтрокиСтараяТаблица Цикл
			СтараяТаблицаПредшественников.Удалить(СтрокаСтараяТаблица);
		КонецЦикла;
	КонецЦикла; 
	
	Для Каждого ЭлементМассива ИЗ МассивПредшественники Цикл
		СтрокаСтаройТаблицы = СтараяТаблицаПредшественников.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСтаройТаблицы, ЭлементМассива);
	КонецЦикла;
	
	НоваяТаблицаПредшественников = СтараяТаблицаПредшественников.СкопироватьКолонки();
	Для Каждого СтрокаСтаройТаблицы ИЗ СтараяТаблицаПредшественников Цикл
		Если ПустаяСтрока(СтрокаСтаройТаблицы.ПредшественникУИД) Тогда
			Продолжить;
		КонецЕсли;
		СтрокиПроекта = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("Родитель", СтрокаСтаройТаблицы.УИД));
		Если СтрокиПроекта.Количество() > 0 Тогда
			Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
				НоваяСтрока = СтараяТаблицаПредшественников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
				НоваяСтрока.УИД = СтрокаПроекта.УИД;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		СтрокиПроекта = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("Родитель", СтрокаСтаройТаблицы.ПредшественникУИД));
		Если СтрокиПроекта.Количество() > 0 Тогда
			Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
				НоваяСтрока = СтараяТаблицаПредшественников.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
				НоваяСтрока.ПредшественникУИД = СтрокаПроекта.УИД;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяТаблицаПредшественников.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСтаройТаблицы);
	КонецЦикла;
	НоваяТаблицаПредшественников.Индексы.Добавить("УИД");
	НоваяТаблицаПредшественников.Индексы.Добавить("ПредшественникУИД");
	
	// 3. Проверим, что нет предусловий на родителей 					// Проверим по всей цепочке связей
	// 4. Проверим, что у родителей нет предусловий на задачу
	// После преобразования таблицы предшественников это может означать только то, что ссылка делается на самого себя
	Для Каждого СтрокаНовойТаблицы ИЗ НоваяТаблицаПредшественников Цикл
		Если СтрокаНовойТаблицы.УИД = СтрокаНовойТаблицы.ПредшественникУИД Тогда
			Возврат Новый Структура("УИД, ПредшественникУИД, Сообщение", СтрокаНовойТаблицы.УИД, СтрокаНовойТаблицы.ПредшественникУИД, "При таком наборе предшественников образуется циклическая связь!");
		КонецЕсли;
	КонецЦикла;
	
	// 5. Проверим, что у подчиненных нет предусловий на родителей
	// 6. проверим, что у родителей нет предусловий на подчиненных
	// Запилим универсальный цикл поиска связей, чё
	КопияТаблицаПроекта.Колонки.Добавить("ПометкаОбошли");
	КопияТаблицаПроекта.ЗаполнитьЗначения(0, "ПометкаОбошли");
	Для К = 0 По КопияТаблицаПроекта.Количество() - 1 Цикл
		Если РекурсивныйПересчетНайтиЦиклическиеСвязи(К, КопияТаблицаПроекта, НоваяТаблицаПредшественников) Тогда
			Возврат Новый Структура("УИД, ПредшественникУИД, Сообщение", КопияТаблицаПроекта.Получить(К).УИД, "", "При таком наборе предшественников образуется циклическая связь!");
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетНайтиПодчиненного(УИДНовойГруппы, УИДЭлемента, ТаблицаПроектаИсходная)
	СтрокиТекущего = ТаблицаПроектаИсходная.НайтиСтроки(Новый Структура("Родитель", УИДЭлемента));
	Для Каждого СтрокаТекущиего ИЗ СтрокиТекущего Цикл
		Если СтрокаТекущиего.УИД = УИДНовойГруппы Тогда
			Возврат Истина;
		КонецЕсли;
		Если РекурсивныйПересчетНайтиПодчиненного(УИДНовойГруппы, СтрокаТекущиего.УИД, ТаблицаПроектаИсходная) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервереБезКонтекста
Функция РекурсивныйПересчетНайтиЦиклическиеСвязи(К, КопияТаблицаПроекта, НоваяТаблицаПредшественников)
	СтрокаЗадачи = КопияТаблицаПроекта.Получить(К);
	СтрокаЗадачи.ПометкаОбошли = 1;
	СтрокиТаблицыПредшественники = НоваяТаблицаПредшественников.НайтиСтроки(Новый Структура("УИД", СтрокаЗадачи.УИД));
	Для Каждого СтрокаТаблицыПредшественники ИЗ СтрокиТаблицыПредшественники Цикл
		СтрокаПредшественник = КопияТаблицаПроекта.Найти(СтрокаТаблицыПредшественники.ПредшественникУИД, "УИД");
		Если СтрокаПредшественник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаПредшественник.ПометкаОбошли = 0 Тогда
			Если РекурсивныйПересчетНайтиЦиклическиеСвязи(КопияТаблицаПроекта.Индекс(СтрокаПредшественник), КопияТаблицаПроекта, НоваяТаблицаПредшественников) Тогда
				Возврат Истина;
			КонецЕсли;
		ИначеЕсли СтрокаПредшественник.ПометкаОбошли = 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	СтрокаЗадачи.ПометкаОбошли = 2;
	Возврат Ложь;
КонецФункции

#КонецОбласти

#Область ПубликацияЗадачи

&НаКлиенте
Процедура КомандаОпубликоватьЗадачу(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Задача.Пустая() Тогда
		ПоказатьПредупреждение(, "Перед публикацией задачи необходимо записать проект!");
		//Предупреждение("Перед публикацией задачи необходимо записать проект!");
	Иначе
		ДокументПубликации = ПолучитьДокументПубликации(Проект);
		Если ДокументПубликации.Пустая() Тогда
			ФормаДокумента = ПолучитьФорму("Документ.грзнтПубликацияЗадачПроекта.ФормаОбъекта", Новый Структура("Задача", ТекущиеДанные.Задача), ЭтаФорма);
		Иначе
			ФормаДокумента = ПолучитьФорму("Документ.грзнтПубликацияЗадачПроекта.ФормаОбъекта", Новый Структура("Ключ", ДокументПубликации), ЭтаФорма);
		КонецЕсли;
		ДанныеФормы = ФормаДокумента.Объект;
		ЗаполнитьДокументПубликацииНаСервере(ДанныеФормы, ТекущиеДанные.Задача, ТекущиеДанные.КодСДР);
		КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
		ФормаДокумента.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДокументПубликации(Задача)
	Если НЕ ПравоДоступа("Чтение", Метаданные.Документы.грзнтПубликацияЗадачПроекта) Тогда
		Возврат ПредопределенноеЗначение("Документ.грзнтПубликацияЗадачПроекта.ПустаяСсылка");
	КонецЕсли;
	ЗапросПубликации = Новый Запрос;
	ЗапросПубликации.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	грзнтПубликацияЗадачПроектаЗадачи.Ссылка
	|ИЗ
	|	Документ.грзнтПубликацияЗадачПроекта КАК грзнтПубликацияЗадачПроектаЗадачи
	|ГДЕ
	|	грзнтПубликацияЗадачПроектаЗадачи.Проект = &Проект
	|	И НАЧАЛОПЕРИОДА(грзнтПубликацияЗадачПроектаЗадачи.Дата, ДЕНЬ) = &ДатаСреза
	|
	|СГРУППИРОВАТЬ ПО
	|	грзнтПубликацияЗадачПроектаЗадачи.Ссылка";
	ЗапросПубликации.УстановитьПараметр("ДатаСреза", НачалоДня(ТекущаяДата()));
	ЗапросПубликации.УстановитьПараметр("Проект", Задача);
	ВыборкаПубликации = ЗапросПубликации.Выполнить().Выбрать();
	Если ВыборкаПубликации.Следующий() Тогда
		Возврат ВыборкаПубликации.Ссылка;
	Иначе
		Возврат ПредопределенноеЗначение("Документ.грзнтПубликацияЗадачПроекта.ПустаяСсылка");
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументПубликацииНаСервере(ДанныеФормы, Задача, КодСДР)
	СтрокиЗадачи = ДанныеФормы.Задачи.НайтиСтроки(Новый Структура("Задача", Задача));
	Если СтрокиЗадачи.Количество() > 0 Тогда
		СтрокаЗадача = СтрокиЗадачи.Получить(0);
	Иначе
		СтрокаЗадача = ДанныеФормы.Задачи.Добавить();
	КонецЕсли;
	Если ДанныеФормы.Проект.Пустая() Тогда
		ДанныеФормы.Проект = Проект;
	КонецЕсли;
	СтрокаЗадача.Задача = Задача;
	СтрокаЗадача.КодСДР = КодСДР;
	СтрокаЗадача.ДатаНачалаПубликации = ТекущаяДата();
	СтрокаЗадача.ДлительностьПубликации = ?(Константы.грзнтПериодПубликацииЗадачПоУмолчанию.Получить() = ПредопределенноеЗначение("Перечисление.грзнтПериодПубликацииЗадач.Бессрочно"), 0,
									?(Константы.грзнтПериодПубликацииЗадачПоУмолчанию.Получить() = ПредопределенноеЗначение("Перечисление.грзнтПериодПубликацииЗадач.Год"), 365,
									?(Константы.грзнтПериодПубликацииЗадачПоУмолчанию.Получить() = ПредопределенноеЗначение("Перечисление.грзнтПериодПубликацииЗадач.Квартал"), 91,
									?(Константы.грзнтПериодПубликацииЗадачПоУмолчанию.Получить() = ПредопределенноеЗначение("Перечисление.грзнтПериодПубликацииЗадач.Месяц"), 31,
									?(Константы.грзнтПериодПубликацииЗадачПоУмолчанию.Получить() = ПредопределенноеЗначение("Перечисление.грзнтПериодПубликацииЗадач.Неделя"), 7,0)))));
	СтрокаЗадача.ДатаОкончанияПубликации = ?(СтрокаЗадача.ДлительностьПубликации = 0, Дата(1,1,1), СтрокаЗадача.ДатаНачалаПубликации + СтрокаЗадача.ДлительностьПубликации * 86400);
КонецПроцедуры

&НаКлиенте
Процедура КомандаСнятьЗадачуСПубликации(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Задача.Пустая() Тогда
		ПоказатьПредупреждение(, "Перед снятием задачи с публикации необходимо записать проект!");
		//Предупреждение("Перед снятием задачи с публикации необходимо записать проект!");
	Иначе
		Отказ = Ложь;
		ДокументСнятия = ПолучитьДокументСнятияСПубликации(Проект, ТекущиеДанные.Задача, Отказ);
		Если Отказ Тогда
			ПоказатьПредупреждение(, "Задача не опубликована на текущий момент, снятие с публикации невозможно!");
			//Предупреждение("Задача не опубликована на текущий момент, снятие с публикации невозможно!");
			Возврат;
		КонецЕсли;
		Если ДокументСнятия.Пустая() Тогда
			ФормаДокумента = ПолучитьФорму("Документ.грзнтСнятиеСПубликацииЗадачПроекта.ФормаОбъекта", Новый Структура("Задача", ТекущиеДанные.Задача), ЭтаФорма);
		Иначе 
			ФормаДокумента = ПолучитьФорму("Документ.грзнтСнятиеСПубликацииЗадачПроекта.ФормаОбъекта", Новый Структура("Ключ, Задача", ДокументСнятия, ТекущиеДанные.Задача), ЭтаФорма);
		КонецЕсли;
		ДанныеФормы = ФормаДОкумента.Объект;
		ЗаполнитьДокументСнятияСПубликацииНаСервере(ДанныеФормы, ТекущиеДанные.Задача, ТекущиеДанные.КодСДР);
		КопироватьДанныеФормы(ДанныеФормы, ФормаДокумента.Объект);
		ФормаДокумента.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДокументСнятияСПубликации(Проект, Задача, Отказ)
	ЗапросПубликации = Новый Запрос;
	ЗапросПубликации.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	ЗапросПубликации.УстановитьПараметр("Проект", Проект);
	ЗапросПубликации.УстановитьПараметр("Задача", Задача);
	ЗапросПубликации.Текст = 
	"ВЫБРАТЬ
	|	грзнтОпубликованныеЗадачиСрезПоследних.Задача
	|ИЗ
	|	РегистрСведений.грзнтОпубликованныеЗадачи.СрезПоследних(&ДатаСреза, Задача = &Задача) КАК грзнтОпубликованныеЗадачиСрезПоследних
	|ГДЕ
	|	грзнтОпубликованныеЗадачиСрезПоследних.СтатусПубликации = ЗНАЧЕНИЕ(Перечисление.грзнтСтатусПубликацииЗадачи.Опубликована)";
	ВыборкаПубликации = ЗапросПубликации.Выполнить().Выбрать();
	Если НЕ ВыборкаПубликации.Следующий() Тогда
		Отказ = Истина;
		Возврат ПредопределенноеЗначение("Документ.грзнтСнятиеСПубликацииЗадачПроекта.ПустаяСсылка");
	КонецЕсли;
	
	ЗапросПубликации.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	грзнтСнятиеСПубликацииЗадачПроекта.Ссылка
	|ИЗ
	|	Документ.грзнтСнятиеСПубликацииЗадачПроекта КАК грзнтСнятиеСПубликацииЗадачПроекта
	|ГДЕ
	|	грзнтСнятиеСПубликацииЗадачПроекта.Проект = &Проект
	|	И НАЧАЛОПЕРИОДА(грзнтСнятиеСПубликацииЗадачПроекта.Дата, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаСреза, ДЕНЬ)
	|
	|СГРУППИРОВАТЬ ПО
	|	грзнтСнятиеСПубликацииЗадачПроекта.Ссылка";
	
	ВыборкаПубликации = ЗапросПубликации.Выполнить().Выбрать();
	Если ВыборкаПубликации.Следующий() Тогда
		Возврат ВыборкаПубликации.Ссылка;
	Иначе
		Возврат ПредопределенноеЗначение("Документ.грзнтСнятиеСПубликацииЗадачПроекта.ПустаяСсылка");
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументСнятияСПубликацииНаСервере(ДанныеФормы, Задача, КодСДР)
	СтрокиЗадачи = ДанныеФормы.Задачи.НайтиСтроки(Новый Структура("Задача", Задача));
	Если СтрокиЗадачи.Количество() > 0 Тогда
		СтрокаЗадача = СтрокиЗадачи.Получить(0);
	Иначе
		СтрокаЗадача = ДанныеФормы.Задачи.Добавить();
	КонецЕсли;
	ДанныеФормы.Проект = Проект;
	ЗапросСостояние = Новый Запрос;
	ЗапросСостояние.Текст = 
	"ВЫБРАТЬ
	|	грзнтОпубликованныеЗадачиСрезПоследних.Период КАК ДатаНачалаПубликации,
	|	ЕСТЬNULL(грзнтОпубликованныеЗадачиСрезПервых.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОкончанияПубликации,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(грзнтОпубликованныеЗадачиСрезПервых.Период, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(грзнтОпубликованныеЗадачиСрезПоследних.Период, ЕСТЬNULL(грзнтОпубликованныеЗадачиСрезПервых.Период, ДАТАВРЕМЯ(1, 1, 1)), ДЕНЬ)
	|	КОНЕЦ КАК ДлительностьПубликации,
	|	грзнтОпубликованныеЗадачиСрезПоследних.Задача,
	|	грзнтОпубликованныеЗадачиСрезПоследних.ПроектИспользования
	|ИЗ
	|	РегистрСведений.грзнтОпубликованныеЗадачи.СрезПоследних(&ДатаСреза, Задача = &Задача) КАК грзнтОпубликованныеЗадачиСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грзнтОпубликованныеЗадачи.СрезПервых(
	|				&ДатаСреза,
	|				Задача = &Задача
	|					И СтатусПубликации = ЗНАЧЕНИЕ(Перечисление.грзнтСтатусПубликацииЗадачи.СнятаСПубликации)) КАК грзнтОпубликованныеЗадачиСрезПервых
	|		ПО грзнтОпубликованныеЗадачиСрезПоследних.Задача = грзнтОпубликованныеЗадачиСрезПервых.Задача
	|			И грзнтОпубликованныеЗадачиСрезПоследних.ПроектИспользования = грзнтОпубликованныеЗадачиСрезПервых.ПроектИспользования
	|ГДЕ
	|	грзнтОпубликованныеЗадачиСрезПоследних.СтатусПубликации = ЗНАЧЕНИЕ(Перечисление.грзнтСтатусПубликацииЗадачи.Опубликована)";
	ЗапросСостояние.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	ЗапросСостояние.УстановитьПараметр("Задача", Задача);
	ВыборкаСостояние = ЗапросСостояние.Выполнить().Выбрать();
	Пока ВыборкаСостояние.Следующий() Цикл
		СтрокаЗадача.КодСДР = КодСДР;
		ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаСостояние);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсторияПубликацииЗадачи(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Задача.Пустая() Тогда
		ПоказатьПредупреждение(, "Для просмотра публикации необходимо записать проект!");
		//Предупреждение("Для просмотра публикации необходимо записать проект!");
	Иначе
		ОткрытьФорму("КритерийОтбора.грзнтИсторияПубликацииЗадачи.ФормаСписка", Новый Структура("Значение", ТекущиеДанные.Задача));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПанельЗадачи

&НаКлиенте
Процедура КомандаФиксацияПанелиЗадачи(Команда)
	ФиксацияПанелиЗадач = НЕ ФиксацияПанелиЗадач;
	Элементы.ГруппаПанельЗадачи.РастягиватьПоВертикали = НЕ ФиксацияПанелиЗадач;
	Элементы.КомандаФиксацияПанелиЗадачи.Пометка = ФиксацияПанелиЗадач;
КонецПроцедуры

&НаКлиенте
Процедура КомандаНеУдалятьКнопкойДелит(Команда)
	НеУдалятьПоДелит = НЕ НеУдалятьПоДелит;
	Элементы.КомандаНеУдалятьКнопкойДелит.Пометка = НеУдалятьПоДелит;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьДокументОтраженияОперативногоПлана(Команда)
	ДокументСсылка = ПолучитьДокументСсылкуОтраженияОперативногоПлана(Проект, ЭкземплярВерсии);
	Если НЕ ДокументСсылка.Пустая() Тогда
		ОткрытьФорму("Документ.грзнтПланТрудозатратРесурсовОперативный.ФормаОбъекта", Новый Структура("Ключ", ДокументСсылка));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПересчетЗатратЗадачиПоВидуСтавки(Команда)
	НачатьДействие();
	
	ТекущаяСтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(Элементы.ДеревоПроекта.ТекущаяСтрока);
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущаяСтрокаДерева.ИндексТаблицы);
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	
	Если Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланРолей Тогда
		Для Каждого СтрокаПлана ИЗ ТекущаяСтрокаДерева.ПланРолейОбщая Цикл
			ПересчитатьСуммуПоВидуСтавки(СтрокаПлана, СтрокаПлана.Роль, Неопределено, СтрокаПлана.ЕдиницаВремени);
		КонецЦикла;
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРолейОбщая");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		ПосчитатьИтогиПоКолонкам("СуммаРоли", ТекущаяСтрокаДерева.УИД);
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланТрудовыхРесурсов Тогда
		Для Каждого СтрокаПлана ИЗ ТекущаяСтрокаДерева.ПланРесурсовОбщая Цикл
			ПересчитатьСуммуПоВидуСтавки(СтрокаПлана, СтрокаПлана.Роль, СтрокаПлана.ТрудовойРесурс, СтрокаПлана.ЕдиницаВремени);
		КонецЦикла;
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРесурсовОбщая");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		ПосчитатьИтогиПоКолонкам("СуммаРесурсы", ТекущаяСтрокаДерева.УИД);
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланМатериалов Тогда
		Для Каждого СтрокаПлана ИЗ ТекущаяСтрокаДерева.ПланМатериаловОбщая Цикл
			ПересчитатьСуммуПоВидуСтавки(СтрокаПлана, , СтрокаПлана.Номенклатура, СтрокаПлана.ЕдиницаИзмерения);
		КонецЦикла;
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланМатериаловОбщая");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		ПосчитатьИтогиПоКолонкам("СуммаМатериалы", ТекущаяСтрокаДерева.УИД);
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПересчетПланаЗадачиПоВалюте(Команда)
	НачатьДействие();
	
	ТекущаяСтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(Элементы.ДеревоПроекта.ТекущаяСтрока);
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущаяСтрокаДерева.ИндексТаблицы);
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	
	Если Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланДДС Тогда
		ПересчитатьСуммуСтрокПланаПоВалюте(ТекущаяСтрокаДерева, "ПланДвиженияДенежныхСредств");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		ПосчитатьИтогиПоКолонкам("СуммаПоступлениеУпр, СуммаВыплатаУпр", ТекущаяСтрокаДерева.УИД);
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланДоходов Тогда
		ПересчитатьСуммуСтрокПланаПоВалюте(ТекущаяСтрокаДерева, "ПланДоходов");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДоходов");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		ПосчитатьИтогиПоКолонкам("СуммаДоходУпр", ТекущаяСтрокаДерева.УИД);
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланРасходов Тогда
		ПересчитатьСуммуСтрокПланаПоВалюте(ТекущаяСтрокаДерева, "ПланРасходов");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		ПосчитатьИтогиПоКолонкам("СуммаРасходУпр", ТекущаяСтрокаДерева.УИД);
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПересчетПланаВыделенныхЗадачПоВалюте(Команда)
	НачатьДействие();
	Для Каждого ВыделеннаяСтрокаДерева ИЗ Элементы.ДеревоПроекта.ВыделенныеСтроки Цикл
		СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(ВыделеннаяСтрокаДерева);
		СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(СтрокаДерева.ИндексТаблицы);
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаДерева, "ПланДвиженияДенежныхСредств");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаДерева, "ПланДоходов");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДоходов");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаДерева, "ПланРасходов");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаПоступлениеУпр, СуммаВыплатаУпр, СуммаДоходУпр, СуммаРасходУпр", );
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПересчетПланаВсехЗадачПоВалюте(Команда)
	НачатьДействие();
	Для Каждого СтрокаТаблицыПроекта ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
			СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
			
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
			ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаДерева, "ПланДвиженияДенежныхСредств");
			ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
			ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
			
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
			ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаДерева, "ПланДоходов");
			ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДоходов");
			ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
			
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
			ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаДерева, "ПланРасходов");
			ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
			ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		Иначе
			ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаТаблицыПроекта, "ПланДвиженияДенежныхСредств");
			ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаТаблицыПроекта, "ПланДоходов");
			ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаТаблицыПроекта, "ПланРасходов");
		КонецЕсли;
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаПоступлениеУпр, СуммаВыплатаУпр, СуммаДоходУпр, СуммаРасходУпр", );
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкопироватьПланПоЗадаче(Команда)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтруктураПараметров = ПодготовитьСтруктуруПараметровДляОткрытияФормыВыбораЗадачиНаКлиенте(ТекущиеДанные.УИД, ТекущиеДанные.Родитель);
	СтруктураПараметров.Вставить("ОперацияВыбора", "ВыборЗадачиИсточникаЗаполненияПлана");
	Если Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПредшественники Тогда
		СтруктураПараметров.Вставить("ВидПлана", "ТаблицаПредшественники");
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланДДС Тогда
		СтруктураПараметров.Вставить("ВидПлана", "ПланДвиженияДенежныхСредств");
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланДоходов Тогда
		СтруктураПараметров.Вставить("ВидПлана", "ПланДоходов");
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланРасходов Тогда
		СтруктураПараметров.Вставить("ВидПлана", "ПланРасходов");
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланРолей Тогда
		СтруктураПараметров.Вставить("ВидПлана", "ПланРолейОбщая");
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланТрудовыхРесурсов Тогда
		СтруктураПараметров.Вставить("ВидПлана", "ПланРесурсовОбщая");
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланМатериалов Тогда
		СтруктураПараметров.Вставить("ВидПлана", "ПланМатериаловОбщая");
	КонецЕсли;
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КомандаПанельПроектаУдалитьСтрокуПлана(Команда)
	бУдалениеПоКнопке = Истина;
	бФлагПередУдалением = Ложь;
	Отказ = Ложь;
	СтрокаДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПредшественники Тогда
		ТаблицаПредшественникиПередУдалением(Элементы.ТаблицаПредшественники, Отказ);
		Если НЕ Отказ Тогда
			ТекущаяСтрокаПлана = Элементы.ТаблицаПредшественники.ТекущиеДанные;
			СтрокаДерева.ТаблицаПредшественники.Удалить(ТекущаяСтрокаПлана);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланДДС Тогда
		ТаблицаПланДвиженияДенежныхСредствПередУдалением(Элементы.ТаблицаПланДвиженияДенежныхСредств, Отказ);
		Если НЕ Отказ Тогда
			ТекущаяСтрокаПлана = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
			СтрокаДерева.ПланДвиженияДенежныхСредств.Удалить(ТекущаяСтрокаПлана);
			ТаблицаПланДвиженияДенежныхСредствПослеУдаления(Элементы.ТаблицаПланДвиженияДенежныхСредств);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланДоходов Тогда
		ТаблицаПланДоходовПередУдалением(Элементы.ТаблицаПланДоходов, Отказ);
		Если НЕ Отказ Тогда
			ТекущаяСтрокаПлана = Элементы.ТаблицаПланДоходов.ТекущиеДанные;
			СтрокаДерева.ПланДоходов.Удалить(ТекущаяСтрокаПлана);
			ТаблицаПланДоходовПослеУдаления(Элементы.ТаблицаПланДоходов);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланРасходов Тогда
		ТаблицаПланРасходовПередУдалением(Элементы.ТаблицаПланРасходов, Отказ);
		Если НЕ Отказ Тогда
			ТекущаяСтрокаПлана = Элементы.ТаблицаПланРасходов.ТекущиеДанные;
			СтрокаДерева.ПланРасходов.Удалить(ТекущаяСтрокаПлана);
			ТаблицаПланРасходовПослеУдаления(Элементы.ТаблицаПланРасходов);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланРолей Тогда
		ТаблицаПланРолейОбщаяПередУдалением(Элементы.ТаблицаПланРолейОбщая, Отказ);
		Если НЕ Отказ Тогда
			ТекущаяСтрокаПлана = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
			СтрокаДерева.ПланРолейОбщая.Удалить(ТекущаяСтрокаПлана);
			ТаблицаПланРолейОбщаяПослеУдаления(Элементы.ТаблицаПланРолейОбщая);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланТрудовыхРесурсов Тогда
		ТаблицаПланРесурсовОбщаяПередУдалением(Элементы.ТаблицаПланРесурсовОбщая, Отказ);
		Если НЕ Отказ Тогда
			ТекущаяСтрокаПлана = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
			СтрокаДерева.ПланРесурсовОбщая.Удалить(ТекущаяСтрокаПлана);
			ТаблицаПланРесурсовОбщаяПослеУдаления(Элементы.ТаблицаПланРесурсовОбщая);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаПланМатериалов Тогда
		ТаблицаПланМатериаловОбщаяПередУдалением(Элементы.ТаблицаПланМатериаловОбщая, Отказ);
		Если НЕ Отказ Тогда
			ТекущаяСтрокаПлана = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
			СтрокаДерева.ПланМатериаловОбщая.Удалить(ТекущаяСтрокаПлана);
			ТаблицаПланРесурсовОбщаяПослеУдаления(Элементы.ТаблицаПланМатериаловОбщая);
		КонецЕсли;
	ИначеЕсли Элементы.ГруппаСтраницыПанельЗадачи.ТекущаяСтраница = Элементы.СтраницаКомментарииКЗадаче Тогда
		ДеревоПроектаКомментарииКЗадачеПередУдалением(Элементы.ДеревоПроектаКомментарииКЗадаче, Отказ);
		Если НЕ Отказ Тогда
			ТекущаяСтрокаПлана = Элементы.ДеревоПроектаКомментарииКЗадаче.ТекущиеДанные;
			СтрокаДерева.КомментарииКЗадаче.Удалить(ТекущаяСтрокаПлана);
			ДеревоПроектаКомментарииКЗадачеПослеУдаления(Элементы.ДеревоПроектаКомментарииКЗадаче);
		КонецЕсли;
	КонецЕсли;
	бУдалениеПоКнопке = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеРодителяПанельЗадачНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	КомандаДеревоПроектаПереместитьЭлемент(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаТипОграниченияПанельЗадачПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.ТипОграничения = ТекущиеДанные.ТипОграничения Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("ТипОграничения");
				
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("УИД", ТекущиеДанные.УИД);
	СтруктураИзменения.Вставить("ИмяРеквизита", "ТипОграничения");
	СтруктураИзменения.Вставить("НовоеЗначение", ТекущиеДанные.ТипОграничения);
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтруктураИзменения, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаДатаОграниченияПанельЗадачПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.ДатаОграничения = ТекущиеДанные.ДатаОграничения Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("ДатаОграничения");
				
	СтруктураИзменения = Новый Структура;
	СтруктураИзменения.Вставить("УИД", ТекущиеДанные.УИД);
	СтруктураИзменения.Вставить("ИмяРеквизита", "ДатаОграничения");
	СтруктураИзменения.Вставить("НовоеЗначение", ТекущиеДанные.ДатаОграничения);
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтруктураИзменения, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПроцентГотовностиПанельЗадачПриИзменении(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Если СтрокаТаблицы.ПроцентГотовности = ТекущиеДанныеДерева.ПроцентГотовности Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	
	Если ТекущиеДанныеДерева.ПроцентГотовности = 100 Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ДлительностьПлан", СтрокаТаблицы.Длительность);
	КонецЕсли;
	
	ДобавитьСобытиеИзменениеРеквизитаДерева("ПроцентГотовности");
	
	Если СтрокаТаблицы.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
		МассивСообщенийСерверу = Новый Массив;
		
		КалендарьЗадачи = ?(ТекущиеДанныеДерева.Календарь.Пустая(), КалендарьПроекта, ТекущиеДанныеДерева.Календарь);
		
		ПустаяДата = Дата(1,1,1);
		Если ТекущиеДанныеДерева.ПроцентГотовности > 0 И ТекущиеДанныеДерева.ФактическаяДатаНачала = ПустаяДата Тогда
			//ТекущиеДанныеДерева.ФактическаяДатаНачала = ?(ТекущиеДанныеДерева.ДатаНачала > ТекущаяДата(), НачалоДня(ТекущаяДата()), ТекущиеДанныеДерева.ДатаНачала);
			ТекущиеДанныеДерева.ФактическаяДатаНачала = ТекущиеДанныеДерева.ДатаНачала;
			ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДатаНачала");
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
			СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.ФактическаяДатаНачала);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		Если ТекущиеДанныеДерева.ПроцентГотовности = 100 И ТекущиеДанныеДерева.ФактическаяДатаОкончания = ПустаяДата Тогда
			//СтрокаЗадача.ДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(СтрокаЗадача.ДатаНачала, СтрокаЗадача.Длительность, СтрокаЗадача.ЕдиницаВремени, КалендарьЗадачи, СтрокаЗадача.Длительность <> 0, Ложь, СтруктураПараметров);
			//ТекущиеДанныеДерева.ФактическаяДатаОкончания = ?(ТекущиеДанныеДерева.ДатаНачала > ТекущаяДата()
			//	, грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(НачалоДня(ТекущаяДата()), ТекущиеДанныеДерева.Длительность, ТекущиеДанныеДерева.ЕдиницаВремени, КалендарьЗадачи, ТекущиеДанныеДерева.Длительность <> 0, Ложь, Новый Структура)
			//	, ТекущиеДанныеДерева.ДатаОкончания);
			ТекущиеДанныеДерева.ФактическаяДатаОкончания = ТекущиеДанныеДерева.ДатаОкончания;
			ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДатаОкончания");
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаОкончания");
			СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.ФактическаяДатаОкончания);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		Если ТекущиеДанныеДерева.ПроцентГотовности = 0 И ТекущиеДанныеДерева.ФактическаяДатаНачала <> ПустаяДата Тогда
				ТекущиеДанныеДерева.ФактическаяДатаНачала = ПустаяДата;
				ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДатаНачала");
				
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
				СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
				СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.ФактическаяДатаНачала);
				МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		Если ТекущиеДанныеДерева.ПроцентГотовности < 100 И ТекущиеДанныеДерева.ФактическаяДатаОкончания <> ПустаяДата Тогда
			ТекущиеДанныеДерева.ФактическаяДатаОкончания = ПустаяДата;
			ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДатаОкончания");
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаОкончания");
			СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.ФактическаяДатаОкончания);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		
		Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
			СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.РучнойВвод);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		Иначе
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
			СообщениеСерверу.Вставить("НовоеЗначение", Истина);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		
		КалендарьЗадачи = ?(ТекущиеДанныеДерева.Календарь.Пустая(), КалендарьПроекта, ТекущиеДанныеДерева.Календарь);
		Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
			ТекущиеДанныеДерева.ФактическаяДлительность = 0;
		ИначеЕсли СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
			ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ФактическаяДатаНачала, грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ТекущаяДата(), КалендарьЗадачи), КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		ИначеЕсли СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
			ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ДатаНачала, ТекущиеДанныеДерева.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		Иначе
			ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ФактическаяДатаНачала, ТекущиеДанныеДерева.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		КонецЕсли;
		ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДлительность");
		
		//Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		//	ТекущиеДанныеДерева.ФактическаяДлительность = 0;
		//ИначеЕсли СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		//	ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ФактическаяДатаНачала, грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ТекущаяДата(), КалендарьЗадачи), КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		//ИначеЕсли СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
		//	ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ДатаНачала, ТекущиеДанныеДерева.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		//Иначе
		//	ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ФактическаяДатаНачала, ТекущиеДанныеДерева.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		//КонецЕсли;
		//ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДлительность");
		
		МассивИзменений = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	КонецЕсли;
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	бФлагПроцентГотовности = ТекущиеДанныеДерева.ПроцентГотовности = 100;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаФлагПроцентГотовностиПанельЗадачПриИзменении(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	НачатьДействие();
	
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ПроцентГотовности", ?(бФлагПроцентГотовности, 100, 0));
	
	Если СтрокаТаблицы.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
		МассивСообщенийСерверу = Новый Массив;
		
		КалендарьЗадачи = ?(ТекущиеДанныеДерева.Календарь.Пустая(), КалендарьПроекта, ТекущиеДанныеДерева.Календарь);
		
		ПустаяДата = Дата(1,1,1);
		Если бФлагПроцентГотовности Тогда
			Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
				//ФактическаяДатаНачала = ?(СтрокаТаблицы.ДатаНачала > ТекущаяДата(), НачалоДня(ТекущаяДата()), СтрокаТаблицы.ДатаНачала);
				ФактическаяДатаНачала = СтрокаТаблицы.ДатаНачала;
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ФактическаяДатаНачала", ФактическаяДатаНачала);
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
				СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
				СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.ФактическаяДатаНачала);
				МассивСообщенийСерверу.Добавить(СообщениеСерверу);
			КонецЕсли;
			Если СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
				
				//ФактическаяДатаОкончания = ?(СтрокаТаблицы.ДатаНачала > ТекущаяДата()
				//	, грзнтРасчетСроковПовторноеИспользование.ДобавитьКДатеПоКалендарю(НачалоДня(ТекущаяДата()), СтрокаТаблицы.Длительность, СтрокаТаблицы.ЕдиницаВремени, КалендарьЗадачи, СтрокаТаблицы.Длительность <> 0, Ложь, Новый Структура)
				//	, СтрокаТаблицы.ДатаОкончания);
				ФактическаяДатаОкончания = СтрокаТаблицы.ДатаОкончания;
				//ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ФактическаяДатаОкончания", СтрокаТаблицы.ДатаОкончания);
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ФактическаяДатаОкончания", ФактическаяДатаОкончания);
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
				СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаОкончания");
				СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.ФактическаяДатаОкончания);
				МассивСообщенийСерверу.Добавить(СообщениеСерверу);
			КонецЕсли;
		Иначе
			СтрокаТаблицы.ПроцентГотовности = 0;
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ФактическаяДатаОкончания", ПустаяДата);
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаОкончания");
			СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.ФактическаяДатаОкончания);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		
		Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
			СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанныеДерева.РучнойВвод);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		Иначе
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанныеДерева.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
			СообщениеСерверу.Вставить("НовоеЗначение", Истина);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		
		Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
			ТекущиеДанныеДерева.ФактическаяДлительность = 0;
		ИначеЕсли СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
			ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ФактическаяДатаНачала, грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ТекущаяДата(), КалендарьЗадачи), КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		ИначеЕсли СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
			ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ДатаНачала, ТекущиеДанныеДерева.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		Иначе
			ТекущиеДанныеДерева.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанныеДерева.ФактическаяДатаНачала, ТекущиеДанныеДерева.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанныеДерева.ЕдиницаВремени);
		КонецЕсли;
		ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДлительность");
		
		МассивИзменений = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	КонецЕсли;
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаФактическаяДатаНачалаПанельЗадачПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.ФактическаяДатаНачала = ТекущиеДанные.ФактическаяДатаНачала Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяДата = Дата(1,1,1);
	
	Если ТекущиеДанные.ФактическаяДатаНачала > ТекущаяДата() Тогда
		//Предупреждение("Фактическая дата начала не может быть больше текущей даты " + Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг"));
		ПоказатьПредупреждение(, "Фактическая дата начала не может быть больше текущей даты " + Формат(ТекущаяДата(), "ДФ=дд.ММ.гггг"));
		ТекущиеДанные.ФактическаяДатаНачала = СтрокаТаблицы.ФактическаяДатаНачала;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ФактическаяДатаНачала = ПустаяДата И ТекущиеДанные.ФактическаяДатаОкончания <> ПустаяДата Тогда
		//Предупреждение("Фактическая дата начала не может быть пустой, если задана фактическая дата окончания.");
		ПоказатьПредупреждение(, "Фактическая дата начала не может быть пустой, если задана фактическая дата окончания.");
		ТекущиеДанные.ФактическаяДатаНачала = СтрокаТаблицы.ФактическаяДатаНачала;
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ФактическаяДатаНачала > ТекущиеДанные.ФактическаяДатаОкончания И ТекущиеДанные.ФактическаяДатаОкончания <> ПустаяДата И ТекущиеДанные.Длительность > 0 Тогда
		//Предупреждение("Фактическая дата начала больше фактической даты окончания.");
		ПоказатьПредупреждение(, "Фактическая дата начала больше фактической даты окончания.");
		ТекущиеДанные.ФактическаяДатаНачала = СтрокаТаблицы.ФактическаяДатаНачала;
		Возврат;
	КонецЕсли;

	
	НачатьДействие();
	Если ТекущиеДанные.ФактическаяДатаНачала = ПустаяДата Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ДлительностьПлан", СтрокаТаблицы.Длительность);
	КонецЕсли;
	
	ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДатаНачала");
	
	МассивСообщенийСерверу = Новый Массив;
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
	СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
	СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.ФактическаяДатаНачала);
	МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	
	Если СтрокаТаблицы.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ФактическаяДатаОкончания", СтрокаТаблицы.ФактическаяДатаНачала);
	КонецЕсли;
	
	Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.РучнойВвод);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		Если СтрокаТаблицы.ФактическаяДатаОкончания <> ПустаяДата Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ФактическаяДатаОкончания", ПустаяДата);
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
			СообщениеСерверу.Вставить("НовоеЗначение", ПустаяДата);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		
	ИначеЕсли СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ПроцентГотовности", 0);
		бФлагПроцентГотовности = Ложь;
		
		Если СтрокаТаблицы.ДлительностьПлан <> 0 Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "Длительность", СтрокаТаблицы.ДлительностьПлан);
			
			Если СтрокаТаблицы.Длительность > 0 И СтрокаТаблицы.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача"));
			ИначеЕсли СтрокаТаблицы.Длительность = 0 И СтрокаТаблицы.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") И СтрокаТаблицы.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха"));
			КонецЕсли;
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "Длительность");
			СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.Длительность);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", Истина);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
	Иначе
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ПроцентГотовности", 100);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", Истина);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "ДатаНачала");
		СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.ФактическаяДатаНачала);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если ТекущиеДанные.ФактическаяДатаОкончания = ПустаяДата И ТекущиеДанные.ПроцентГотовности = 100 Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ПроцентГотовности", 0);
	КонецЕсли;
	
	бФлагПроцентГотовности = ТекущиеДанные.ПроцентГотовности = 100;
	
	МассивВозврата = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
	
	КалендарьЗадачи = ?(ТекущиеДанные.Календарь.Пустая(), КалендарьПроекта, ТекущиеДанные.Календарь);
	Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		ТекущиеДанные.ФактическаяДлительность = 0;
	ИначеЕсли СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		ТекущиеДанные.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанные.ФактическаяДатаНачала, грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ТекущаяДата(), КалендарьЗадачи), КалендарьЗадачи, ТекущиеДанные.ЕдиницаВремени);
	ИначеЕсли СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
		ТекущиеДанные.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанные.ДатаНачала, ТекущиеДанные.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанные.ЕдиницаВремени);
	Иначе
		ТекущиеДанные.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанные.ФактическаяДатаНачала, ТекущиеДанные.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанные.ЕдиницаВремени);
	КонецЕсли;
	ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДлительность");
	
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаФактическаяДатаОкончанияПанельЗадачПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	ПустаяДата = Дата(1,1,1);
	
	Если ТекущиеДанные.ФактическаяДатаОкончания <> ПустаяДата Тогда
		ФактическаяДатаОкончания = грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ТекущиеДанные.ФактическаяДатаОкончания, ?(ТекущиеДанные.Календарь.Пустая(), КалендарьПроекта, ТекущиеДанные.Календарь));
	Иначе
		ФактическаяДатаОкончания = ПустаяДата;
	КонецЕсли;
	
	Если ФактическаяДатаОкончания = СтрокаТаблицы.ФактическаяДатаОкончания Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ФактическаяДатаНачала = ПустаяДата И ФактическаяДатаОкончания <> ПустаяДата И ФактическаяДатаОкончания < СтрокаТаблицы.ДатаНачала Тогда
		ПоказатьПредупреждение(, "Фактическая дата окончания раньше плановой даты начала. Возможно ошибка. Установите вручную фактическую дату начала.");
		//Предупреждение("Фактическая дата окончания раньше фактической даты начала. Возможно ошибка.");
		ТекущиеДанные.ФактическаяДатаОкончания = СтрокаТаблицы.ФактическаяДатаОкончания;
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.ФактическаяДатаНачала > ФактическаяДатаОкончания И ФактическаяДатаОкончания <> ПустаяДата Тогда
		ПоказатьПредупреждение(, "Фактическая дата окончания раньше плановой даты начала. Возможно ошибка. Установите вручную фактическую дату начала.");
		//Предупреждение("Фактическая дата окончания раньше фактической даты начала. Возможно ошибка.");
		ТекущиеДанные.ФактическаяДатаОкончания = СтрокаТаблицы.ФактическаяДатаОкончания;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	
	Если СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата И ФактическаяДатаОкончания <> ПустаяДата Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ДлительностьПлан", СтрокаТаблицы.Длительность);
	КонецЕсли;
	Если ФактическаяДатаОкончания = ПустаяДата И ТекущиеДанные.ПроцентГотовности = 100 Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ПроцентГотовности", 0);
	КонецЕсли;
	
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ФактическаяДатаОкончания", ФактическаяДатаОкончания);
	
	МассивСообщенийСерверу = Новый Массив;
	МассивСообщенийСерверу = Новый Массив;
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
	СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаОкончания");
	СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.ФактическаяДатаОкончания);
	МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	
	Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.РучнойВвод);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		//СообщениеСерверу = Новый Структура;
		//СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		//СообщениеСерверу.Вставить("ИмяРеквизита", "ДатаОкончания");
		//СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.ДатаОкончания);
		//МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	ИначеЕсли СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", Истина);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "ДатаОкончания");
		СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.ФактическаяДатаОкончания);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ФактическаяДатаНачала", СтрокаТаблицы.ДатаНачала);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
		СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.ФактическаяДатаНачала);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ПроцентГотовности", 100);
		
	ИначеЕсли СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		Если СтрокаТаблицы.ДлительностьПлан <> 0 Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "Длительность", СтрокаТаблицы.ДлительностьПлан);
			
			Если СтрокаТаблицы.Длительность > 0 И СтрокаТаблицы.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача"));
			ИначеЕсли СтрокаТаблицы.Длительность = 0 И СтрокаТаблицы.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") И СтрокаТаблицы.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха"));
			КонецЕсли;
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
			СообщениеСерверу.Вставить("ИмяРеквизита", "Длительность");
			СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.Длительность);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", Истина);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	Иначе
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", Истина);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", ТекущиеДанные.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "ДатаОкончания");
		СообщениеСерверу.Вставить("НовоеЗначение", ТекущиеДанные.ФактическаяДатаОкончания);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "ПроцентГотовности", 100);
	КонецЕсли;
	МассивВозврата = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
	
	бФлагПроцентГотовности = ТекущиеДанные.ПроцентГотовности = 100;
	
	КалендарьЗадачи = ?(ТекущиеДанные.Календарь.Пустая(), КалендарьПроекта, ТекущиеДанные.Календарь);
	Если СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		ТекущиеДанные.ФактическаяДлительность = 0;
	ИначеЕсли СтрокаТаблицы.ФактическаяДатаОкончания = ПустаяДата Тогда
		ТекущиеДанные.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанные.ФактическаяДатаНачала, грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ТекущаяДата(), КалендарьЗадачи), КалендарьЗадачи, ТекущиеДанные.ЕдиницаВремени);
	ИначеЕсли СтрокаТаблицы.ФактическаяДатаНачала = ПустаяДата Тогда
		ТекущиеДанные.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанные.ДатаНачала, ТекущиеДанные.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанные.ЕдиницаВремени);
	Иначе
		ТекущиеДанные.ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(ТекущиеДанные.ФактическаяДатаНачала, ТекущиеДанные.ФактическаяДатаОкончания, КалендарьЗадачи, ТекущиеДанные.ЕдиницаВремени);
	КонецЕсли;
	ДобавитьСобытиеИзменениеРеквизитаДерева("ФактическаяДлительность");
	
	ПосчитатьИтогиПроцентовПоКолонкам("", );
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаВидОперацииПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.ВидОперации = ТекущиеДанные.ВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("ВидОперации");
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаВидЭлементаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЕстьПодчиненные = Ложь;
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаПроекта.Родитель = ТекущиеДанные.УИД Тогда
			ЕстьПодчиненные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") И НЕ ЕстьПодчиненные Тогда
		ПоказатьПредупреждение(, "Нельзя выбирать вид элемента ""Группа задач"" для задачи, не являющейся группой");
		//Предупреждение("Нельзя выбирать вид элемента ""Группа задач"" для задачи, не являющейся группой");
		СтандартнаяОбработка = Ложь;
	ИначеЕсли ЕстьПодчиненные И ВыбранноеЗначение <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
		ПоказатьПредупреждение(, "Нельзя выбирать вид элемента кроме ""Группа задач"" для задачи, являющейся группой");
		//Предупреждение("Нельзя выбирать вид элемента кроме ""Группа задач"" для задачи, являющейся группой");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаВидЭлементаПриИзменении(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("ВидЭлемента");
	
	ЭтоГруппаЗадач = ТекущиеДанныеДерева.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
	ЭтоВеха = ТекущиеДанныеДерева.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха");
	ТолькоПросмотр56 = ЭтоГруппаЗадач;
	Если Элементы.ДеревоПроектаВидЭлементаПанельЗадач.ТолькоПросмотр <> ТолькоПросмотр56 Тогда
		Элементы.ДеревоПроектаВидЭлементаПанельЗадач.ТолькоПросмотр = ТолькоПросмотр56;
	КонецЕсли;
	ТолькоПросмотр56 = ЭтоВеха;
	Если Элементы.ДеревоПроектаПроцентГотовностиПанельЗадач.ТолькоПросмотр <> ТолькоПросмотр56 Тогда
		Элементы.ДеревоПроектаПроцентГотовностиПанельЗадач.ТолькоПросмотр = ТолькоПросмотр56;
	КонецЕсли;
	ТолькоПросмотр56 = ЭтоГруппаЗадач;
	Если Элементы.ДеревоПроектаФактическаяДатаНачалаПанельЗадач.ТолькоПросмотр <> ТолькоПросмотр56 Тогда
		Элементы.ДеревоПроектаФактическаяДатаНачалаПанельЗадач.ТолькоПросмотр = ТолькоПросмотр56;
	КонецЕсли;
	ТолькоПросмотр56 = ЭтоВеха ИЛИ ЭтоГруппаЗадач;
	Если Элементы.ДеревоПроектаФактическаяДатаОкончанияПанельЗадач.ТолькоПросмотр <> ТолькоПросмотр56 Тогда
		Элементы.ДеревоПроектаФактическаяДатаОкончанияПанельЗадач.ТолькоПросмотр = ТолькоПросмотр56;
	КонецЕсли;
	
	бФлагПроцентГотовности = ТекущиеДанныеДерева.ПроцентГотовности = 100;
	Если ПустаяСтрока(ТекущиеДанныеДерева.Родитель) Тогда
		НаименованиеРодителя = "";
	Иначе
		Для Каждого СтрокаРодитель ИЗ ТаблицаПроектаКопия ЦИкл
			Если СтрокаРодитель.УИД = ТекущиеДанныеДерева.Родитель Тогда
				НаименованиеРодителя = СтрокаРодитель.НаименованиеЗадачи;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//Элементы.ДеревоПроектаПроцентГотовностиПанельЗадач.Доступность = ТекущиеДанныеДерева.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха");
	//Элементы.ДеревоПроектаФактическаяДатаОкончанияПанельЗадач.ТолькоПросмотр = ТекущиеДанныеДерева.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха");
	//Элементы.ДеревоПроектаФлагПроцентГотовностиПанельЗадач.Доступность = ТекущиеДанныеДерева.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха");
	
	ДелатьПересчет = Ложь;
	Если ТекущиеДанныеДерева.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") И ТекущиеДанныеДерева.Длительность > 0 Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Длительность", 0);
		ДелатьПересчет = Истина;
	ИначеЕсли ТекущиеДанныеДерева.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") И ТекущиеДанныеДерева.Длительность = 0 Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Длительность", 1);
		ДелатьПересчет = Истина;
	КонецЕсли;
	Если ДелатьПересчет Тогда
		АдресХранилища = АдресВременногоХранилищаДанныхНаСервере;
		Идентификатор = ЭтаФорма.УникальныйИдентификатор;
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("УИД", ТекущиеДанныеДерева.УИД);
		СтруктураИзменения.Вставить("ИмяРеквизита", "Длительность");
		СтруктураИзменения.Вставить("НовоеЗначение", ТекущиеДанныеДерева.Длительность);
		МассивИзменений = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СтруктураИзменения, МассивИзменений, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаПродуктПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.Продукт = ТекущиеДанные.Продукт Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("Продукт");
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаТехпроцессПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.Техпроцесс = ТекущиеДанные.Техпроцесс Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("Техпроцесс");
	ЭтаФорма.Модифицированность = Истина;
	
	ЕстьПланы = ЕстьПланыТехнологическогоПроцесса(ТекущиеДанные.Техпроцесс);
	Если ЕстьПланы Тогда
		Описание = Новый ОписаниеОповещения("ДеревоПроектаТехпроцессПриИзмененииПродолжение", ЭтаФорма, Новый Структура("УИД", СтрокаТаблицы.УИД));
		ПоказатьВопрос(Описание, "В выбранном технологическом процессе присутствует план трудозатрат, перенести план в задачу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаТехпроцессПриИзмененииПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СтруктураВозврата = ПеренестиПланыИзТехнологическогоПроцесса(ДополнительныеПараметры.УИД);
	СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(ДополнительныеПараметры.УИД);
	
	Если СтруктураВозврата.Свойство("СтрокаСумм") И НЕ ПустаяСтрока(СтруктураВозврата.СтрокаСумм) Тогда
		СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРолейОбщая");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицы);
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		СтрокаТаблицы.ПланРолейОбщая.Очистить();
		Для Каждого СтрокаПлан ИЗ СтрокаДерева.ПланРолейОбщая Цикл
			НоваяСтрокаПлан = СтрокаТаблицы.ПланРолейОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		
		ПосчитатьИтогиПоКолонкам(СтруктураВозврата.СтрокаСумм, ДополнительныеПараметры.УИД);
		ПосчитатьИтогиПроцентовПоКолонкам(СтруктураВозврата.СтрокаСуммТрудозатрат, ДополнительныеПараметры.УИД);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаДоговорПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.Договор = ТекущиеДанные.Договор Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("Договор");
	ЭтаФорма.Модифицированность = Истина;
	
	ЕстьПланы = ЕстьПланыЮридическогоДоговора(ТекущиеДанные.Договор);
	Если ЕстьПланы Тогда
		Описание = Новый ОписаниеОповещения("ДеревоПроектаДоговорПриИзмененииПродолжение", ЭтаФорма, Новый Структура("УИД", СтрокаТаблицы.УИД));
		ПоказатьВопрос(Описание, "В выбранном юридическом договоре присутствуют планы ДДС и ДР, перенести планы в задачу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаДоговорПриИзмененииПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СтруктураВозврата = ПеренестиПланыИзЮридическогоДоговора(ДополнительныеПараметры.УИД);
	СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(ДополнительныеПараметры.УИД);
	
	Если СтруктураВозврата.Свойство("СтрокаПланы") И СтрокаТаблицы.Идентификатор >= 0 Тогда
		СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
		Если Найти(СтруктураВозврата.СтрокаПланы, "ПланДвиженияДенежныхСредств") Тогда
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицы);
			ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
			
			СтрокаТаблицы.ПланДвиженияДенежныхСредств.Очистить();
			Для Каждого СтрокаПлан ИЗ СтрокаДерева.ПланДвиженияДенежныхСредств Цикл
				НоваяСтрокаПлан = СтрокаТаблицы.ПланДвиженияДенежныхСредств.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
			КонецЦикла;
		КонецЕсли;
		
		Если Найти(СтруктураВозврата.СтрокаПланы, "ПланДоходов") Тогда
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДоходов");
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицы);
			ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
			
			СтрокаТаблицы.ПланДоходов.Очистить();
			Для Каждого СтрокаПлан ИЗ СтрокаДерева.ПланДоходов Цикл
				НоваяСтрокаПлан = СтрокаТаблицы.ПланДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
			КонецЦикла;
		КонецЕсли;
		
		Если Найти(СтруктураВозврата.СтрокаПланы, "ПланРасходов") Тогда
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицы);
			ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
			
			СтрокаТаблицы.ПланРасходов.Очистить();
			Для Каждого СтрокаПлан ИЗ СтрокаДерева.ПланРасходов Цикл
				НоваяСтрокаПлан = СтрокаТаблицы.ПланРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураВозврата.Свойство("СтрокаСумм") И НЕ ПустаяСтрока(СтруктураВозврата.СтрокаСумм) Тогда
		ПосчитатьИтогиПоКолонкам(СтруктураВозврата.СтрокаСумм, ДополнительныеПараметры.УИД);
	КонецЕсли;
	Если СтруктураВозврата.Свойство("СтрокаВалют") И НЕ ПустаяСтрока(СтруктураВозврата.СтрокаВалют) Тогда
		ПосчитатьИтогиВалютыПоКолонкам(СтруктураВозврата.СтрокаВалют, ДополнительныеПараметры.УИД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаРаботаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = ТаблицаПроектаКопия.Получить(ТекущиеДанные.ИндексТаблицы);
	Если СтрокаТаблицы.Работа = ТекущиеДанные.Работа Тогда
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ДобавитьСобытиеИзменениеРеквизитаДерева("Работа");
	ЭтаФорма.Модифицированность = Истина;
	
	ЕстьПланы = ЕстьПланыУправленческойРаботы(ТекущиеДанные.Работа);
	Если ЕстьПланы Тогда
		Описание = Новый ОписаниеОповещения("ДеревоПроектаРаботаПриИзмененииПродолжение", ЭтаФорма, Новый Структура("УИД", СтрокаТаблицы.УИД));
		ПоказатьВопрос(Описание, "В выбранной управленческой работе присутствует план трудозатрат, перенести план в задачу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаРаботаПриИзмененииПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Если РезультатВыбора <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	СтруктураВозврата = ПеренестиПланыИзУправленческойРаботы(ДополнительныеПараметры.УИД);
	СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(ДополнительныеПараметры.УИД);
	
	Если СтруктураВозврата.Свойство("СтрокаСумм") И НЕ ПустаяСтрока(СтруктураВозврата.СтрокаСумм) Тогда
		СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРолейОбщая");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицы);
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		СтрокаТаблицы.ПланРолейОбщая.Очистить();
		Для Каждого СтрокаПлан ИЗ СтрокаДерева.ПланРолейОбщая Цикл
			НоваяСтрокаПлан = СтрокаТаблицы.ПланРолейОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		
		ПосчитатьИтогиПоКолонкам(СтруктураВозврата.СтрокаСумм, ДополнительныеПараметры.УИД);
		ПосчитатьИтогиПроцентовПоКолонкам(СтруктураВозврата.СтрокаСуммТрудозатрат, ДополнительныеПараметры.УИД);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеПредшественникиПриИзменении(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		ПолеПредшественники = "";
		Возврат;
	КонецЕсли;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	СтрокаПредшественники = СтрЗаменить(ПолеПредшественники, ".", ";");
	СтрокаПредшественники = СтрЗаменить(СтрокаПредшественники, ",", ";");
	СтрокаПредшественники = СтрЗаменить(СтрокаПредшественники, ":", ";");
	СтрокаПредшественники = СтрЗаменить(СтрокаПредшественники, " ", ";");
	Пока Найти(СтрокаПредшественники, ";;") > 0 Цикл
		СтрокаПредшественники = СтрЗаменить(СтрокаПредшественники, ";;", ";");
	КонецЦикла;
	СтрокаПредшественники = СтрЗаменить(СтрокаПредшественники, ";", Символы.ПС);
	
	МассивПредшественники = Новый Массив;
	Для К = 1 ПО СтрЧислоСтрок(СтрокаПредшественники) Цикл
		СтрокаПредшественник = СтрПолучитьСтроку(СтрокаПредшественники, К);
		
		// Найдём первые цифры
		ИтоговоеЧисло = "";
		Пока СтрДлина(СтрокаПредшественник) > 0 Цикл
			Если Найти("0123456789", Сред(СтрокаПредшественник, 1, 1)) > 0 Тогда
				ИтоговоеЧисло = "" + ИтоговоеЧисло + Сред(СтрокаПредшественник, 1, 1);
				СтрокаПредшественник = Сред(СтрокаПредшественник, 2);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ИтоговоеЧисло = "" Тогда
			Продолжить;
		КонецЕсли;
		ИтоговоеЧисло = Число(ИтоговоеЧисло);
		СтрокаПроекта = Неопределено;
		Для Каждого СтрокаПроектаПоНомеру ИЗ ТаблицаПроектаКопия Цикл
			Если СтрокаПроектаПоНомеру.НомерСтрокиПроекта = ИтоговоеЧисло Тогда
				СтрокаПроекта = СтрокаПроектаПоНомеру;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаПроекта = Неопределено Тогда
			ПоказатьПредупреждение(, "Не найдена строка с номером """ + Формат(ИтоговоеЧисло, "ЧН=") + """", , "Ошибка выбора предшественника");
			ПолеПредшественники = ТекущиеДанныеДерева.НадписьПредшественникиПоНомеруСтроки;
			Возврат;
		КонецЕсли;
		СтруктураПредшественник = Новый Структура;
		СтруктураПредшественник.Вставить("УИД", ТекущиеДанныеДерева.УИД);
		СтруктураПредшественник.Вставить("ПредшественникУИД", СтрокаПроекта.УИД);
		СтруктураПредшественник.Вставить("ПредшественникНаименование", СтрокаПроекта.НаименованиеЗадачи);
		СтруктураПредшественник.Вставить("ПредшественникКодСДР", СтрокаПроекта.КодСДР);
		СтруктураПредшественник.Вставить("ПредшественникНомерСтрокиПроекта", СтрокаПроекта.НомерСтрокиПроекта);
		СтруктураПредшественник.Вставить("Задержка", 0);
		СтруктураПредшественник.Вставить("ЕдиницаВремени", ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень"));
		
		Если Найти(ВРег(СтрокаПредшественник), "НН") > 0 Тогда
			СтруктураПредшественник.Вставить("ТипСвязи", ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоНачало"));
		ИначеЕсли Найти(ВРег(СтрокаПредшественник), "НО") > 0 Тогда
			СтруктураПредшественник.Вставить("ТипСвязи", ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.НачалоОкончание"));
		ИначеЕсли Найти(ВРег(СтрокаПредшественник), "ОН") > 0 Тогда
			СтруктураПредшественник.Вставить("ТипСвязи", ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало"));
		ИначеЕсли Найти(ВРег(СтрокаПредшественник), "ОО") > 0 Тогда
			СтруктураПредшественник.Вставить("ТипСвязи", ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеОкончание"));
		Иначе
			СтруктураПредшественник.Вставить("ТипСвязи", ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало"));
		КонецЕсли;
		// обработка "+", "-" и задержек не описана в ТЗ, пока не будем делать
		МассивПредшественники.Добавить(СтруктураПредшественник);
	КонецЦикла;
	
	// Проверим, можно ли вообще задать таких предшественников
	Если МассивПредшественники.Количество() > 0 Тогда
		МассивТекущие = Новый Массив;
		Для Каждого СтрокаПредшественник ИЗ ТекущиеДанныеДерева.ТаблицаПредшественники Цикл
			МассивТекущие.Добавить(Новый Структура("УИД, ПредшественникУИД", ТекущиеДанныеДерева.УИД, СтрокаПредшественник.ПредшественникУИД));
		КонецЦикла;
		
		РезультатПроверки = Неопределено;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПроверитьВозможностьЗаменыПредшественников(АдресВременногоХранилищаДанныхНаСервере, УникальныйИдентификатор, МассивТекущие, МассивПредшественники, РезультатПроверки);
		Если РезультатПроверки <> Неопределено Тогда
			СтрокаПроекта = тСоответствиеТаблицыУИД.Получить(РезультатПроверки.УИД);
			СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(РезультатПроверки.ПредшественникУИД);
			//СтрокаСообщения = "Строка №" + Формат(СтрокаПроекта.НомерСтрокиПроекта, "ЧН=") + ?(СтрокаПредшественник = Неопределено, "", " предшественник №" + СтрокаПредшественник.НомерСтрокиПроекта) + Символы.ПС
			СтрокаСообщения = "Строка №" + Формат(СтрокаТаблицыПроекта.НомерСтрокиПроекта, "ЧН=") + ?(СтрокаПредшественник = Неопределено, "", " предшественник №" + СтрокаПредшественник.НомерСтрокиПроекта) + Символы.ПС
				+ РезультатПроверки.Сообщение + " Выберите других предшественников!";
			
			ПоказатьПредупреждение(, СтрокаСообщения, , "Ошибка выбора предшественника");
			ПолеПредшественники = ТекущиеДанныеДерева.НадписьПредшественникиПоНомеруСтроки;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокСообщенийСерверу.Очистить();
	
	СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
	БылиИзменения = Ложь;
	// Удалим старых предшественников
	К = 0;
	Пока К < ТекущиеДанныеДерева.ТаблицаПредшественники.Количество() Цикл
		СтрокаПредшественник = ТекущиеДанныеДерева.ТаблицаПредшественники.Получить(К);
		Нашли = Ложь;
		Для Каждого СтруктураПредшественник ИЗ МассивПредшественники Цикл
			Если СтруктураПредшественник.ПредшественникУИД = СтрокаПредшественник.ПредшественникУИД Тогда
				Нашли = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Нашли Тогда
			К = К + 1;
			Продолжить;
		КонецЕсли;
		
		СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СтрокаПредшественник.ПредшественникУИД);
		// удалить сообщение на серверуСообщениеСерверу = Новый Структура;
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
		СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", ТекущиеДанныеДерева.УИД, СтрокаПредшественник.ПредшественникУИД));
		СписокСообщенийСерверу.Добавить(СообщениеСерверу);
		
		ТекущиеДанныеДерева.ТаблицаПредшественники.Удалить(К);
		БылиИзменения = Истина;
		
	КонецЦикла;
	
	// добавим новых предшественников / изменим текущих
	Для Каждого СтруктураПредшественник ИЗ МассивПредшественники Цикл
		Нашли = Ложь;
		Для Каждого СтрокаПредшественник ИЗ ТекущиеДанныеДерева.ТаблицаПредшественники Цикл
			Если СтрокаПредшественник.ПредшественникУИД = СтруктураПредшественник.ПредшественникУИД Тогда
				Нашли = Истина;
				Прервать
			КонецЕсли;
		КонецЦикла;
		Если Нашли Тогда
			// Изменим текущего предшественника, если нужно
			Если СтрокаПредшественник.ТипСвязи <> СтруктураПредшественник.ТипСвязи Тогда//ИЛИ СтрокаПредшественник.Задержка <> СтруктураПредшественник.Задержка Тогда
				СтрокаПредшественник.ТипСвязи = СтруктураПредшественник.ТипСвязи;
				//СтрокаПредшественник.Задержка = СтруктураПредшественник.Задержка;
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("ИмяСобытия", "ИзменитьПараметрыПредшественника");
				ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи", ТекущиеДанныеДерева.УИД);
				ЗаполнитьЗначенияСвойств(ДанныеЗадачи, СтрокаПредшественник);
				СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
				СписокСообщенийСерверу.Добавить(СообщениеСерверу);
				БылиИзменения = Истина;
			КонецЕсли;
		Иначе
			// Добавим предшественника в узел дерева
			СтрокаПредшественник = ТекущиеДанныеДерева.ТаблицаПредшественники.Добавить();
			СтрокаПредшественник.НаименованиеЗадачи = СтруктураПредшественник.ПредшественникНаименование;
			СтрокаПредшественник.Внешний = Ложь;
			СтрокаПредшественник.ТипСвязи = СтруктураПредшественник.ТипСвязи;
			СтрокаПредшественник.ПредшественникУИД = СтруктураПредшественник.ПредшественникУИД;
			СтрокаПредшественник.Задержка = СтруктураПредшественник.Задержка;
			СтрокаПредшественник.ЕдиницаВремени = СтруктураПредшественник.ЕдиницаВремени;
			СтрокаПредшественник.КодСДР = СтруктураПредшественник.ПредшественникКодСДР;
			СтрокаПредшественник.НомерСтрокиПроекта = СтруктураПредшественник.ПредшественникНомерСтрокиПроекта;
			СтрокаПредшественник.ГУИД = Строка(Новый УникальныйИдентификатор);
			
			СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СтрокаПредшественник.ПредшественникУИД);
			
			// Добавить сообщение на сервере
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "ДобавитьПредшественника");
			ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи");
			ЗаполнитьЗначенияСвойств(ДанныеЗадачи, СтруктураПредшественник);
			СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
			СписокСообщенийСерверу.Добавить(СообщениеСерверу);
			
			БылиИзменения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылиИзменения Тогда
		НачатьДействие();
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		
		СтрокаТаблицыПроекта.ТаблицаПредшественники.Очистить();
		Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ТаблицаПредшественники Цикл
			НоваяСтрокаПлан = СтрокаТаблицыПроекта.ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
		КонецЦикла;
		
		ТаблицаПредшественникиСинхронизироватьСоответствия(СтрокаТаблицыПроекта);
		
		СтруктураНадписей = СформироватьНадписьПредшественники(СтрокаТаблицыПроекта);
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественники", СтруктураНадписей.Надпись);
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписей.НадписьПоНомеруСтроки);
		Для Каждого ЭлементСпискаПредшественник ИЗ СписокУИДПредшественикиДляПересчетаПоследователи Цикл
			СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(ЭлементСпискаПредшественник.Значение);
			Если СтрокаПредшественник = Неопределено ИЛИ СтрокаПредшественник.Внешний Тогда
				Продолжить;
			КонецЕсли;
			СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаПредшественник);
			СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
			ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
			ОписаниеСобытия.Вставить("УИД", СтрокаПредшественник.УИД);
			ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
			ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		КонецЦикла;
		СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
	
		МассивСообщенийСерверу = СписокСообщенийСерверу.ВыгрузитьЗначения();
		Если МассивсообщенийСерверу.Количество() > 0 Тогда
			МассивВозврата = Новый Массив;
			АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
			ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);
		КонецЕсли;
		
		ЭтаФорма.Модифицированность = Истина;
		СписокСообщенийСерверу.Очистить();
	КонецЕсли;
	ТекущиеДанныеДерева.ТаблицаПредшественники.Сортировать("НомерСтрокиПроекта");
	ПолеПредшественники = ТекущиеДанныеДерева.НадписьПредшественникиПоНомеруСтроки;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиСинхронизироватьСоответствия(СтрокаТаблицыПроекта)
	МассивСвязейПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаТаблицыПроекта.УИД);
	Если МассивСвязейПредшественники = Неопределено Тогда
		МассивСвязейПредшественники = Новый Массив;
	КонецЕсли;
	К = 0;
	// Удалим исчезнувшие связи
	Пока К < МассивСвязейПредшественники.Количество() Цикл
		СвязьПредшественник = МассивСвязейПредшественники.Получить(К);
		Нашли = Ложь;
		Для Каждого СвязьПредшественникТаблицы ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
			Если СвязьПредшественник.ПредшественникУИД = СвязьПредшественникТаблицы.ПредшественникУИД Тогда
				Нашли = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Нашли Тогда
			К = К + 1;
			Продолжить;
		КонецЕсли;
		
		// Удалим связь, которая показывает последователей у предшественника
		МассивСвязейПоследователи = тСоответствиеПредшественникиПредшественникУИД.Получить(СвязьПредшественник.ПредшественникУИД);
		Если МассивСвязейПоследователи = Неопределено Тогда
			МассивСвязейПоследователи = Новый Массив;
		КонецЕсли;
		Для Каждого СвязьПоследователь ИЗ МассивСвязейПоследователи Цикл
			Если СвязьПоследователь.УИД = СтрокаТаблицыПроекта.УИД Тогда 
				МассивСвязейПоследователи.Удалить(МассивСвязейПоследователи.Найти(СвязьПоследователь));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		тСоответствиеПредшественникиПредшественникУИД.Вставить(СвязьПредшественник.ПредшественникУИД, МассивСвязейПоследователи);
		
		// Удалим связь на предшественника и удалим его из таблицы
		МассивСвязейПредшественники.Удалить(К);
		ТаблицаПредшественники.Удалить(СвязьПредшественник);
	КонецЦикла;
	
	// Добавим новые связи
	Для Каждого СвязьПредшественникТаблицы ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
		Нашли = Ложь;
		Для Каждого СвязьПредшественник ИЗ МассивСвязейПредшественники Цикл
			Если СвязьПредшественник.ПредшественникУИД = СвязьПредшественникТаблицы.ПредшественникУИД Тогда
				Нашли = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Нашли Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим связь на предшественника в таблицу
		СтрокаПредшественник = ТаблицаПредшественники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПредшественник, СвязьПредшественникТаблицы);
		СтрокаПредшественник.УИД = СтрокаТаблицыПроекта.УИД;
		МассивСвязейПредшественники.Добавить(СтрокаПредшественник);
		
		// Добавим связь, которая показывает последователей у предшественника
		МассивСвязейПоследователи = тСоответствиеПредшественникиПредшественникУИД.Получить(СвязьПредшественникТаблицы.ПредшественникУИД);
		Если МассивСвязейПоследователи = Неопределено Тогда
			МассивСвязейПоследователи = Новый Массив;
		КонецЕсли;
		МассивСвязейПоследователи.Добавить(СтрокаПредшественник);
		тСоответствиеПредшественникиПредшественникУИД.Вставить(СвязьПредшественникТаблицы.ПредшественникУИД, МассивСвязейПоследователи);
	КонецЦикла;
	
	тСоответствиеПредшественникиУИД.Вставить(СтрокаТаблицыПроекта.УИД, МассивСвязейПредшественники);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаПредшественники.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Если НоваяСтрока Тогда
		НачатьДействие();
		бФлагДобавление = Истина;
		ТекущиеДанные.ГУИД = Новый УникальныйИдентификатор;
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
		ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ЭлементДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
		Если ЭлементДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.ТипСвязи = ПредопределенноеЗначение("Перечисление.грзнтТипСвязи.ОкончаниеНачало");
		Если СокрЛП(КалендарьПроекта) = "24 часа" Тогда
			ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Сутки");
		Иначе
			ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиНаименованиеЗадачиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = ПодготовитьСтруктуруПараметровДляОткрытияФормыВыбораПредшественникаНаКлиенте(Элементы.ТаблицаПредшественники.ТекущиеДанные.ПредшественникУИД);
	СтруктураПараметров.Вставить("ОперацияВыбора", "ВыборПредшественника");
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, Элемент, , , , , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиНаименованиеЗадачиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаПредшественники.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
	СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", ТекущиеДанныеДерева.УИД, ТекущиеДанные.ПредшественникУИД));
	СписокСообщенийСерверу.Добавить(СообщениеСерверу);
	
	Если НЕ ПустаяСтрока(ТекущиеДанные.ПредшественникУИД) Тогда
		СтрокаПоследователь = тСоответствиеТаблицыУИД.Получить(ТекущиеДанные.ПредшественникУИД);
	КонецЕсли;
	
	СтрокиПредшественник = тСоответствиеПредшественникиУИД.Получить(ТекущиеДанныеДерева.УИД);
	Если СтрокиПредшественник = Неопределено Тогда
		СтрокиПредшественник = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаПредшественник ИЗ СтрокиПредшественник Цикл
		Если СтрокаПредшественник.ПредшественникУИД = ТекущиеДанные.ПредшественникУИД Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("Внешний") И ВыбранноеЗначение.Внешний Тогда
		ТекущиеДанные.КодСДР = ВыбранноеЗначение.ПроектПредставление;
		ТекущиеДанные.ПредшественникУИД = ВыбранноеЗначение.ЗадачаУИД;
		ТекущиеДанные.Внешний = Истина;
		
		Нашли = Ложь;
		СтрокаТаблицыПроектаВнешний = тСоответствиеТаблицыУИД.Получить(ТекущиеДанные.ПредшественникУИД);
		Если СтрокаТаблицыПроектаВнешний <> Неопределено Тогда
			СтрокаТаблицыПроектаВнешний = ТаблицаПроектаКопия.Добавить();
			СтрокаТаблицыПроектаВнешний.НаименованиеЗадачи = "" + ВыбранноеЗначение.ПроектПредставление + " / " + ВыбранноеЗначение.ЗадачаПредставление;
			СтрокаТаблицыПроектаВнешний.ДатаНачала = ВыбранноеЗначение.ДатаНачала;
			СтрокаТаблицыПроектаВнешний.ДатаОкончания = ВыбранноеЗначение.ДатаОкончания;
			СтрокаТаблицыПроектаВнешний.РучнойВвод = Истина;
			СтрокаТаблицыПроектаВнешний.КодСДР = ВыбранноеЗначение.ПроектПредставление;
			Если СокрЛП(КалендарьПроекта) = "24 часа" Тогда
				СтрокаТаблицыПроектаВнешний.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Сутки");
			Иначе
				СтрокаТаблицыПроектаВнешний.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень");
			КонецЕсли;
			СтрокаТаблицыПроектаВнешний.Длительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаТаблицыПроектаВнешний.ДатаНачала, СтрокаТаблицыПроектаВнешний.ДатаОкончания, КалендарьПроекта, СтрокаТаблицыПроектаВнешний.ЕдиницаВремени);
			СтрокаТаблицыПроектаВнешний.Картинка = 3;
			СтрокаТаблицыПроектаВнешний.УИД = ВыбранноеЗначение.ЗадачаУИД;
			СтрокаТаблицыПроектаВнешний.РДН = ВыбранноеЗначение.ДатаНачала;
			СтрокаТаблицыПроектаВнешний.РДО = ВыбранноеЗначение.ДатаОкончания;
			СтрокаТаблицыПроектаВнешний.ПДН = ВыбранноеЗначение.ДатаНачала;
			СтрокаТаблицыПроектаВнешний.ПДО = ВыбранноеЗначение.ДатаОкончания;
			СтрокаТаблицыПроектаВнешний.ТипОграничения = ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало");
			СтрокаТаблицыПроектаВнешний.ДатаОграничения = ВыбранноеЗначение.ДатаНачала;
			СтрокаТаблицыПроектаВнешний.Внешний = Истина;
			
			тСоответствиеТаблицыУИД.Вставить(СтрокаТаблицыПроектаВнешний.УИД, СтрокаТаблицыПроектаВнешний);
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "ДобавлениеЗадачи");
			СтруктураДанныхЗадачи = Новый Структура("Идентификатор, УИД, ДатаНачала, ДатаОкончания, РучнойВвод, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель, ТипОграничения, ДатаОграничения");
			ЗаполнитьЗначенияСвойств(СтруктураДанныхЗадачи, СтрокаТаблицыПроектаВнешний);
			СтруктураДанныхЗадачи.Вставить("Родитель", "");
			СтруктураДанныхЗадачи.Вставить("Идентификатор", 0);
			СообщениеСерверу.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
			СписокСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
		
		ВыбранноеЗначение = ВыбранноеЗначение.ЗадачаПредставление;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если ПустаяСтрока(ВыбранноеЗначение) Тогда
			ТекущиеДанные.ПредшественникУИД = "";
			ТекущиеДанные.КодСДР = "";
			ТекущиеДанные.НомерСтрокиПроекта = 0;
		Иначе
			ТекущиеДанные.ПредшественникУИД = ВыбранноеЗначение;
			СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(ВыбранноеЗначение);
			ВыбранноеЗначение = СтрокаПредшественник.НаименованиеЗадачи;
			ТекущиеДанные.КодСДР = СтрокаПредшественник.КодСДР;
			ТекущиеДанные.НомерСтрокиПроекта = СтрокаПредшественник.НомерСтрокиПроекта;
		КонецЕсли;
	КонецЕсли;
	
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("ИмяСобытия", "ДобавитьПредшественника");
	ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи", ТекущиеДанныеДерева.УИД);
	ЗаполнитьЗначенияСвойств(ДанныеЗадачи, ТекущиеДанные);
	СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
	СписокСообщенийСерверу.Добавить(СообщениеСерверу);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь
	Иначе
		НачатьДействие();
	КонецЕсли;
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", ТекущиеДанные);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	ТекущиеДанные.ТаблицаПредшественники.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ТаблицаПредшественники Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ТаблицаПредшественники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	
	МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(ТекущиеДанныеДерева.УИД);
	Если МассивПредшественники = Неопределено Тогда
		МассивПредшественники = Новый Массив;
	КонецЕсли;
	// Если нового предшественника нет в полной таблице, добавим его туда
	Для Каждого СтрокаТаблицы ИЗ ТекущиеДанныеДерева.ТаблицаПредшественники Цикл
		СтрокаПредшественник = Неопределено;
		Для каждого СтрокаПлан ИЗ МассивПредшественники Цикл
			Если СтрокаПлан.ПредшественникУИД = СтрокаТаблицы.ПредшественникУИД Тогда
				СтрокаПредшественник = СтрокаПлан;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаПредшественник = Неопределено Тогда
			СтрокаПредшественник = ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПредшественник, СтрокаТаблицы);
			СтрокаПредшественник.УИД = ТекущиеДанныеДерева.УИД;
			
			МассивПредшественникиСоответствия = тСоответствиеПредшественникиУИД.Получить(СтрокаПредшественник.УИД);
			Если МассивПредшественникиСоответствия = Неопределено Тогда
				МассивПредшественникиСоответствия = Новый Массив;
			КонецЕсли;
			МассивПредшественникиСоответствия.Добавить(СтрокаПредшественник);
			тСоответствиеПредшественникиУИД.Вставить(СтрокаПредшественник.УИД, МассивПредшественникиСоответствия);
			
			МассивПредшественникиСоответствия = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПредшественник.ПредшественникУИД);
			Если МассивПредшественникиСоответствия = Неопределено Тогда
				МассивПредшественникиСоответствия = Новый Массив;
			КонецЕсли;
			МассивПредшественникиСоответствия.Добавить(СтрокаПредшественник);
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПредшественник.ПредшественникУИД, МассивПредшественникиСоответствия);
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "ДобавитьПредшественника");
			СтруктураДанных = Новый Структура("УИД, ПредшественникУИД, Задержка, ТипСвязи, ЕдиницаВремени");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаПредшественник);
			СообщениеСерверу.Вставить("ДанныеЗадачи", СтруктураДанных);
			СписокСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЕсли;
	КонецЦикла;
	
	// Если в полной таблице есть лишний предшественник, удалим его оттуда
	МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(ТекущиеДанные.УИД);
	Если МассивПредшественники = Неопределено Тогда
		МассивПредшественники = Новый Массив;
	КонецЕсли;
	Для Каждого СтрокаПлан ИЗ МассивПредшественники Цикл
		СтрокаПредшественник = Неопределено;
		Для Каждого СтрокаТаблицы ИЗ ТекущиеДанныеДерева.ТаблицаПредшественники Цикл
			Если СтрокаПлан.ПредшественникУИД = СтрокаТаблицы.ПредшественникУИД Тогда
				СтрокаПредшественник = СтрокаПлан;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаПредшественник = Неопределено Тогда
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
			СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", СтрокаПлан.УИД, СтрокаПлан.ПредшественникУИД));
			СписокСообщенийСерверу.Добавить(СообщениеСерверу);
			
			МассивПредшественникиСоответствия = тСоответствиеПредшественникиУИД.Получить(СтрокаПлан.УИД);
			Если МассивПредшественникиСоответствия <> Неопределено Тогда
				Если МассивПредшественникиСоответствия.Найти(СтрокаПлан) <> Неопределено Тогда
					МассивПредшественникиСоответствия.Удалить(МассивПредшественникиСоответствия.Найти(СтрокаПлан));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиУИД.Вставить(СтрокаПлан.УИД, МассивПредшественникиСоответствия);
			
			МассивПредшественникиСоответствия = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПлан.ПредшественникУИД);
			Если МассивПредшественникиСоответствия <> Неопределено Тогда
				Если МассивПредшественникиСоответствия.Найти(СтрокаПлан) <> Неопределено Тогда
					МассивПредшественникиСоответствия.Удалить(МассивПредшественникиСоответствия.Найти(СтрокаПлан));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПлан.ПредшественникУИД, МассивПредшественникиСоответствия);
			
			ТаблицаПредшественники.Удалить(СтрокаПлан);
		КонецЕсли;
	КонецЦикла;
	
	ЕстьВнешний = Ложь;
	Для Каждого СтрокаПланаПроверка ИЗ ТекущиеДанные.ТаблицаПредшественники Цикл
		Если СтрокаПланаПроверка.Внешний Тогда
			ЕстьВнешний = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьВнешний Тогда
		Если ТекущиеДанные.КартинкаПредшественники <> 2 Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(ТекущиеДанные, "КартинкаПредшественники", 1);
		КонецЕсли;
	Иначе
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(ТекущиеДанные, "КартинкаПредшественники", 0);
	КонецЕсли;
	
	СтруктураНадписей = СформироватьНадписьПредшественники(ТекущиеДанные);
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(ТекущиеДанные, "НадписьПредшественники", СтруктураНадписей.Надпись);
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(ТекущиеДанные, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписей.НадписьПоНомеруСтроки);
	
	// Очистим таблицу задач от повисших внешних задач при изменении связей
	МассивУдалить = Новый Массив;
	Для Каждого СтрокаТаблицыПроекта ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаТаблицыПроекта.Внешний Тогда
			СтрокаПредшественник = Неопределено;
			Для Каждого СтрокаПлан ИЗ ТаблицаПредшественники Цикл
				Если СтрокаПлан.ПредшественникУИД = СтрокаТаблицыПроекта.УИД Тогда
					СтрокаПредшественник = СтрокаПлан;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаПредшественник = Неопределено Тогда
				МассивУдалить.Добавить(СтрокаТаблицыПроекта);
				
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("ИмяСобытия", "УдалениеЗадачи");
				СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД", СтрокаТаблицыПроекта.УИД));
				СписокСообщенийСерверу.Добавить(СообщениеСерверу);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицыПроекта ИЗ МассивУдалить Цикл
		ТекущийИндекс = ТаблицаПроектаКопия.Индекс(СтрокаТаблицыПроекта);
		
		тСоответствиеТаблицыУИД.Удалить(СтрокаТаблицыПроекта.УИД);
		
		СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыПроекта.Родитель), " ", СтрокаТаблицыПроекта.Родитель);
		МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
		Если МассивРодитель = Неопределено Тогда
			МассивРодитель = Новый Массив;
		КонецЕсли;
		Если МассивРодитель.Найти(СтрокаТаблицыПроекта) <> Неопределено Тогда
			МассивРодитель.Удалить(МассивРодитель.Найти(СтрокаТаблицыПроекта));
		КонецЕсли;
		тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
		
		ТаблицаПроектаКопия.Удалить(СтрокаТаблицыПроекта); // здесь СДР не пострадает, т.к. в нём нет этих строк
		Для К = ТекущийИндекс ПО ТаблицаПроектаКопия.Количество() - 1 Цикл
			СтрокаТаблицы = ТаблицаПроектаКопия.Получить(К);
			Если СтрокаТаблицы.Идентификатор >= 0 Тогда
				ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
				ЭлементДерева.ИндексТаблицы = К;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого СтрокаПредшественник ИЗ ТекущиеДанные.ТаблицаПредшественники Цикл
		Если НЕ ПустаяСтрока(СтрокаПредшественник.ПредшественникУИД) И СписокУИДПредшественикиДляПересчетаПоследователи.НайтиПоЗначению(СтрокаПредшественник.ПредшественникУИД) = Неопределено Тогда
			СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СтрокаПредшественник.ПредшественникУИД);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементСпискаПредшественник ИЗ СписокУИДПредшественикиДляПересчетаПоследователи Цикл
		СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(ЭлементСпискаПредшественник.Значение);
		Если СтрокаПредшественник = Неопределено ИЛИ СтрокаПредшественник.Внешний Тогда
			Продолжить;
		КонецЕсли;
		СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаПредшественник);
		СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
		ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
		ОписаниеСобытия.Вставить("УИД", СтрокаПредшественник.УИД);
		ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЦикла;
	СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
	
	МассивСообщенийСерверу = СписокСообщенийСерверу.ВыгрузитьЗначения();
	Если МассивсообщенийСерверу.Количество() > 0 Тогда
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
	СписокСообщенийСерверу.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиТипСвязиПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПредшественники.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Для Каждого СтрокаПредшественник ИЗ ТаблицаПредшественники Цикл
		Если СтрокаПредшественник.УИД = ТекущиеДанныеДерева.УИД И СтрокаПредшественник.ПредшественникУИД = ТекущиеДанные.ПредшественникУИД Тогда
			СтрокаПредшественник.ТипСвязи = ТекущиеДанные.ТипСвязи;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("ИмяСобытия", "ИзменитьПараметрыПредшественника");
	ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи", ТекущиеДанныеДерева.УИД);
	ЗаполнитьЗначенияСвойств(ДанныеЗадачи, ТекущиеДанные);
	СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
	СписокСообщенийСерверу.Добавить(СообщениеСерверу);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиЗадержкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПредшественники.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Для Каждого СтрокаПредшественник ИЗ ТаблицаПредшественники Цикл
		Если СтрокаПредшественник.УИД = ТекущиеДанныеДерева.УИД И СтрокаПредшественник.ПредшественникУИД = ТекущиеДанные.ПредшественникУИД Тогда
			СтрокаПредшественник.Задержка = ТекущиеДанные.Задержка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТекущаяСтрокаПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Для Каждого СтрокаПредшественник ИЗ ТекущаяСтрокаПроекта.ТаблицаПредшественники Цикл
		Если СтрокаПредшественник.ПредшественникУИД = ТекущиеДанные.ПредшественникУИД Тогда
			СтрокаПредшественник.Задержка = ТекущиеДанные.Задержка;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("ИмяСобытия", "ИзменитьПараметрыПредшественника");
	ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи", ТекущиеДанныеДерева.УИД);
	ЗаполнитьЗначенияСвойств(ДанныеЗадачи, ТекущиеДанные);
	СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
	СписокСообщенийСерверу.Добавить(СообщениеСерверу);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиПриИзменении(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	//Если бФлагДобавление Тогда
	//	бФлагДобавление = Ложь;
	//Иначе
	//	НачатьДействие();
	//КонецЕсли;
	//
	//Для Каждого СтрокаПлан ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
	//	Если НЕ ПустаяСтрока(СтрокаПлан.ПредшественникУИД) И СписокУИДПредшественикиДляПересчетаПоследователи.НайтиПоЗначению(СтрокаПлан.ПредшественникУИД) = Неопределено Тогда
	//		СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СтрокаПлан.ПредшественникУИД);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//ОписаниеСобытия = Новый Структура;
	//ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	//ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
	//ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	//ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиЕдиницаВремениПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПредшественники.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Для Каждого СтрокаПредшественник ИЗ ТаблицаПредшественники Цикл
		Если СтрокаПредшественник.УИД = ТекущиеДанныеДерева.УИД И СтрокаПредшественник.ПредшественникУИД = ТекущиеДанные.ПредшественникУИД Тогда
			СтрокаПредшественник.ЕдиницаВремени = ТекущиеДанные.ЕдиницаВремени;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	НачатьДействие();
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("ИмяСобытия", "ИзменитьПараметрыПредшественника");
	ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи", ТекущиеДанныеДерева.УИД);
	ЗаполнитьЗначенияСвойств(ДанныеЗадачи, ТекущиеДанные);
	СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
	СписокСообщенийСерверу.Добавить(СообщениеСерверу);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредшественникиПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаПредшественники.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	
	Если НЕ бУдалениеПоКнопке И НеУдалятьПоДелит Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
	СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", ТекущиеДанныеДерева.УИД, ТекущиеДанные.ПредшественникУИД));
	СписокСообщенийСерверу.Добавить(СообщениеСерверу);
	
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ТаблицаПредшественники Цикл
		Если НЕ ПустаяСтрока(СтрокаПлан.ПредшественникУИД) И СписокУИДПредшественикиДляПересчетаПоследователи.НайтиПоЗначению(СтрокаПлан.ПредшественникУИД) = Неопределено Тогда
			СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СтрокаПлан.ПредшественникУИД);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
	ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
	СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланПредшественники));
	ЗаполнитьЗначенияСвойств(СтруктураПлана, ТекущиеДанные);
	ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	бФлагПередУдалением = Истина;
	
	Если ТекущиеДанные.Внешний Тогда
		НашлиЕщёОдного = Ложь;
		Для Каждого СтрокаТаблицыПроекта ИЗ ТаблицаПроектаКопия Цикл
			Если СтрокаТаблицыПроекта.УИД <> ТекущиеДанныеДерева.УИД Тогда
				Для Каждого СтрокаПредшественник ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
					Если СтрокаПредшественник.ПредшественникУИД = ТекущиеДанные.ПредшественникУИД Тогда
						НашлиЕщёОдного = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Если Не НашлиЕщёОдного Тогда
			Для Каждого СтрокаТаблицыПроекта ИЗ ТаблицаПроектаКопия Цикл
				Если СтрокаТаблицыПроекта.УИД = ТекущиеДанные.ПредшественникУИД Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "УдалениеЗадачи");
			СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД", СтрокаТаблицыПроекта.УИД));
			СписокСообщенийСерверу.Добавить(СообщениеСерверу);
				
			ТекущийИндекс = ТаблицаПроектаКопия.Индекс(СтрокаТаблицыПроекта);
			
			// ((( grznt.Solntsev 29.08.2016
			тСоответствиеТаблицыУИД.Удалить(СтрокаТаблицыПроекта.УИД);
			
			СтрокаДляСоответствияРодитель = ?(ПустаяСтрока(СтрокаТаблицыПроекта.Родитель), " ", СтрокаТаблицыПроекта.Родитель);
			МассивРодитель = тСоответствиеТаблицыРодитель.Получить(СтрокаДляСоответствияРодитель);
			Если МассивРодитель = Неопределено Тогда
				МассивРодитель = Новый Массив;
			КонецЕсли;
			Если МассивРодитель.Найти(СтрокаТаблицыПроекта) <> Неопределено Тогда
				МассивРодитель.Удалить(МассивРодитель.Найти(СтрокаТаблицыПроекта));
			КонецЕсли;
			тСоответствиеТаблицыРодитель.Вставить(СтрокаДляСоответствияРодитель, МассивРодитель);
			// ))) grznt.Solntsev 29.08.2016
			
			ТаблицаПроектаКопия.Удалить(СтрокаТаблицыПроекта); // здесь СДР не пострадает, т.к. в нём нет этих строк
			Для К = ТекущийИндекс ПО ТаблицаПроектаКопия.Количество() - 1 Цикл
				СтрокаТаблицы = ТаблицаПроектаКопия.Получить(К);
				Если СтрокаТаблицы.Идентификатор >= 0 Тогда
					ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
					ЭлементДерева.ИндексТаблицы = К;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	МассивсообщенийСерверу = СписокСообщенийСерверу.ВыгрузитьЗначения();
	
	Для Каждого СтрокаПредшественник ИЗ ТаблицаПредшественники Цикл
		Если СтрокаПредшественник.УИД = ТекущиеДанныеДерева.УИД И СтрокаПредшественник.ПредшественникУИД = ТекущиеДанные.ПредшественникУИД Тогда
			
			// ((( grznt.Solntsev 29.08.2016
			МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПредшественник.УИД);
			Если МассивПредшественники <> Неопределено Тогда
				Если МассивПредшественники.Найти(СтрокаПредшественник) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПредшественник));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиУИД.Вставить(СтрокаПредшественник.УИД, МассивПредшественники);
			
			МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПредшественник.ПредшественникУИД);
			Если МассивПредшественники <> Неопределено Тогда
				Если МассивПредшественники.Найти(СтрокаПредшественник) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПредшественник));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПредшественник.ПредшественникУИД, МассивПредшественники);
			// ))) grznt.Solntsev 29.08.2016
						
			ТаблицаПредшественники.Удалить(СтрокаПредшественник);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Для Каждого СтрокаПредшественник ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
		Если СтрокаПредшественник.ПредшественникУИД = ТекущиеДанные.ПредшественникУИД Тогда
			СтрокаТаблицыПроекта.ТаблицаПредшественники.Удалить(СтрокаПредшественник);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьВнешний = Ложь;
	Для Каждого СтрокаПланаПроверка ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
		Если СтрокаПланаПроверка.Внешний Тогда
			ЕстьВнешний = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьВнешний Тогда
		Если СтрокаТаблицыПроекта.КартинкаПредшественники <> 2 Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "КартинкаПредшественники", 1);
		КонецЕсли;
	Иначе
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "КартинкаПредшественники", 0);
	КонецЕсли;
	СтруктураНадписи = СформироватьНадписьПредшественники(СтрокаТаблицыПроекта);
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественники", СтруктураНадписи.Надпись);
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписи.НадписьПоНомеруСтроки);
	
	Для Каждого ЭлементСпискаПредшественник ИЗ СписокУИДПредшественикиДляПересчетаПоследователи Цикл
		СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(ЭлементСпискаПредшественник.Значение);
		Если СтрокаПредшественник = Неопределено ИЛИ СтрокаПредшественник.Внешний Тогда
			Продолжить;
		КонецЕсли;
		СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаПредшественник);
		СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
		ОписаниеСобытия.Вставить("УИД", СтрокаПредшественник.УИД);
		ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЦикла;
	СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
	
	МассивВозврата = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Ложь);
	
	ПолеПредшественники = ТекущиеДанныеДерева.НадписьПредшественникиПоНомеруСтроки;
	
	ЭтаФорма.Модифицированность = Истина;
	СписокСообщенийСерверу.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь
	Иначе
		НачатьДействие();
	КонецЕсли;
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", ТекущиеДанные);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	ТекущиеДанные.ПланДвиженияДенежныхСредств.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланДвиженияДенежныхСредств Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланДвиженияДенежныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаПоступление, СуммаВыплата, СуммаПоступлениеУпр, СуммаВыплатаУпр", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("ВалютаПоступлений, ВалютаВыплат", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствПриИзменении(Элемент)
	возврат;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь;
	Иначе
		НачатьДействие();
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	Если бФлагИзмениласьСумма Тогда
		ПосчитатьИтогиПоКолонкам("СуммаПоступление, СуммаВыплата, СуммаПоступлениеУпр, СуммаВыплатаУпр", ТекущиеДанныеДерева.УИД);
		бФлагИзмениласьСумма = Ложь;
	КонецЕсли;
	Если бФлагИзменилосьКоличество Тогда
		ПосчитатьИтогиВалютыПоКолонкам("ВалютаПоступлений, ВалютаВыплат", ТекущиеДанныеДерева.УИД);
		бФлагИзменилосьКоличество = Ложь;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Если НоваяСтрока Тогда
		НачатьДействие();
		бФлагДобавление = Истина;
		ТекущиеДанные.ГУИД = Новый УникальныйИдентификатор;
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
		ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		бФлагИзмениласьСумма = Истина;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Если ТекущиеДанныеДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "грзнтОрганизация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "грзнтПодразделение");
		ТекущиеДанные.Валюта = ВалютаУчета;
		ТекущиеДанные.Направление = ПредопределенноеЗначение("Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата");
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
		ТекущиеДанные.Картинка = 1;
		бФлагИзменилосьКоличество = Истина;
	КонецЕсли;
	Если Копирование Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если НЕ бУдалениеПоКнопке И НеУдалятьПоДелит Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
	ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
	СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланДДС));
	ЗаполнитьЗначенияСвойств(СтруктураПлана, ТекущиеДанные);
	ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	бФлагПередУдалением = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствПослеУдаления(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	ТекущиеДанные.ПланДвиженияДенежныхСредств.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланДвиженияДенежныхСредств Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланДвиженияДенежныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаПоступление, СуммаВыплата, СуммаПоступлениеУпр, СуммаВыплатаУпр", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("ВалютаПоступлений, ВалютаВыплат", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствНаправлениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Картинка = ?(ТекущиеДанные.Направление = ПредопределенноеЗначение("Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"), 0, 1);
	
	бФлагИзмениласьСумма = Истина;
	бФлагИзменилосьКоличество = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствСуммаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СтрокаДерева.УИД);
	ПересчитатьСуммуСтрокиПланаПоВалюте(СтрокаДерева, ТекущиеДанные);
	бФлагИзмениласьСумма = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствВалютаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СтрокаДерева.УИД);
	ПересчитатьСуммуСтрокиПланаПоВалюте(СтрокаТаблицыПроекта, ТекущиеДанные);
	бФлагИзмениласьСумма = Истина;
	бФлагИзменилосьКоличество = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДвиженияДенежныхСредствДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДвиженияДенежныхСредств.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если ТекущиеДанные.Контрагент <> КонтрагентДоговора Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовПриИзменении(Элемент)
	возврат;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь;
	Иначе
		НачатьДействие();
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДоходов");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	Если бФлагИзмениласьСумма Тогда
		ПосчитатьИтогиПоКолонкам("СуммаДоход, СуммаДоходУпр", ТекущиеДанныеДерева.УИД);
		бФлагИзмениласьСумма = Ложь;
	КонецЕсли;
	Если бФлагИзменилосьКоличество Тогда
		ПосчитатьИтогиВалютыПоКолонкам("ВалютаДоходов", ТекущиеДанныеДерева.УИД);
		//бФлагИзменилосьКоличество = Ложь;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаПланДоходов.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Если НоваяСтрока Тогда
		НачатьДействие();
		бФлагДобавление = Истина;
		ТекущиеДанные.ГУИД = Новый УникальныйИдентификатор;
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДоходов");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
		ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		бФлагИзмениласьСумма = Истина;
	КонецЕсли;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "грзнтОрганизация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "грзнтПодразделение");
		ТекущиеДанные.Валюта = ВалютаУчета;
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
		бФлагИзменилосьКоличество = Истина;
	КонецЕсли;
	Если Копирование Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	ТекущиеДанные.ПланДоходов.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланДоходов Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланДоходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаДоход, СуммаДоходУпр", ТекущиеДанныеДерева.УИД);
	//Если бФлагИзменилосьКоличество Тогда
		ПосчитатьИтогиВалютыПоКолонкам("ВалютаДоходов", ТекущиеДанныеДерева.УИД);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаПланДоходов.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если НЕ бУдалениеПоКнопке И НеУдалятьПоДелит Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДоходов");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
	ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
	СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланДоходы));
	ЗаполнитьЗначенияСвойств(СтруктураПлана, ТекущиеДанные);
	ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	бФлагПередУдалением = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовПослеУдаления(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	ТекущиеДанные.ПланДоходов.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланДоходов Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланДоходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаДоход, СуммаДоходУпр", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("ВалютаДоходов", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовВалютаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СтрокаДерева.УИД);
	ПересчитатьСуммуСтрокиПланаПоВалюте(СтрокаТаблицыПроекта, ТекущиеДанные);
	бФлагИзмениласьСумма = Истина;
	бФлагИзменилосьКоличество = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовСуммаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДоходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СтрокаДерева.УИД);
	ПересчитатьСуммуСтрокиПланаПоВалюте(СтрокаТаблицыПроекта, ТекущиеДанные);
	бФлагИзмениласьСумма = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланДоходовДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланДоходов.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если ТекущиеДанные.Контрагент <> КонтрагентДоговора Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовПриИзменении(Элемент)
	возврат;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь;
	Иначе
		НачатьДействие();
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	Если бФлагИзмениласьСумма Тогда
		ПосчитатьИтогиПоКолонкам("СуммаРасход, СуммаРасходУпр", ТекущиеДанныеДерева.УИД);
		бФлагИзмениласьСумма = Ложь;
	КонецЕсли;
	Если бФлагИзменилосьКоличество Тогда
		ПосчитатьИтогиВалютыПоКолонкам("ВалютаРасходов", ТекущиеДанныеДерева.УИД);
		бФлагИзменилосьКоличество = Ложь;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаПланРасходов.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Если НоваяСтрока Тогда
		НачатьДействие();
		бФлагДобавление = Истина;
		ТекущиеДанные.ГУИД = Новый УникальныйИдентификатор;
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
		ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		бФлагИзмениласьСумма = Истина;
	КонецЕсли;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "грзнтОрганизация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "грзнтПодразделение");
		ТекущиеДанные.Валюта = ВалютаУчета;
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
		бФлагИзменилосьКоличество = Истина;
	КонецЕсли;
	Если Копирование Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаПланРасходов.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если НЕ бУдалениеПоКнопке И НеУдалятьПоДелит Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
	ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
	СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРасходы));
	ЗаполнитьЗначенияСвойств(СтруктураПлана, ТекущиеДанные);
	ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	бФлагПередУдалением = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь
	Иначе
		НачатьДействие();
	КонецЕсли;
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", ТекущиеДанные);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	ТекущиеДанные.ПланРасходов.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланРасходов Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаРасход, СуммаРасходУпр", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("ВалютаРасходов", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовПослеУдаления(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	ТекущиеДанные.ПланРасходов.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланРасходов Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаРасход, СуммаРасходУпр", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("ВалютаРасходов", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовСуммаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СтрокаДерева.УИД);
	ПересчитатьСуммуСтрокиПланаПоВалюте(СтрокаТаблицыПроекта, ТекущиеДанные);
	бФлагИзмениласьСумма = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовВалютаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРасходов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СтрокаДерева.УИД);
	ПересчитатьСуммуСтрокиПланаПоВалюте(СтрокаТаблицыПроекта, ТекущиеДанные);
	бФлагИзмениласьСумма = Истина;
	бФлагИзменилосьКоличество = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРасходовДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРасходов.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если ТекущиеДанные.Контрагент <> КонтрагентДоговора Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяПриИзменении(Элемент)
	возврат;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь;
	Иначе
		НачатьДействие();
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРолейОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	Если бФлагИзменилосьКоличество Тогда
		ПосчитатьИтогиПоКолонкам("КоличествоРоли", ТекущиеДанныеДерева.УИД);
		//ПосчитатьИтогиПроцентовПоКолонкам("ПроцентПлановыхТрудозатрат", ТекущиеДанныеДерева.УИД);
		ПосчитатьИтогиПроцентовПоКолонкам("ПроцентПлановыхТрудозатрат", );
		бФлагИзменилосьКоличество = Ложь;
	КонецЕсли;
	Если бФлагИзмениласьСумма Тогда
		ПосчитатьИтогиПоКолонкам("СуммаРоли", ТекущиеДанныеДерева.УИД);
		бФлагИзмениласьСумма = Ложь;
	КонецЕсли;
	Если бФлагИзмениласьРоль Тогда
		ПосчитатьИтогиВалютыПоКолонкам("НадписьРоли", ТекущиеДанныеДерева.УИД);
		бФлагИзмениласьРоль = Ложь;
	КонецЕсли;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Если НоваяСтрока Тогда
		НачатьДействие();
		бФлагДобавление = Истина;
		ТекущиеДанные.ГУИД = Новый УникальныйИдентификатор;
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРолейОбщая");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
		ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		бФлагИзмениласьСумма = Истина;
		бФлагИзменилосьКоличество = Истина;
	КонецЕсли;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "грзнтОрганизация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "грзнтПодразделение");
		ТекущиеДанные.Валюта = ВалютаУчета;
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ВидСтавки = ПредопределенноеЗначение("Справочник.грзнтВидыСтавок.ПустаяСсылка");
		ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Час");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
	КонецЕсли;
	Если Копирование Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если НЕ бУдалениеПоКнопке И НеУдалятьПоДелит Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРолейОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
	ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
	СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРоли));
	ЗаполнитьЗначенияСвойств(СтруктураПлана, ТекущиеДанные);
	ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	бФлагПередУдалением = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь
	Иначе
		НачатьДействие();
	КонецЕсли;
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", ТекущиеДанные);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	ТекущиеДанные.ПланРолейОбщая.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланРолейОбщая Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланРолейОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаРоли, КоличествоРоли", ТекущиеДанныеДерева.УИД);
	//ПосчитатьИтогиПроцентовПоКолонкам("ПроцентПлановыхТрудозатрат", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиПроцентовПоКолонкам("ПроцентПлановыхТрудозатрат", );
	ПосчитатьИтогиВалютыПоКолонкам("НадписьРоли", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяПослеУдаления(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	ТекущиеДанные.ПланРолейОбщая.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланРолейОбщая Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланРолейОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаРоли, КоличествоРоли", ТекущиеДанныеДерева.УИД);
	//ПосчитатьИтогиПроцентовПоКолонкам("ПроцентПлановыхТрудозатрат", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиПроцентовПоКолонкам("ПроцентПлановыхТрудозатрат", );
	ПосчитатьИтогиВалютыПоКолонкам("НадписьРоли", ТекущиеДанныеДерева.УИД);
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяРольПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, Неопределено, ТекущиеДанные.ЕдиницаВремени);
	
	бФлагИзмениласьРоль = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, Неопределено, ТекущиеДанные.ЕдиницаВремени);
	
	бФлагИзменилосьКоличество = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяВидСтавкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийВидСтавки = ТекущиеДанные.ВидСтавки;
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(грзнтНормыСтоимостиРесурсов.ПолучитьВидыНормСтоимости(Проект));
	Описание = Новый ОписаниеОповещения("ТаблицаПланРолейОбщаяВидСтавкиНачалоВыбораПродолжение", ЭтаФорма);
	ПоказатьВыборИзСписка(Описание, СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(ТекущийВидСтавки));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяВидСтавкиНачалоВыбораПродолжение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ВидСтавки = ЗначениеВыбора.Значение;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, Неопределено, ТекущиеДанные.ЕдиницаВремени);
	
	ТаблицаПланРолейОбщаяПриИзменении(Элементы.ТаблицаПланРолейОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяЕдиницаВремениПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, Неопределено, ТекущиеДанные.ЕдиницаВремени);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяСуммаПриИзменении(Элемент)
	бФлагИзмениласьСумма = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРолейОбщаяДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРолейОбщая.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если ТекущиеДанные.Контрагент <> КонтрагентДоговора Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяПриИзменении(Элемент)
	возврат;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь;
	Иначе
		НачатьДействие();
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРесурсовОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	Если бФлагИзмениласьСумма Тогда
		ПосчитатьИтогиПоКолонкам("СуммаРесурсы", ТекущиеДанныеДерева.УИД);
		бФлагИзмениласьСумма = Ложь;
	КонецЕсли;
	Если бФлагИзменилосьКоличество Тогда
		ПосчитатьИтогиПоКолонкам("КоличествоРесурсы", ТекущиеДанныеДерева.УИД);
		бФлагИзменилосьКоличество = Ложь;
	КонецЕсли;
	Если бФлагИзмениласьРоль Тогда
		ПосчитатьИтогиВалютыПоКолонкам("НадписьРесурсы", ТекущиеДанныеДерева.УИД);
		бФлагИзмениласьРоль = Ложь;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Если НоваяСтрока Тогда
		НачатьДействие();
		бФлагДобавление = Истина;
		ТекущиеДанные.ГУИД = Новый УникальныйИдентификатор;
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРесурсовОбщая");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
		ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		бФлагИзмениласьСумма = Истина;
		бФлагИзменилосьКоличество = Истина;
	КонецЕсли;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "грзнтОрганизация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "грзнтПодразделение");
		ТекущиеДанные.Валюта = ВалютаУчета;
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ВидСтавки = ПредопределенноеЗначение("Справочник.грзнтВидыСтавок.ПустаяСсылка");
		ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Час");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
	КонецЕсли;
	Если Копирование Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если НЕ бУдалениеПоКнопке И НеУдалятьПоДелит Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРесурсовОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
	ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
	СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРесурсы));
	ЗаполнитьЗначенияСвойств(СтруктураПлана, ТекущиеДанные);
	ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	бФлагПередУдалением = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь
	Иначе
		НачатьДействие();
	КонецЕсли;
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРесурсовОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", ТекущиеДанные);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	ТекущиеДанные.ПланРесурсовОбщая.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланРесурсовОбщая Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланРесурсовОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаРесурсы, КоличествоРесурсы", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("НадписьРесурсы", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяПослеУдаления(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	ТекущиеДанные.ПланРесурсовОбщая.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланРесурсовОбщая Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланРесурсовОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаРесурсы, КоличествоРесурсы", ТекущиеДанныеДерева.УИД);
	ПосчитатьИтогиВалютыПоКолонкам("НадписьРесурсы", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяВидСтавкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийВидСтавки = ТекущиеДанные.ВидСтавки;
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(грзнтНормыСтоимостиРесурсов.ПолучитьВидыНормСтоимости(Проект));
	Описание = Новый ОписаниеОповещения("ТаблицаПланРесурсовОбщаяВидСтавкиНачалоВыбораПродолжение", ЭтаФорма);
	ПоказатьВыборИзСписка(Описание, СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(ТекущийВидСтавки));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяВидСтавкиНачалоВыбораПродолжение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ВидСтавки = ЗначениеВыбора.Значение;
	ТаблицаПланРесурсовОбщаяВидСтавкиПриИзменении(Элементы.ТаблицаПланРесурсовОбщаяВидСтавки);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяВидСтавкиПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, ТекущиеДанные.ТрудовойРесурс, ТекущиеДанные.ЕдиницаВремени);
	ТаблицаПланРесурсовОбщаяПриИзменении(Элементы.ТаблицаПланРесурсовОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяСуммаПриИзменении(Элемент)
	бФлагИзмениласьСумма = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, ТекущиеДанные.ТрудовойРесурс, ТекущиеДанные.ЕдиницаВремени);
	
	бФлагИзменилосьКоличество = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяВалютаПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяЕдиницаВремениПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, ТекущиеДанные.ТрудовойРесурс, ТекущиеДанные.ЕдиницаВремени);
	ТаблицаПланРесурсовОбщаяПриИзменении(Элементы.ТаблицаПланРесурсовОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяТрудовойРесурсПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	бФлагИзмениласьРоль = Истина;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, ТекущиеДанные.ТрудовойРесурс, ТекущиеДанные.ЕдиницаВремени);
	ТаблицаПланРесурсовОбщаяПриИзменении(Элементы.ТаблицаПланРесурсовОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяРольПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, ТекущиеДанные.Роль, ТекущиеДанные.ТрудовойРесурс, ТекущиеДанные.ЕдиницаВремени);
	ТаблицаПланРесурсовОбщаяПриИзменении(Элементы.ТаблицаПланРесурсовОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяРольНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Описание = Новый ОписаниеОповещения("ТаблицаПланРесурсовОбщаяРольНачалоВыбораПродолжение", ЭтаФорма, Новый Структура("Элемент", Элемент));
	СписокВыбора = Новый СписокЗначений;
	Для Каждого СтрокаРоль ИЗ ТекущиеДанные.ПланРолейОбщая Цикл
		Если НЕ СтрокаРоль.Роль.Пустая() и СписокВыбора.НайтиПоЗначению(СтрокаРоль.Роль) = Неопределено Тогда
			СписокВыбора.Добавить(СтрокаРоль.Роль);
		КонецЕсли;
	КонецЦикла;
	ПоказатьВыборИзСписка(Описание, СписокВыбора, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяРольНачалоВыбораПродолжение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Роль = РезультатВыбора.Значение;
	ТаблицаПланРесурсовОбщаяРольПриИзменении(ДополнительныеПараметры.Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяТрудовойРесурсНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.грзнтТрудовыеРесурсы.Форма.грзнтФормаВыбораСОтборомПоРоли", Новый Структура("Отбор", Новый Структура("Роль", ТекущиеДанные.Роль)), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланРесурсовОбщаяДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланРесурсовОбщая.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если ТекущиеДанные.Контрагент <> КонтрагентДоговора Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяПриИзменении(Элемент)
	возврат;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь;
	Иначе
		НачатьДействие();
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланМатериаловОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	Если бФлагИзмениласьСумма Тогда
		ПосчитатьИтогиПоКолонкам("СуммаМатериалы", ТекущиеДанныеДерева.УИД);
		бФлагИзмениласьСумма = Ложь;
	КонецЕсли;
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	Если НоваяСтрока Тогда
		НачатьДействие();
		бФлагДобавление = Истина;
		ТекущиеДанные.ГУИД = Новый УникальныйИдентификатор;
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланМатериаловОбщая");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
		ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		бФлагИзмениласьСумма = Истина;
	КонецЕсли;
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные.Организация = ПолучитьРеквизитОбъекта(Проект, "грзнтОрганизация");
		ТекущиеДанные.Подразделение = ПолучитьРеквизитОбъекта(Проект, "грзнтПодразделение");
		ТекущиеДанные.Валюта = ВалютаУчета;
		
		ТекущиеДанные.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		ТекущиеДанные.ПрофильРаспределения = ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.НаКонецПериода");
	КонецЕсли;
	Если Копирование Тогда
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если НЕ бУдалениеПоКнопке И НеУдалятьПоДелит Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НачатьДействие();
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланМатериаловОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
	ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
	СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланМатериалы));
	ЗаполнитьЗначенияСвойств(СтруктураПлана, ТекущиеДанные);
	ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	бФлагПередУдалением = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь
	Иначе
		НачатьДействие();
	КонецЕсли;
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланМатериаловОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", ТекущиеДанные);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	ТекущиеДанные.ПланМатериаловОбщая.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланМатериаловОбщая Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланМатериаловОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаМатериалы", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяПослеУдаления(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	ТекущиеДанные.ПланМатериаловОбщая.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.ПланМатериаловОбщая Цикл
		НоваяСтрокаПлан = ТекущиеДанные.ПланМатериаловОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ПосчитатьИтогиПоКолонкам("СуммаМатериалы", ТекущиеДанныеДерева.УИД);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяВидСтавкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущийВидСтавки = ТекущиеДанные.ВидСтавки;
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(грзнтНормыСтоимостиРесурсов.ПолучитьВидыНормСтоимости(Проект));
	Описание = Новый ОписаниеОповещения("ТаблицаПланМатериаловОбщаяВидСтавкиНачалоВыбораПродолжение", ЭтаФорма);
	ПоказатьВыборИзСписка(Описание, СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(ТекущийВидСтавки));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяВидСтавкиНачалоВыбораПродолжение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ВидСтавки = ЗначениеВыбора.Значение;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, , ТекущиеДанные.Номенклатура, ТекущиеДанные.ЕдиницаИзмерения);
	ТаблицаПланМатериаловОбщаяПриИзменении(Элементы.ТаблицаПланМатериаловОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	СписокВыбора = ПолучитьСписокВыбораЕдиницыИзмерения(ТекущиеДанные.Номенклатура);
	Описание = Новый ОписаниеОповещения("ТаблицаПланМатериаловОбщаяЕдиницаИзмеренияНачалоВыбораПродолжение", ЭтаФорма);
	ПоказатьВыборИзСписка(Описание, СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(ТекущиеДанные.ЕдиницаИзмерения));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяЕдиницаИзмеренияНачалоВыбораПродолжение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	Если ЗначениеВыбора = Неопределено ИЛИ ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ЕдиницаИзмерения = ЗначениеВыбора.Значение;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, , ТекущиеДанные.Номенклатура, ТекущиеДанные.ЕдиницаИзмерения);
	ТаблицаПланМатериаловОбщаяПриИзменении(Элементы.ТаблицаПланМатериаловОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяНоменклатураПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ЕдиницаИзмерения = ПолучитьРеквизитОбъекта(ТекущиеДанные.Номенклатура, "ЕдиницаХраненияОстатков");
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, , ТекущиеДанные.Номенклатура, ТекущиеДанные.ЕдиницаИзмерения);
	ТаблицаПланМатериаловОбщаяПриИзменении(Элементы.ТаблицаПланМатериаловОбщая);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, , ТекущиеДанные.Номенклатура, ТекущиеДанные.ЕдиницаИзмерения);
	бФлагИзменилосьКоличество = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяСуммаПриИзменении(Элемент)
	бФлагИзмениласьСумма = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПланМатериаловОбщаяДоговорКонтрагентаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПланМатериаловОбщая.ТекущиеДанные;
	Если НЕ ТекущиеДанные.ДоговорКонтрагента.Пустая() Тогда
		КонтрагентДоговора = ПолучитьРеквизитОбъекта(ТекущиеДанные.ДоговорКонтрагента, "Владелец");
		Если ТекущиеДанные.Контрагент <> КонтрагентДоговора Тогда
			ТекущиеДанные.Контрагент = КонтрагентДоговора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаКомментарииКЗадачеПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ДеревоПроектаКомментарииКЗадаче.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если НЕ ТекущиеДанные.Собственный Тогда
		Если ТекущиеДанные.Пользователь = ТекущийПользователь И ТекущиеДанные.ДатаВремя < ДатаДопустимогоРедактированияКомментария Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Запрещено удалять комментарии раньще " + Формат(ДатаДопустимогоРедактированияКомментария, "ДФ=дд.ММ.гггг") + ", обратитесь к руководителю.";
			Сообщение.Сообщить();
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ бУдалениеПоКнопке И НеУдалятьПоДелит Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	НачатьДействие();
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "КомментарииКЗадаче");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ОписаниеСобытия.Вставить("СобытиеПлана", "УдалениеСтроки");
	ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
	
	СтруктураПлана = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураКомментарииКЗадаче));
	ЗаполнитьЗначенияСвойств(СтруктураПлана, ТекущиеДанные);
	ОписаниеСобытия.Вставить("СтрокаПлана", СтруктураПлана);
	ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	бФлагПередУдалением = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаКомментарииКЗадачеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ДеревоПроектаКомментарииКЗадаче.ТекущиеДанные;
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если НоваяСтрока Тогда
		НачатьДействие();
		бФлагДобавление = Истина;
		ТекущиеДанные.ГУИД = Новый УникальныйИдентификатор;
		ТекущиеДанные.ДатаВремя = ТекущаяДата();
		ТекущиеДанные.Собственный = Истина;
		ТекущиеДанные.Пользователь = ТекущийПользователь;
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "КомментарииКЗадаче");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
		ОписаниеСобытия.Вставить("ГУИД", ТекущиеДанные.ГУИД);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаКомментарииКЗадачеПриИзменении(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	СтрокаТаблицыПроекта = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь;
	Иначе
		НачатьДействие();
	КонецЕсли;
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "КомментарииКЗадаче");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	//ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(ТекущиеДанныеДерева, "ЕстьКомментарий", ?(ТекущиеДанныеДерева.КомментарииКЗадаче.Количество() = 0, 0, 1));
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаКомментарииКЗадачеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	
	Если бФлагДобавление Тогда
		бФлагДобавление = Ложь
	Иначе
		НачатьДействие();
	КонецЕсли;
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "КомментарииКЗадаче");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", ТекущиеДанные);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	
	ТекущиеДанные.КомментарииКЗадаче.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.КомментарииКЗадаче Цикл
		НоваяСтрокаПлан = ТекущиеДанные.КомментарииКЗадаче.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ТекущиеДанные.ЕстьКомментарий = ?(ТекущиеДанные.КомментарииКЗадаче.Количество() = 0, 0, 1);
	ТекущиеДанныеДерева.ЕстьКомментарий = ТекущиеДанные.ЕстьКомментарий;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаКомментарииКЗадачеПослеУдаления(Элемент)
	ТекущиеДанныеДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	Если ТекущиеДанныеДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = ТаблицаПроектаКопия.Получить(ТекущиеДанныеДерева.ИндексТаблицы);
	ТекущиеДанные.КомментарииКЗадаче.Очистить();
	Для Каждого СтрокаПлан ИЗ ТекущиеДанныеДерева.КомментарииКЗадаче Цикл
		НоваяСтрокаПлан = ТекущиеДанные.КомментарииКЗадаче.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПлан, СтрокаПлан);
	КонецЦикла;
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(ТекущиеДанные, "ЕстьКомментарий", ?(ТекущиеДанные.КомментарииКЗадаче.Количество() = 0, 0, 1));
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроектаКомментарииКЗадачеПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.ДеревоПроектаКомментарииКЗадаче.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	Если НЕ ТекущиеДанные.Собственный Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ФильтрРедактора

&НаКлиентеНаСервереБезКонтекста
Функция ЗаполнитьСписокВыбораФильтра()
	СписокВыбора = Новый СписокЗначений;
	//СписокВыбора = Элементы.ТаблицаФильтрРедактораРеквизит.СписокВыбора;
	СписокВыбора.Добавить("НаименованиеЗадачи", "Наименование задачи");
	СписокВыбора.Добавить("ВидЭлемента", "Вид элемента");
	СписокВыбора.Добавить("ВидОперации", "Вид операции");
	СписокВыбора.Добавить("РучнойВвод", "Ручной ввод");
	СписокВыбора.Добавить("ДатаНачала", "Дата начала");
	СписокВыбора.Добавить("ДатаОкончания", "Дата окончания");
	СписокВыбора.Добавить("Длительность", "Длительность");
	СписокВыбора.Добавить("ЕдиницаВремени", "Единица времени");
	СписокВыбора.Добавить("Календарь", "Календарь");
	СписокВыбора.Добавить("ТипОграничения", "ТипОграничения");
	СписокВыбора.Добавить("ДатаОграничения", "Дата ограничения");
	СписокВыбора.Добавить("ФактическаяДатаНачала", "Фактическая дата начала");
	СписокВыбора.Добавить("ФактическаяДатаОкончания", "Фактическая дата окончания");
	СписокВыбора.Добавить("ФактическаяДлительность", "Фактическая длительность");
	СписокВыбора.Добавить("ПроцентГотовности", "Процент готовности");
	
	СписокВыбора.Добавить("КонтрактныйДатаНачала", "КН");
	СписокВыбора.Добавить("КонтрактныйДатаНачалаОтклонение", "КН - ТН");
	СписокВыбора.Добавить("КонтрактныйДатаОкончанияОтклонение", "КО - ТО");
	СписокВыбора.Добавить("КонтрактныйДатаОкончания", "КО");
	СписокВыбора.Добавить("АктуализацияДатаНачалаОтклонение", "ТН - ТД");
	СписокВыбора.Добавить("АктуализацияДатаОкончанияОтклонение", "ТО - ТД");
	
	СписокВыбора.Добавить("КритическийПуть", "Критический путь");
	
	СписокВыбора.Добавить("НадписьПредшественники", "Предшественники СДР");
	СписокВыбора.Добавить("НадписьПредшественникиПоНомеруСтроки", "Предшественники №");
	СписокВыбора.Добавить("НадписьПоследователи", "Последователи СДР");
	СписокВыбора.Добавить("НадписьПоследователиПоНомеруСтроки", "Последователи №");
	
	СписокВыбора.Добавить("ПроцентПлановойДлительности", "Процент плановой длительности");
	СписокВыбора.Добавить("ПроцентПлановыхТрудозатрат", "Процент плановых трудозатрат");
	СписокВыбора.Добавить("ФактическаяДлительность", "Фактическая длительность");
	СписокВыбора.Добавить("СуммаПоступление", "Сумма поступлений");
	СписокВыбора.Добавить("СуммаПоступлениеУпр", "Сумма поступлений (упр)");
	СписокВыбора.Добавить("ВалютаПоступлений", "Валюта поступлений");
	СписокВыбора.Добавить("СуммаВыплата", "Сумма выплат");
	СписокВыбора.Добавить("СуммаВыплатаУпр", "Сумма выплат (упр)");
	СписокВыбора.Добавить("ВалютаВыплат", "Валюта выплат");
	СписокВыбора.Добавить("СуммаДоход", "Сумма доходов");
	СписокВыбора.Добавить("СуммаДоходУпр", "Сумма доходов (упр)");
	СписокВыбора.Добавить("ВалютаДоходов", "Валюта доходов");
	СписокВыбора.Добавить("СуммаРасход", "Сумма расходов");
	СписокВыбора.Добавить("СуммаРасходУпр", "Сумма расходов (упр)");
	СписокВыбора.Добавить("ВалютаРасходов", "Валюта расходов");
	СписокВыбора.Добавить("СуммаРоли", "Роли (финансы)");
	СписокВыбора.Добавить("КоличествоРоли", "Роли (количество)");
	СписокВыбора.Добавить("НадписьРоли", "Роли (список)");
	СписокВыбора.Добавить("СуммаРесурсы", "Ресурсы (финансы)");
	СписокВыбора.Добавить("КоличествоРесурсы", "Ресурсы (количество)");
	СписокВыбора.Добавить("НадписьРесурсы", "Ресурсы (список)");
	СписокВыбора.Добавить("СуммаРесурсыОперативный", "Ресурсы оперативные (финансы)");
	СписокВыбора.Добавить("КоличествоРесурсыОперативный", "Ресурсы оперативные (количество)");
	СписокВыбора.Добавить("НадписьРесурсыОперативный", "Ресурсы оперативные (список)");
	СписокВыбора.Добавить("СуммаМатериалы", "Материалы (сумма)");
	
	Возврат СписокВыбора;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДоступныйТип(ИмяРеквизита)
	Если ИмяРеквизита = "ВидЭлемента" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.грзнтВидыЭлементовПроекта");
	ИначеЕсли  ИмяРеквизита = "ВидОперации" Тогда 
		Возврат Новый ОписаниеТипов("СправочникСсылка.грзнтВидыОпераций");
	ИначеЕсли  ИмяРеквизита = "ДатаНачала" Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли  ИмяРеквизита = "ДатаОкончания" Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли  ИмяРеквизита = "Длительность" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "РучнойВвод" Тогда
		Возврат Новый ОписаниеТипов("Булево");
	ИначеЕсли  ИмяРеквизита = "ЕдиницаВремени" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.грзнтЕдиницыВремени");
	ИначеЕсли  ИмяРеквизита = "Календарь" Тогда
		Возврат Новый ОписаниеТипов("СправочникСсылка.грзнтРабочиеКалендари");
	ИначеЕсли  ИмяРеквизита = "ТипОграничения" Тогда
		Возврат Новый ОписаниеТипов("ПеречислениеСсылка.грзнтОграничениеСроковЗадачи");
	ИначеЕсли  ИмяРеквизита = "ДатаОграничения" Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли  ИмяРеквизита = "ФактическаяДатаНачала" Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли  ИмяРеквизита = "ФактическаяДатаОкончания" Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли  ИмяРеквизита = "ФактическаяДлительность" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "ПроцентГотовности" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "ПроцентПлановойДлительности" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "ПроцентПлановыхТрудозатрат" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "ФактическаяДлительность" Тогда
		Возврат Новый ОписаниеТипов("Число");
		
	ИначеЕсли  ИмяРеквизита = "КонтрактныйДатаНачала" Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли  ИмяРеквизита = "КонтрактныйДатаНачалаОтклонение" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "КонтрактныйДатаОкончанияОтклонение" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "КонтрактныйДатаОкончания" Тогда
		Возврат Новый ОписаниеТипов("Дата");
	ИначеЕсли  ИмяРеквизита = "АктуализацияДатаНачалаОтклонение" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "АктуализацияДатаОкончанияОтклонение" Тогда
		Возврат Новый ОписаниеТипов("Число");
		
	ИначеЕсли  ИмяРеквизита = "СуммаПоступление" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "СуммаПоступлениеУпр" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "ВалютаПоступлений" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "СуммаВыплата" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "СуммаВыплатаУпр" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "ВалютаВыплат" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "СуммаДоход" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "СуммаДоходУпр" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "ВалютаДоходов" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "СуммаРасход" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "СуммаРасходУпр" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "ВалютаРасходов" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "СуммаРоли" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "КоличествоРоли" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "НадписьРоли" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "СуммаРесурсы" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "КоличествоРесурсы" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "НадписьРесурсы" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "СуммаРесурсыОперативный" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "КоличествоРесурсыОперативный" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "НадписьРесурсыОперативный" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "СуммаМатериалы" Тогда
		Возврат Новый ОписаниеТипов("Число");
	ИначеЕсли  ИмяРеквизита = "НадписьПредшественники" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "НадписьПредшественникиПоНомеруСтроки" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "НадписьПоследователи" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "НадписьПоследователиПоНомеруСтроки" Тогда
		Возврат Новый ОписаниеТипов("Строка");
	ИначеЕсли  ИмяРеквизита = "КритическийПуть" Тогда
		Возврат Новый ОписаниеТипов("Булево");
	КонецЕсли;
	Возврат Новый ОписаниеТипов("Строка");
КонецФункции

&НаКлиенте
Процедура ТаблицаФильтрРедактораРеквизитПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	Если НЕ ПустаяСтрока(ТекущиеДанные.Реквизит) Тогда
		ТекущееЗначение = ТекущиеДанные.Значение;
		Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
		Элементы.ТаблицаФильтрРедактораЗначение.ВыбиратьТип = Ложь;
		ТекущиеДанные.Значение = Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа.ПривестиЗначение(ТекущееЗначение);
	КонецЕсли;
	Если ТекущиеДанные.Использование Тогда
		СформироватьДеревоПроектаПоТаблицеПроектаСФильтромНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	Если НЕ ПустаяСтрока(ТекущиеДанные.Реквизит) Тогда
		ТекущееЗначение = ТекущиеДанные.Значение;
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке Тогда
			Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");//ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
			Элементы.ТаблицаФильтрРедактораЗначение.ВыбиратьТип = Ложь;
			Если ТипЗнч(ТекущиеДанные.Значение) <> Тип("СписокЗначений") ИЛИ ТекущиеДанные.Значение.Количество() = 0 Тогда
				ТекущиеДанные.Значение = Новый СписокЗначений;
				ТекущиеДанные.Значение.ТипЗначения = ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
			КонецЕсли;
		Иначе
			СтароеОграничение = Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа;
			Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
			Элементы.ТаблицаФильтрРедактораЗначение.ВыбиратьТип = Ложь;
			ТекущиеДанные.Значение = Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа.ПривестиЗначение(ТекущееЗначение);
			Если СтароеОграничение <> Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа Тогда
				ТекущиеДанные.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	СписокВыбора = ЗаполнитьСписокВыбораФильтра();
	Описание = Новый ОписаниеОповещения("ТаблицаФильтрРедактораПоказатьВыборИзСпискаРеквизитПродолжение", ЭтаФорма);
	ПоказатьВыборИзСписка(Описание, СписокВыбора, Элементы.ТаблицаФильтрРедактораРеквизит, СписокВыбора.НайтиПоЗначению(ТекущиеДанные.Реквизит));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораПоказатьВыборИзСпискаРеквизитПродолжение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	Если ТекущиеДанные.Реквизит = ЗначениеВыбора.Значение Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Реквизит = ЗначениеВыбора.Значение;
	ТекущиеДанные.РеквизитПредставление = ЗначениеВыбора.Представление;
	Если НЕ ПустаяСтрока(ТекущиеДанные.Реквизит) Тогда
		ТекущееЗначение = ТекущиеДанные.Значение;
		СтароеОграничение = Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа;
		Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
		Элементы.ТаблицаФильтрРедактораЗначение.ВыбиратьТип = Ложь;
		ТекущиеДанные.Значение = Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа.ПривестиЗначение(ТекущееЗначение);
		Если СтароеОграничение <> Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа Тогда
			ТекущиеДанные.ВидСравнения = ВидСравнения.Равно;
		КонецЕсли;
	КонецЕсли;
	Если ТекущиеДанные.Использование Тогда
		СформироватьДеревоПроектаПоТаблицеПроектаСФильтромНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораВидСравненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	СписокВыбора = Новый СписокЗначений;
	Если Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = Новый ОписаниеТипов("Строка") Тогда
		СписокВыбора.Добавить(ВидСравнения.Равно);
		СписокВыбора.Добавить(ВидСравнения.НеРавно);
		СписокВыбора.Добавить(ВидСравнения.Содержит);
		СписокВыбора.Добавить(ВидСравнения.НеСодержит);
	ИначеЕсли Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = Новый ОписаниеТипов("Булево") Тогда
		СписокВыбора.Добавить(ВидСравнения.Равно);
		СписокВыбора.Добавить(ВидСравнения.НеРавно);
	ИначеЕсли Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = Новый ОписаниеТипов("Дата") Тогда
		СписокВыбора.Добавить(ВидСравнения.Равно);
		СписокВыбора.Добавить(ВидСравнения.НеРавно);
		СписокВыбора.Добавить(ВидСравнения.Больше);
		СписокВыбора.Добавить(ВидСравнения.БольшеИлиРавно);
		СписокВыбора.Добавить(ВидСравнения.Меньше);
		СписокВыбора.Добавить(ВидСравнения.МеньшеИлиРавно);
	ИначеЕсли Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = Новый ОписаниеТипов("Число") Тогда
		СписокВыбора.Добавить(ВидСравнения.Равно);
		СписокВыбора.Добавить(ВидСравнения.НеРавно);
		СписокВыбора.Добавить(ВидСравнения.Больше);
		СписокВыбора.Добавить(ВидСравнения.БольшеИлиРавно);
		СписокВыбора.Добавить(ВидСравнения.Меньше);
		СписокВыбора.Добавить(ВидСравнения.МеньшеИлиРавно);
		СписокВыбора.Добавить(ВидСравнения.ВСписке);
		СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	Иначе
		СписокВыбора.Добавить(ВидСравнения.Равно);
		СписокВыбора.Добавить(ВидСравнения.НеРавно);
		СписокВыбора.Добавить(ВидСравнения.ВСписке);
		СписокВыбора.Добавить(ВидСравнения.НеВСписке);
	КонецЕсли;
	Описание = Новый ОписаниеОповещения("ТаблицаФильтрРедактораПоказатьВыборИзСпискаВидСравненияПродолжение", ЭтаФорма);
	ПоказатьВыборИзСписка(Описание, СписокВыбора, Элементы.ТаблицаФильтрРедактораВидСравнения, СписокВыбора.НайтиПоЗначению(ТекущиеДанные.ВидСравнения));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораПоказатьВыборИзСпискаВидСравненияПродолжение(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	Если (ЗначениеВыбора.Значение = ВидСравнения.ВСписке ИЛИ ЗначениеВыбора.Значение = ВидСравнения.НеВСписке) И ТипЗнч(ТекущиеДанные.Значение) <> Тип("СписокЗначений") Тогда
		ТекущееЗначение = ТекущиеДанные.Значение;
		Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");
		ТекущиеДанные.Значение = Новый СписокЗначений;
		ТекущиеДанные.Значение.ТипЗначения = ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
		Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
			ТекущиеДанные.Значение.Добавить(ТекущееЗначение);
		КонецЕсли;
	ИначеЕсли (ЗначениеВыбора.Значение <> ВидСравнения.ВСписке И ЗначениеВыбора.Значение <> ВидСравнения.НеВСписке) И ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
		ТекущееЗначение = ТекущиеДанные.Значение;
		Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
		Элементы.ТаблицаФильтрРедактораЗначение.ВыбиратьТип = Ложь;
		Если ТекущееЗначение.Количество() > 0 Тогда
			ТекущиеДанные.Значение = ТекущееЗначение.Получить(0);
		КонецЕсли;
	КонецЕсли;
		
	ТекущиеДанные.ВидСравнения = ЗначениеВыбора.Значение;

	Если ТекущиеДанные.Использование Тогда
		СформироватьДеревоПроектаПоТаблицеПроектаСФильтромНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПустаяСтрока(ТекущиеДанные.Реквизит) Тогда
		ТекущееЗначение = ТекущиеДанные.Значение;
		Если ТекущиеДанные.ВидСравнения = ВидСравнения.ВСписке ИЛИ ТекущиеДанные.ВидСравнения = ВидСравнения.НеВСписке Тогда
			Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = Новый ОписаниеТипов("СписокЗначений");//ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
			Элементы.ТаблицаФильтрРедактораЗначение.ВыбиратьТип = Ложь;
			Если ТипЗнч(ТекущиеДанные.Значение) <> Тип("СписокЗначений") ИЛИ ТекущиеДанные.Значение.Количество() = 0 Тогда
				ТекущиеДанные.Значение = Новый СписокЗначений;
				ТекущиеДанные.Значение.ТипЗначения = ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
			КонецЕсли;
		Иначе
			СтароеОграничение = Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа;
			Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа = ПолучитьДоступныйТип(ТекущиеДанные.Реквизит);
			Элементы.ТаблицаФильтрРедактораЗначение.ВыбиратьТип = Ложь;
			ТекущиеДанные.Значение = Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа.ПривестиЗначение(ТекущееЗначение);
			Если СтароеОграничение <> Элементы.ТаблицаФильтрРедактораЗначение.ОграничениеТипа Тогда
				ТекущиеДанные.ВидСравнения = ВидСравнения.Равно;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	НоваяСтрока = ТаблицаФильтрРедактора.Добавить();
	Если Копирование Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элементы.ТаблицаФильтрРедактора.ТекущиеДанные);
	КонецЕсли;
	Элементы.ТаблицаФильтрРедактора.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораПослеУдаления(Элемент)
	СформироватьДеревоПроектаПоТаблицеПроектаСФильтромНаКлиенте();
	ПоказатьКнопкиКоличествоУровней();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаУдовлетворяетФильтра(СтрокаПроекта, ЭтаФорма)
	Для Каждого СтрокаФильтра ИЗ ЭтаФорма.ТаблицаФильтрРедактора Цикл
		Если НЕ СтрокаФильтра.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(СтрокаФильтра.Реквизит) Тогда 
			Продолжить;
		КонецЕсли;
		Если СтрокаФильтра.ВидСравнения = ВидСравнения.Равно Тогда
			Попытка
				Если СтрокаПроекта[СтрокаФильтра.Реквизит] <> СтрокаФильтра.Значение Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.НеРавно Тогда
			Попытка
				Если СтрокаПроекта[СтрокаФильтра.Реквизит] = СтрокаФильтра.Значение Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.Больше Тогда
			Попытка
				Если СтрокаПроекта[СтрокаФильтра.Реквизит] <= СтрокаФильтра.Значение Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.Меньше Тогда
			Попытка
				Если СтрокаПроекта[СтрокаФильтра.Реквизит] >= СтрокаФильтра.Значение Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
			Попытка
				Если СтрокаПроекта[СтрокаФильтра.Реквизит] < СтрокаФильтра.Значение Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
			Попытка
				Если СтрокаПроекта[СтрокаФильтра.Реквизит] > СтрокаФильтра.Значение Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.Содержит Тогда
			Попытка
				Если Найти(СтрокаПроекта[СтрокаФильтра.Реквизит], СтрокаФильтра.Значение) = 0 Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.НеСодержит Тогда
			Попытка
				Если Найти(СтрокаПроекта[СтрокаФильтра.Реквизит], СтрокаФильтра.Значение) > 0 Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.ВСписке Тогда
			Попытка
				Если СтрокаФильтра.Значение.НайтиПоЗначению(СтрокаПроекта[СтрокаФильтра.Реквизит]) = Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		ИначеЕсли СтрокаФильтра.ВидСравнения = ВидСравнения.НеВСписке Тогда
			Попытка
				Если СтрокаФильтра.Значение.НайтиПоЗначению(СтрокаПроекта[СтрокаФильтра.Реквизит]) <> Неопределено Тогда
					Возврат Ложь;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура ТаблицаФильтрРедактораИспользованиеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	Если НЕ ПустаяСтрока(ТекущиеДанные.Реквизит) Тогда
		СформироватьДеревоПроектаПоТаблицеПроектаСФильтромНаКлиенте();
		ПоказатьКнопкиКоличествоУровней();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораВидСравненияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	Если ТекущиеДанные.Использование Тогда
		СформироватьДеревоПроектаПоТаблицеПроектаСФильтромНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаФильтрРедактораЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаФильтрРедактора.ТекущиеДанные;
	Если ТекущиеДанные.Использование Тогда
		СформироватьДеревоПроектаПоТаблицеПроектаСФильтромНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДеревоПроектаПоТаблицеПроектаСФильтромНаКлиенте()
	МассивИдентификаторы = Новый Массив;
	СформироватьДеревоПроектаПоТаблицеПроектаСФильтром(Ложь, МассивИдентификаторы);
	Для Каждого ЭлементДерева ИЗ ДеревоПроекта.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПроекта.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СервисныеПроцедурыИФункции

&НаКлиенте
Функция ПередЗаписьюПроверкаЗаполнения()
	БылаОшибка = Ложь;
	
	СоответствиеПривязки = Новый Соответствие;
	СоответствиеПривязки.Вставить(ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.НаДату"), Новый Структура("ДатаПривязки", Дата(1,1,1)));
	СоответствиеПривязки.Вставить(ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения"), Новый Структура("ПрофильРаспределения", ПредопределенноеЗначение("Справочник.грзнтПрофилиРаспределения.ПустаяСсылка")));
	СтруктураПроверкиПривязки = Новый Структура("СпособПривязки", СоответствиеПривязки);
	
	СтруктураПроверкиДДС = Новый Структура("Организация, Подразделение, ЗонаРасчета, СпособПривязки, Валюта, СтатьяДвиженияДенежныхСредств");
	СтруктураПроверкиДР = Новый Структура("Организация, Подразделение, ЗонаРасчета, СпособПривязки, Валюта, Статья");
	
	Для Каждого СтрокаТаблицыПроекта ИЗ ТаблицаПроектаКопия Цикл
		
		ПроверкаЗаполненияПлана(СтрокаТаблицыПроекта, "ПланДвиженияДенежныхСредств", СтруктураПроверкиДДС, БылаОшибка);
		ПроверкаЗаполненияПлана(СтрокаТаблицыПроекта, "ПланДвиженияДенежныхСредств", СтруктураПроверкиПривязки, БылаОшибка);
		
		ПроверкаЗаполненияПлана(СтрокаТаблицыПроекта, "ПланДоходов", СтруктураПроверкиДР, БылаОшибка);
		ПроверкаЗаполненияПлана(СтрокаТаблицыПроекта, "ПланДоходов", СтруктураПроверкиПривязки, БылаОшибка);
		ПроверкаЗаполненияПлана(СтрокаТаблицыПроекта, "ПланРасходов", СтруктураПроверкиДР, БылаОшибка);
		ПроверкаЗаполненияПлана(СтрокаТаблицыПроекта, "ПланРасходов", СтруктураПроверкиПривязки, БылаОшибка);
	КонецЦикла;
	Возврат БылаОшибка;
КонецФункции

&НаКлиенте
Процедура ПроверкаЗаполненияПлана(СтрокаТаблицыПроекта, ИмяТаблицыПлана, СтруктураОбязательныхПолей, БылаОшибка)
	// структура:{
	//	РеквизитПроверка:,
	//	РеквизитПроверка:,
	//	РеквизитПроверка:,
	//	РеквизитПроверка:[
	//		ЗначениеВариант: {РеквизитЗависимый:ЗначениеЗависимый},
	//		ЗначениеВариант: {РеквизитЗависимый:ЗначениеЗависимый}
	//	]
	//}
	Для Каждого СтрокаПлана ИЗ СтрокаТаблицыПроекта[ИмяТаблицыПлана] Цикл
		Для Каждого КлючИЗначение ИЗ СтруктураОбязательныхПолей Цикл
			Если КлючИЗначение.Значение = Неопределено Тогда //ЗначениеПроверка
				Если СтрокаПлана[КлючИЗначение.Ключ].Пустая() Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "В строке проекта №" + Формат(СтрокаТаблицыПроекта.НомерСтрокиПроекта, "ЧГ=;ЧН=") + " в таблице плана """ + ИмяТаблицыПлана + """ не заполнено поле """ + КлючИЗначение.Ключ + """";
					Сообщение.Сообщить();
					БылаОшибка = Истина;
				КонецЕсли;
			Иначе
				Для Каждого КлючИЗначениеВариант ИЗ КлючИЗначение.Значение Цикл // соответствие
					Если СтрокаПлана[КлючИЗначение.Ключ] = КлючИЗначениеВариант.Ключ Тогда
						Для Каждого КлючИЗначениеЗависимый ИЗ КлючИЗначениеВариант.Значение Цикл
							Если СтрокаПлана[КлючИЗначениеЗависимый.Ключ] = КлючИЗначениеЗависимый.Значение Тогда
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = "В строке проекта №" + Формат(СтрокаТаблицыПроекта.НомерСтрокиПроекта, "ЧГ=;ЧН=") + " в таблице плана """ + ИмяТаблицыПлана + """ не заполнено поле """ + КлючИЗначениеЗависимый.Ключ + """";
								Сообщение.Сообщить();
								БылаОшибка = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				///////////////
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаписатьДанныеДереваВДокументы(ДокументСДР, ДокументСроки, ДокументДДС, ДокументДР, ДокументМатериалы, ДокументРоли, ДокументРесурсы, ДокументМатериалыСумма, ДокументРолиФинансы, ДокументРесурсыФинансы, ДокументФактическийПроцент, ДокументФактическиеСроки, ТекстСообщения)
	Если ТипЗнч(ДокументСДР) <> Тип("Структура") Тогда
		СтрокаДокумента= ДокументСДР.СДРПроекта.Добавить();
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = ЭкземплярВерсии.Владелец;
		КонецЕсли;
		СтрокаДокумента.Задача = Проект;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСроки) <> Тип("Структура") Тогда
		ДокументСроки.ДатаНачала = ДатаНачалаПроекта;
		ДокументСроки.Календарь = КалендарьПроекта;
		// ((( grznt.Solntsev 19.12.2016
		ДокументСроки.НеУчитыватьФакт = НЕ РежимУчитыватьФакт;
		// ))) grznt.Solntsev 19.12.2016
	КонецЕсли;
	
	Если ТипЗнч(ДокументФактическийПроцент) <> Тип("Структура") Тогда
		ЗапросПроцент = Новый Запрос;
		ЗапросПроцент.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	грзнтФактическиеПроцентыГотовностиСрезПоследних.Задача,
		|	грзнтФактическиеПроцентыГотовностиСрезПоследних.ПроцентГотовности
		|ИЗ
		|	РегистрСведений.грзнтФактическиеПроцентыГотовности.СрезПоследних(&ТекущаяДата, Проект = &Проект) КАК грзнтФактическиеПроцентыГотовностиСрезПоследних";
		ЗапросПроцент.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		ЗапросПроцент.УстановитьПараметр("Проект", Проект);
		ТаблицаПроцентГотовности = ЗапросПроцент.Выполнить().Выгрузить();
	КонецЕсли;
	Если ТипЗнч(ДокументФактическиеСроки) <> Тип("Структура") Тогда
		ЗапросПроцент = Новый Запрос;
		ЗапросПроцент.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	грзнтФактическиеСрокиПроектовСрезПоследних.Задача,
		|	грзнтФактическиеСрокиПроектовСрезПоследних.ДатаНачала,
		|	грзнтФактическиеСрокиПроектовСрезПоследних.ДатаОкончания,
		|	грзнтФактическиеСрокиПроектовСрезПоследних.Длительность
		|ИЗ
		|	РегистрСведений.грзнтФактическиеСрокиПроектов.СрезПоследних(, Проект = &Проект) КАК грзнтФактическиеСрокиПроектовСрезПоследних";
		ЗапросПроцент.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		ЗапросПроцент.УстановитьПараметр("Проект", Проект);
		ТаблицаФактическиеСроки = ЗапросПроцент.Выполнить().Выгрузить();
	КонецЕсли;
	
	// ((( grznt.Solntsev 12.10.2016
	ИспользоватьУправляемыеБлокировки = Истина;
	Если ИспользоватьУправляемыеБлокировки Тогда 
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "РегистрСведений.грзнтКомментарииКЗадачам";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
		ЭлементБлокировки.УстановитьЗначение("Проект", Проект);
		Попытка
			Блокировка.Заблокировать();
		Исключение
			ТекстСообщения = "Ошибка блокировки регистра ""Комментарии к задачам"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
					+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	// ))) grznt.Solntsev 12.10.2016
	
	КопияТаблицаПроекта = ТаблицаПроектаКопия.Выгрузить();
	КопияТаблицаПроекта.Индексы.Добавить("УИД");
	КопияТаблицаПредшественники = ТаблицаПредшественники.Выгрузить();
	КопияТаблицаПредшественники.Индексы.Добавить("УИД");
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаТаблицы.Внешний Тогда
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(ДокументСДР) <> Тип("Структура") Тогда
			
			СтрокаДокумента = ДокументСДР.СДРПроекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаТаблицы);
			Если НЕ ПустаяСтрока(СтрокаТаблицы.Родитель) Тогда
				СтрокиРодитель = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицы.Родитель));
				Если СтрокиРодитель.Количество() > 0 Тогда
					СтрокаДокумента.Родитель = СтрокиРодитель.Получить(0).Задача;
				Иначе
					СтрокаДокумента.Родитель = Проект;
				КонецЕсли;
			Иначе
				СтрокаДокумента.Родитель = Проект;
			КонецЕсли;
			
			СтрокиПредшественники = КопияТаблицаПредшественники.НайтиСтроки(Новый Структура("УИД", СтрокаТаблицы.УИД));
			Для Каждого СтрокаПредшественник ИЗ СтрокиПредшественники Цикл
				Если СтрокаПредшественник.Внешний Тогда
					СтрокаДокумента = ДокументСДР.ВнешниеЗависимости.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПредшественник);
					Если НЕ ПустаяСтрока(СтрокаПредшественник.УИД) Тогда
						СтрокиЗадачи = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("УИД", СтрокаПредшественник.УИД));
						Если СтрокиЗадачи.Количество() > 0 Тогда
							СтрокаДокумента.Задача = СтрокиЗадачи.Получить(0).Задача;
						КонецЕсли;
					КонецЕсли;
					Если НЕ ПустаяСтрока(СтрокаПредшественник.ПредшественникУИД) Тогда
						СтрокиПредшественник = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("УИД", СтрокаПредшественник.ПредшественникУИД));
						Если СтрокиПредшественник.Количество() > 0 Тогда
							СтрокаДокумента.ДатаНачала = СтрокиПредшественник.Получить(0).ДатаНачала;
							СтрокаДокумента.ДатаОкончания = СтрокиПредшественник.Получить(0).ДатаОкончания;
						КонецЕсли;
					КонецЕсли;
				Иначе
					СтрокаДокумента = ДокументСДР.Зависимости.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПредшественник);
					Если НЕ ПустаяСтрока(СтрокаПредшественник.УИД) Тогда
						СтрокиЗадачи = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("УИД", СтрокаПредшественник.УИД));
						Если СтрокиЗадачи.Количество() > 0 Тогда
							СтрокаДокумента.Задача = СтрокиЗадачи.Получить(0).Задача;
						КонецЕсли;
					КонецЕсли;
					
					Если НЕ ПустаяСтрока(СтрокаПредшественник.ПредшественникУИД) Тогда
						СтрокиПредшественник = КопияТаблицаПроекта.НайтиСтроки(Новый Структура("УИД", СтрокаПредшественник.ПредшественникУИД));
						Если СтрокиПредшественник.Количество() > 0 Тогда
							СтрокаДокумента.Предшественник = СтрокиПредшественник.Получить(0).Задача;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументСроки) <> Тип("Структура") Тогда
			СтрокаСроков = ДокументСроки.СрокиПроекта.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСроков, СтрокаТаблицы);
			СтрокаСроков.ОграничениеСроковЗадачи = СтрокаТаблицы.ТипОграничения;
			СтрокаСроков.ДатаОграниченияСроковЗадачи = СтрокаТаблицы.ДатаОграничения;
		КонецЕсли;
		
		Если ТипЗнч(ДокументДДС) <> Тип("Структура") Тогда
			СтрокиПланов = СтрокаТаблицы.ПланДвиженияДенежныхСредств;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументДДС.ДвиженияДенежныхСредств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументДР) <> Тип("Структура") Тогда
			СтрокиПланов = СтрокаТаблицы.ПланДоходов;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументДР.ПланДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
			
			СтрокиПланов = СтрокаТаблицы.ПланРасходов;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументДР.ПланРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументРоли) <> Тип("Структура") Тогда
			СтрокиПланов = СтрокаТаблицы.ПланРолейОбщая;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументРоли.Роли.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументРесурсы) <> Тип("Структура") Тогда
			СтрокиПланов = СтрокаТаблицы.ПланРесурсовОбщая;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументРесурсы.ТрудовыеРесурсы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументМатериалы) <> Тип("Структура") Тогда
			СтрокиПланов = СтрокаТаблицы.ПланМатериаловОбщая;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументМатериалы.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументМатериалыСумма) <> Тип("Структура") Тогда
			СтрокиПланов = СтрокаТаблицы.ПланМатериаловОбщая;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументМатериалыСумма.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументРолиФинансы) <> Тип("Структура") Тогда
			СтрокиПланов = СтрокаТаблицы.ПланРолейОбщая;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументРолиФинансы.Роли.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
		КонецЕсли;
		
		Если ТипЗнч(ДокументРесурсыФинансы) <> Тип("Структура") Тогда
			СтрокиПланов = СтрокаТаблицы.ПланРесурсовОбщая;
			Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
				СтрокаДокумента = ДокументРесурсыФинансы.ТрудовыеРесурсы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтрокаПланов);
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
			КонецЦикла;
		КонецЕсли;
		
		// ((( grznt.Solntsev 12.10.2016
		СтрокиПланов = СтрокаТаблицы.КомментарииКЗадаче;
		РСНЗ = РегистрыСведений.грзнтКомментарииКЗадачам.СоздатьНаборЗаписей();
		РСНЗ.Отбор.Проект.Установить(Проект);
		РСНЗ.Отбор.Задача.Установить(СтрокаТаблицы.Задача);
		РСНЗ.Прочитать();
		РСНЗ.Очистить();
		Для Каждого СтрокаПланов ИЗ СтрокиПланов Цикл
			ЗаписьКомментарий = РСНЗ.Добавить();
			ЗаписьКомментарий.Проект = Проект;
			ЗаписьКомментарий.Задача = СтрокаТаблицы.Задача;
			ЗаписьКомментарий.ДатаВремя = СтрокаПланов.ДатаВремя;
			ЗаписьКомментарий.Пользователь = СтрокаПланов.Пользователь;
			ЗаписьКомментарий.Комментарий = СтрокаПланов.Комментарий;
		КонецЦикла;
		РСНЗ.Записать();
		// ))) grznt.Solntsev 12.10.2016
		
		Если ТипЗнч(ДокументФактическийПроцент) <> Тип("Структура") Тогда
			СтрокаТаблицыПроцент = ТаблицаПроцентГотовности.Найти(СтрокаТаблицы.Задача, "Задача");
			СтрокаДокумента = ДокументФактическийПроцент.ФактическиеПроценты.Найти(СтрокаТаблицы.Задача, "Задача");
			Если СтрокаТаблицыПроцент <> Неопределено Тогда
				Если СтрокаТаблицыПроцент.ПроцентГотовности <> СтрокаТаблицы.ПроцентГотовности Тогда
					Если СтрокаДокумента = Неопределено Тогда
						СтрокаДокумента = ДокументФактическийПроцент.ФактическиеПроценты.Добавить();
						СтрокаДокумента.Проект = Проект;
						СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
					КонецЕсли;
					СтрокаДокумента.ПроцентГотовности = СтрокаТаблицы.ПроцентГотовности;
				КонецЕсли;
			ИначеЕсли СтрокаДокумента <> Неопределено Тогда
				СтрокаДокумента.ПроцентГотовности = СтрокаТаблицы.ПроцентГотовности;
			ИначеЕсли СтрокаТаблицы.ПроцентГотовности <> 0 Тогда
				СтрокаДокумента = ДокументФактическийПроцент.ФактическиеПроценты.Добавить();
				СтрокаДокумента.Проект = Проект;
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
				СтрокаДокумента.ПроцентГотовности = СтрокаТаблицы.ПроцентГотовности;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДокументФактическиеСроки) <> Тип("Структура") Тогда
			СтрокаТаблицыСроки = ТаблицаФактическиеСроки.Найти(СтрокаТаблицы.Задача, "Задача");
			СтрокаДокумента = ДокументФактическиеСроки.СрокиПроекта.Найти(СтрокаТаблицы.Задача, "Задача");
			Если СтрокаТаблицыСроки <> Неопределено Тогда
				Если СтрокаТаблицыСроки.ДатаНачала <> СтрокаТаблицы.ФактическаяДатаНачала ИЛИ СтрокаТаблицыСроки.ДатаОкончания <> СтрокаТаблицы.ФактическаяДатаОкончания Тогда
					Если СтрокаДокумента = Неопределено Тогда
						СтрокаДокумента = ДокументФактическиеСроки.СрокиПроекта.Добавить();
						СтрокаДокумента.Проект = Проект;
						СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
					КонецЕсли;
					СтрокаДокумента.ДатаНачала = СтрокаТаблицы.ФактическаяДатаНачала;
					СтрокаДокумента.ДатаОкончания = СтрокаТаблицы.ФактическаяДатаОкончания;
					СтрокаДокумента.Длительность = СтрокаТаблицы.ФактическаяДлительность;
					СтрокаДокумента.ЕдиницаВремени = СтрокаТаблицы.ЕдиницаВремени;
				КонецЕсли;
			ИначеЕсли СтрокаДокумента <> Неопределено Тогда
				СтрокаДокумента.ДатаНачала = СтрокаТаблицы.ФактическаяДатаНачала;
				СтрокаДокумента.ДатаОкончания = СтрокаТаблицы.ФактическаяДатаОкончания;
			ИначеЕсли СтрокаТаблицы.ФактическаяДатаНачала <> Дата(1,1,1) ИЛИ СтрокаТаблицы.ФактическаяДатаОкончания <> Дата(1,1,1) Тогда
				СтрокаДокумента = ДокументФактическиеСроки.СрокиПроекта.Добавить();
				СтрокаДокумента.Проект = Проект;
				СтрокаДокумента.Задача = СтрокаТаблицы.Задача;
				
				СтрокаДокумента.ДатаНачала = СтрокаТаблицы.ФактическаяДатаНачала;
				СтрокаДокумента.ДатаОкончания = СтрокаТаблицы.ФактическаяДатаОкончания;
				СтрокаДокумента.Длительность = СтрокаТаблицы.ФактическаяДлительность;
				СтрокаДокумента.ЕдиницаВремени = СтрокаТаблицы.ЕдиницаВремени;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

&НаСервере
Функция ЗаписатьСтруктуруПроектаНаСервере(ТекстСообщения)
	
	// loza [08.12.15
	СтрПрав = Новый Структура;
	ПрочитатьПраваПользователяНаЗаписьПлана(СтрПрав);
	
	МожноЗаписать = Ложь;
	Для Каждого ТекПраво Из СтрПрав Цикл
		Если ТекПраво.Значение Тогда
			МожноЗаписать = Истина;
		КонецЕсли;
	КонецЦикла;	
	
	Если НЕ МожноЗаписать Тогда
		ТекстСообщения = "У вас нет права на изменение ни одного из разделов! Проект не записан.";
		Возврат Ложь;
	КонецЕсли;	
	// 08.12.15] loza
	
	ДокументСДР = Неопределено;
	ДокументСроки= Неопределено;
	ДокументДДС = Неопределено;
	ДокументДР = Неопределено;
	
	ДокументМатериалы = Неопределено;
	ДокументРоли = Неопределено;
	ДокументРесурсы = Неопределено;
	
	ДокументМатериалыСумма = Неопределено;
	ДокументРолиФинансы = Неопределено;
	ДокументРесурсыФинансы = Неопределено;
	
	ДокументФактическийПроцент = Неопределено;
	ДокументФактическиеСроки = Неопределено;
	
	Попытка
		Если НЕ НайтиСоздатьДокументы(ДокументСДР, ДокументСроки, ДокументДДС, ДокументДР, ДокументМатериалы, ДокументРоли, ДокументРесурсы, ДокументМатериалыСумма, ДокументРолиФинансы, ДокументРесурсыФинансы, ДокументФактическийПроцент, ДокументФактическиеСроки, СтрПрав, ТекстСообщения) Тогда
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ТекстСообщения = "" + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ:мм:сс'") + ": Ошибка поиска и записи документов проекта: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	ИспользоватьУправляемуюБлокировку = Ложь;
	Если ИспользоватьУправляемуюБлокировку Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	Если НЕ СоздатьНедостающиеПроекты(ТекстСообщения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		Если НЕ ЗаписатьДанныеДереваВДокументы(ДокументСДР, ДокументСроки, ДокументДДС, ДокументДР, ДокументМатериалы, ДокументРоли, ДокументРесурсы, ДокументМатериалыСумма, ДокументРолиФинансы, ДокументРесурсыФинансы, ДокументФактическийПроцент, ДокументФактическиеСроки, ТекстСообщения) Тогда
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецЕсли;
	Исключение
		ТекстСообщения = "" + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy ЧЧ:мм:сс'") + ": Ошибка заполнения документов проекта: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(ДокументСДР) <> Тип("Структура") И (ДокументСДР.СДРПроекта.Количество() > 0 ИЛИ ДокументСДР.Зависимости.Количество() > 0 ИЛИ НЕ ДокументСДР.ЭтоНовый()) Тогда
		Попытка
			Если ДокументСДР.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументСДР.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументСДР.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтСДРПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""СДР проекта"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументСДР.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументСДР.ПометкаУдаления Тогда
				ДокументСДР.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументСДР.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""СДР проекта""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументСроки) <> Тип("Структура") Тогда
		Попытка
			Если ДокументСроки.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументСроки.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументСроки.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПлановыеСрокиПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""Плановые сроки проекта"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументСроки.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументСроки.ПометкаУдаления Тогда
				ДокументСроки.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументСроки.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""Плановые сроки проекта""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументДДС) <> Тип("Структура") И (ДокументДДС.ДвиженияДенежныхСредств.Количество() > 0 ИЛИ НЕ ДокументДДС.ЭтоНовый()) Тогда
		Попытка
			Если ДокументДДС.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументДДС.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументДДС.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланДвиженияДенежныхСредствПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План движения денежных средств"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументДДС.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументДДС.ПометкаУдаления Тогда
				ДокументДДС.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументДДС.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План движения денежных средств""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументДР) <> Тип("Структура") И (ДокументДР.ПланРасходов.Количество() > 0 ИЛИ ДокументДР.ПланДоходов.Количество() > 0 ИЛИ НЕ ДокументДР.ЭтоНовый()) Тогда
		Попытка
			Если ДокументДР.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументДР.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументДР.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланДоходовРасходовПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План доходов и расходов"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументДР.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументДР.ПометкаУдаления Тогда
				ДокументДР.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументДР.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План доходов и расходов""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументМатериалы) <> Тип("Структура") И (ДокументМатериалы.Материалы.Количество() > 0 ИЛИ НЕ ДокументМатериалы.ЭтоНовый()) Тогда
		Попытка
			Если ДокументМатериалы.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументМатериалы.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументМатериалы.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланЗатратМатериаловКоличество";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План затрат материалов (количество)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументМатериалы.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументМатериалы.ПометкаУдаления Тогда
				ДокументМатериалы.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументМатериалы.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План затрат материалов (количество)""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументРоли) <> Тип("Структура") И (ДокументРоли.Роли.Количество() > 0 ИЛИ НЕ ДокументРоли.ЭтоНовый()) Тогда
		Попытка
			Если ДокументРоли.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументРоли.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументРоли.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланТрудозатратРолейЧасы";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План затрат ролей (часы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументРоли.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументРоли.ПометкаУдаления Тогда
				ДокументРоли.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументРоли.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План затрат ролей (часы)""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументРесурсы) <> Тип("Структура") И (ДокументРесурсы.ТрудовыеРесурсы.Количество() > 0 ИЛИ НЕ ДокументРесурсы.ЭтоНовый()) Тогда
		Попытка
			Если ДокументРесурсы.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументРесурсы.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументРесурсы.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланТрудозатратРесурсовЧасы";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План затрат ресурсов (часы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументРесурсы.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументРесурсы.ПометкаУдаления Тогда
				ДокументРесурсы.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументРесурсы.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа плана ""План затрат ресурсов (часы)""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументМатериалыСумма) <> Тип("Структура") И (ДокументМатериалыСумма.Материалы.Количество() > 0 ИЛИ НЕ ДокументМатериалыСумма.ЭтоНовый()) Тогда
		Попытка
			Если ДокументМатериалыСумма.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументМатериалыСумма.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументМатериалыСумма.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланЗатратМатериаловСумма";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План затрат материалов (финансы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументМатериалыСумма.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументМатериалыСумма.ПометкаУдаления Тогда
				ДокументМатериалыСумма.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументМатериалыСумма.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План затрат материалов (финансы)""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументРолиФинансы) <> Тип("Структура") И (ДокументРолиФинансы.Роли.Количество() > 0 ИЛИ НЕ ДокументРолиФинансы.ЭтоНовый()) Тогда
		Попытка
			Если ДокументРолиФинансы.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументРолиФинансы.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументРолиФинансы.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланТрудозатратРолейФинансы";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План затрат ролей (финансы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументРолиФинансы.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументРолиФинансы.ПометкаУдаления Тогда
				ДокументРолиФинансы.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументРолиФинансы.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План затрат ролей (финансы)""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументРесурсыФинансы) <> Тип("Структура") И (ДокументРесурсыФинансы.ТрудовыеРесурсы.Количество() > 0 ИЛИ НЕ ДокументРесурсыФинансы.ЭтоНовый()) Тогда
		Попытка
			Если ДокументРесурсыФинансы.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументРесурсыФинансы.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументРесурсыФинансы.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланТрудозатратРесурсовФинансы";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План затрат ресурсов (финансы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументРесурсыФинансы.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументРесурсыФинансы.ПометкаУдаления Тогда
				ДокументРесурсыФинансы.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументРесурсыФинансы.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План затрат ресурсов (финансы)""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументФактическийПроцент) <> Тип("Структура") И (ДокументФактическийПроцент.ФактическиеПроценты.Количество() > 0 ИЛИ НЕ ДокументФактическийПроцент.ЭтоНовый()) Тогда
		Попытка
			Если ДокументФактическийПроцент.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументФактическийПроцент.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументФактическийПроцент.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтФактическийПроцентГотовности";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Проект", Проект);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""Фактические проценты готовности"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументФактическийПроцент.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументФактическийПроцент.ПометкаУдаления Тогда
				ДокументФактическийПроцент.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументФактическийПроцент.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""Фактические проценты готовности""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокументФактическиеСроки) <> Тип("Структура") И (ДокументФактическиеСроки.СрокиПроекта.Количество() > 0 ИЛИ НЕ ДокументФактическиеСроки.ЭтоНовый()) Тогда
		Попытка
			Если ДокументФактическиеСроки.ЭтоНовый() Тогда
				СсылкаДокумента = ДокументФактическиеСроки.ПолучитьСсылкуНового();
			Иначе
				СсылкаДокумента = ДокументФактическиеСроки.Ссылка;
			КонецЕсли;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтФактическиеСрокиПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Проект", Проект);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""Фактические сроки проекта"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			ДокументФактическиеСроки.Записать(РежимЗаписиДокумента.Запись);
			Если ДокументФактическиеСроки.ПометкаУдаления Тогда
				ДокументФактическиеСроки.УстановитьПометкуУдаления(Ложь);
			КонецЕсли;
			ДокументФактическиеСроки.Записать(РежимЗаписиДокумента.Проведение);
			
		Исключение
			ТекстСообщения = "Ошибка записи документа ""Фактические сроки проекта""";
			ОтменитьТранзакцию();
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	Возврат Истина;
КонецФункции

&НаСервере
Функция СоздатьНедостающиеПроекты(ТекстСообщения)
	
	Если НЕ грзнтПраваДоступаСервер.ТаблицаДоступна(ПроверятьПраваНаТаблицы, ДоступныеТаблицыИзменение, "Справочник", "Проекты") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	ИспользоватьУправляемуюБлокировку = Ложь;
	
	Для Каждого СтрокаТаблицыПлана ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаТаблицыПлана.Внешний Тогда
			Продолжить;
		КонецЕсли;
		ЭтоГруппа = ТаблицаПроектаКопия.НайтиСтроки(Новый Структура("Родитель", СтрокаТаблицыПлана.УИД)).Количество() > 0;
		ЗадачаТаблицы = СтрокаТаблицыПлана.Задача;
		Если ЗадачаТаблицы.Пустая() Тогда
			ЗадачаТаблицы = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицыПлана.УИД));
		КонецЕсли;
		Если ЗадачаТаблицы.Пустая() ИЛИ ЗадачаТаблицы.ПолучитьОбъект() = Неопределено Тогда
			Попытка
				НовыйПроект = Справочники.Проекты.СоздатьЭлемент();
			Исключение
				ТекстСообщения = "Ошибка создания нового элемента справончика проекты! Проверьте настройки доступа пользователя!";
				Возврат Ложь;
			КонецПопытки;
			НовыйПроект.УстановитьСсылкуНового(Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицыПлана.УИД)));
			НовыйПроект.грзнтВидЭлемента = СтрокаТаблицыПлана.ВидЭлемента;
			НовыйПроект.грзнтЭтоПроектнаяЗадача = Истина;
			НовыйПроект.Родитель = Проект;
			НовыйПроект.Наименование = СтрокаТаблицыПлана.НаименованиеЗадачи;
			НовыйПроект.грзнтПолноеНаименование = СтрокаТаблицыПлана.НаименованиеЗадачи;
			НовыйПроект.грзнтВидОперации = СтрокаТаблицыПлана.ВидОперации;
			НовыйПроект.грзнтПроектЗадачи = Проект;
			НовыйПроект.грзнтЭтоГруппа = ЭтоГруппа;
			
			НовыйПроект.грзнтПродукт = СтрокаТаблицыПлана.Продукт;
			НовыйПроект.грзнтЮридическийДоговор = СтрокаТаблицыПлана.Договор;
			НовыйПроект.грзнтТехнологическийПроцесс = СтрокаТаблицыПлана.Техпроцесс;
			НовыйПроект.грзнтУправленческаяРабота = СтрокаТаблицыПлана.Работа;
			
			Попытка
				Если ИспользоватьУправляемуюБлокировку Тогда
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Справочник.Проекты");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					ЭлементБлокировки.УстановитьЗначение("Ссылка", НовыйПроект.ПолучитьСсылкуНового());
					Блокировка.Заблокировать();
				КонецЕсли;
				НовыйПроект.Записать();
				
			Исключение
				ТекстСообщения = "Ошибка записи нового проекта: " + ОписаниеОшибки();
				Если ИспользоватьУправляемуюБлокировку Тогда 
					ОтменитьТранзакцию();
				КонецЕсли;
				Возврат Ложь;
			КонецПопытки;
			СтрокаТаблицыПлана.Задача = НовыйПроект.Ссылка;
			Если СтрокаТаблицыПлана.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПлана.Идентификатор);
				Если СтрокаДерева <> Неопределено Тогда
					СтрокаДерева.Задача = НовыйПроект.Ссылка;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли СтрокаТаблицыПлана.ИзменилисьРеквизиты Тогда
			СтрокаТаблицыПлана.Задача = ЗадачаТаблицы;
			ПроектОбъект = СтрокаТаблицыПлана.Задача.ПолучитьОбъект();
			ПроектОбъект.грзнтПолноеНаименование = СокрЛП(СтрокаТаблицыПлана.НаименованиеЗадачи);
			ПроектОбъект.Наименование = ПроектОбъект.грзнтПолноеНаименование;
			ПроектОбъект.грзнтВидЭлемента = СтрокаТаблицыПлана.ВидЭлемента;
			ПроектОбъект.грзнтВидОперации = СтрокаТаблицыПлана.ВидОперации;
			ПроектОбъект.грзнтЭтоГруппа = ЭтоГруппа;
			
			ПроектОбъект.грзнтПродукт = СтрокаТаблицыПлана.Продукт;
			ПроектОбъект.грзнтЮридическийДоговор = СтрокаТаблицыПлана.Договор;
			ПроектОбъект.грзнтТехнологическийПроцесс = СтрокаТаблицыПлана.Техпроцесс;
			ПроектОбъект.грзнтУправленческаяРабота = СтрокаТаблицыПлана.Работа;
			
			Попытка
				Если ИспользоватьУправляемуюБлокировку Тогда
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("Справочник.Проекты");
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
					ЭлементБлокировки.УстановитьЗначение("Ссылка", ПроектОбъект.Ссылка);
					Блокировка.Заблокировать();
				КонецЕсли;
				
				ПроектОбъект.Записать();
				
			Исключение
				ТекстСообщения = "Ошибка изменения наименования проекта! " + ОписаниеОшибки();
				Если ИспользоватьУправляемуюБлокировку Тогда 
					ОтменитьТранзакцию();
				КонецЕсли;
				Возврат Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция НайтиСоздатьДокументы(ДокументСДР, ДокументСроков, ДокументДДС, ДокументДР, ДокументМатериалы, ДокументРоли, ДокументРесурсы, ДокументМатериалыСумма, ДокументРолиФинансы, ДокументРесурсыФинансы, ДокументФактическийПроцент, ДокументФактическиеСроки, СтрПрав, ТекстСообщения)
	// loza [05.12.15
	ЗапросЗаглушка = "ВЫБРАТЬ ИСТИНА КАК ЗаглушкаПрав;";
	
	ЗапросДокументы = Новый Запрос;
	ЗапросДокументы.Текст = ""
	+ ?(НЕ СтрПрав.Право_СДРПроекта, ЗапросЗаглушка, 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтСДРПроекта ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	+ ?(НЕ СтрПрав.Право_ПлановыеСрокиПроекта, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПлановыеСрокиПроекта ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	+ ?(НЕ СтрПрав.Право_ПланДвиженияДенежныхСредствПроекта, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПланДвиженияДенежныхСредствПроекта ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	+ ?(НЕ СтрПрав.Право_ПланДоходовРасходовПроекта, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПланДоходовРасходовПроекта ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	
	|;")
	+ ?(НЕ СтрПрав.Право_ПланЗатратМатериаловКоличество, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПланЗатратМатериаловКоличество ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	+ ?(НЕ СтрПрав.Право_ПланТрудозатратРолейЧасы, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПланТрудозатратРолейЧасы ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	+ ?(НЕ СтрПрав.Право_ПланТрудозатратРесурсовЧасы, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПланТрудозатратРесурсовЧасы ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	
	|;")
	+ ?(НЕ СтрПрав.Право_ПланЗатратМатериаловСумма, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПланЗатратМатериаловСумма ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	+ ?(НЕ СтрПрав.Право_ПланТрудозатратРолейФинансы, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПланТрудозатратРолейФинансы ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	+ ?(НЕ СтрПрав.Право_ПланТрудозатратРесурсовФинансы, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтПланТрудозатратРесурсовФинансы ГДЕ ЭкземплярВерсии = &ЭкземплярВерсии
	|;")
	+ ?(НЕ СтрПрав.Право_ФактическийПроцентГотовности, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтФактическийПроцентГотовности ГДЕ Проект = &Проект И НАЧАЛОПЕРИОДА(Дата, ДЕНЬ) = &НачалоДня И АвтоматическийДокумент
	|;")
	+ ?(НЕ СтрПрав.Право_ФактическиеСроки, ЗапросЗаглушка, "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ Ссылка ИЗ Документ.грзнтФактическиеСрокиПроекта ГДЕ Проект = &Проект И НАЧАЛОПЕРИОДА(Дата, ДЕНЬ) = &НачалоДня И АвтоматическийДокумент
	|")
	;
	
	ЗапросДокументы.УстановитьПараметр("ЭкземплярВерсии", ЭкземплярВерсии);
	ЗапросДокументы.УстановитьПараметр("Проект", Проект);
	ЗапросДокументы.УстановитьПараметр("НачалоДня", НачалоДня(ТекущаяДата()));
	
	МассивРезультатов = ЗапросДокументы.ВыполнитьПакет();
	Для К = 1 ПО МассивРезультатов.Количество() Цикл
		МассивРезультатов[к-1] = МассивРезультатов[к-1].Выбрать();
		МассивРезультатов[к-1].Следующий();
	КонецЦикла;
	
	ПустаяТаблицаДокумента = Новый ТаблицаЗначений;
	ПустаяТаблицаДокумента.Колонки.Добавить("Задача");
	
	ИспользоватьУправляемуюБлокировку = Истина;
	Если ИспользоватьУправляемуюБлокировку = Истина Тогда
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	КонецЕсли;
	
	ОтменятьПроведение = Ложь;
	
	Если СтрПрав.Право_СДРПроекта Тогда
		Если ЕстьПраво("Документ.грзнтСДРПроекта", "Изменение") Тогда
			ДокументСДР = МассивРезультатов.Получить(0).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтСДРПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""СДР проекта"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументСДР) Тогда
				ДокументСДР = ДокументСДР.ПолучитьОбъект();
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументСДР.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументСДР.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументСДР + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументСДР.ПометкаУдаления Тогда
						Попытка
							ДокументСДР.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументСДР.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументСДР = Документы.грзнтСДРПроекта.СоздатьДокумент();
					ДокументСДР.Дата = ТекущаяДата();
					ДокументСДР.Проект = Проект;
					ДокументСДР.ВидВерсииПлана = ВидВерсииПлана;
					ДокументСДР.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументСДР.УстановитьСсылкуНового(Документы.грзнтСДРПроекта.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументСДР = Новый Структура("СДРПроекта, Зависимости, ВнешниеЗависимости", ПустаяТаблицаДокумента, ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			ДокументСДР.СДРПроекта.Очистить();
			ДокументСДР.Зависимости.Очистить();
			ДокументСДР.ВнешниеЗависимости.Очистить();
		Иначе
			ДокументСДР = Новый Структура("СДРПроекта, Зависимости, ВнешниеЗависимости", ПустаяТаблицаДокумента, ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""СДР Проекта"" не записан - недостаточно прав по проекту";
		КонецЕсли;	
	Иначе
		ДокументСДР = Новый Структура("СДРПроекта, Зависимости", ПустаяТаблицаДокумента, ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""СДР Проекта"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПлановыеСрокиПроекта Тогда
		Если ЕстьПраво("Документ.грзнтПлановыеСрокиПроекта", "Изменение") Тогда
			ДокументСроков = МассивРезультатов.Получить(1).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПлановыеСрокиПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""Плановые сроки проекта"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументСроков) Тогда
				ДокументСроков = ДокументСроков.ПолучитьОбъект();
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументСроков.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументСроков.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументСроков + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументСроков.ПометкаУдаления Тогда
						Попытка
							ДокументСроков.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументСроков.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументСроков = Документы.грзнтПлановыеСрокиПроекта.СоздатьДокумент();
					ДокументСроков.Дата = ТекущаяДата();
					ДокументСроков.Проект = Проект;
					ДокументСроков.ВидВерсииПлана = ВидВерсииПлана;
					ДокументСроков.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументСроков.УстановитьСсылкуНового(Документы.грзнтПлановыеСрокиПроекта.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументСроков = Новый Структура("СрокиПроекта", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			ДокументСроков.СрокиПроекта.Очистить();
		Иначе
			ДокументСроков = Новый Структура("СрокиПроекта", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""Плановые сроки проекта"" не записан - недостаточно прав по проекту";
		КонецЕсли;	
	Иначе
		ДокументСроков = Новый Структура("СрокиПроекта", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""Плановые сроки проекта"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПланДвиженияДенежныхСредствПроекта Тогда
		Если ЕстьПраво("Документ.грзнтПланДвиженияДенежныхСредствПроекта", "Изменение") Тогда
			ДокументДДС = МассивРезультатов.Получить(2).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланДвиженияДенежныхСредствПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План движения денежных средств"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументДДС) Тогда
				ДокументДДС = ДокументДДС.ПолучитьОбъект();
				
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументДДС.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументДДС.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументДДС + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументДДС.ПометкаУдаления Тогда
						Попытка
							ДокументДДС.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументДДС.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументДДС = Документы.грзнтПланДвиженияДенежныхСредствПроекта.СоздатьДокумент();
					ДокументДДС.Дата = ТекущаяДата();
					ДокументДДС.Проект = Проект;
					ДокументДДС.ВидВерсииПлана = ВидВерсииПлана;
					ДокументДДС.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументДДС.УстановитьСсылкуНового(Документы.грзнтПланДвиженияДенежныхСредствПроекта.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументДДС = Новый Структура("ДвиженияДенежныхСредств", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
			ДокументДДС.ДвиженияДенежныхСредств.Очистить();
		Иначе
			ДокументДДС = Новый Структура("ДвиженияДенежныхСредств", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""План движения денежных"" средств проекта не записан - недостаточно прав по проекту";
		КонецЕсли;	
	Иначе
		ДокументДДС = Новый Структура("ДвиженияДенежныхСредств", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""План движения денежных"" средств проекта не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПланДоходовРасходовПроекта Тогда
		Если ЕстьПраво("Документ.грзнтПланДоходовРасходовПроекта", "Изменение") Тогда
			ДокументДР = МассивРезультатов.Получить(3).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланДоходовРасходовПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План доходов и расходов"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументДР) Тогда
				ДокументДР = ДокументДР.ПолучитьОбъект();
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументДР.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументДР.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументДР + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументДР.ПометкаУдаления Тогда
						Попытка
							ДокументДР.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументДР.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументДР = Документы.грзнтПланДоходовРасходовПроекта.СоздатьДокумент();
					ДокументДР.Дата = ТекущаяДата();
					ДокументДР.Проект = Проект;
					ДокументДР.ВидВерсииПлана = ВидВерсииПлана;
					ДокументДР.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументДР.УстановитьСсылкуНового(Документы.грзнтПланДоходовРасходовПроекта.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументДР = Новый Структура("ПланДоходов, ПланРасходов", ПустаяТаблицаДокумента, ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
			ДокументДР.ПланДоходов.Очистить();
			ДокументДР.ПланРасходов.Очистить();
		Иначе
			ДокументДР = Новый Структура("ПланДоходов, ПланРасходов", ПустаяТаблицаДокумента, ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""План доходов и расходов"" не записан - недостаточно прав по проекту";
		КонецЕсли;	
	Иначе
		ДокументДР = Новый Структура("ПланДоходов, ПланРасходов", ПустаяТаблицаДокумента, ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""План доходов и расходов"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПланЗатратМатериаловКоличество Тогда
		Если ЕстьПраво("Документ.грзнтПланЗатратМатериаловКоличество", "Изменение") Тогда
			ДокументМатериалы = МассивРезультатов.Получить(4).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланЗатратМатериаловКоличество";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План затрат материалов (количество)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументМатериалы) Тогда
				ДокументМатериалы = ДокументМатериалы.ПолучитьОбъект();
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументМатериалы.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументМатериалы.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли; 
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументМатериалы + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументМатериалы.ПометкаУдаления Тогда
						Попытка
							ДокументМатериалы.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументМатериалы.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументМатериалы = Документы.грзнтПланЗатратМатериаловКоличество.СоздатьДокумент();
					ДокументМатериалы.Дата = ТекущаяДата();
					ДокументМатериалы.Проект = Проект;
					ДокументМатериалы.ВидВерсииПлана = ВидВерсииПлана;
					ДокументМатериалы.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументМатериалы.УстановитьСсылкуНового(Документы.грзнтПланЗатратМатериаловКоличество.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументМатериалы = Новый Структура("Материалы", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
			ДокументМатериалы.Материалы.Очистить();
		Иначе
			ДокументМатериалы = Новый Структура("Материалы", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""План затрат материалов (количество)"" не записан - недостаточно прав по проекту";
		КонецЕсли;	
	Иначе
		ДокументМатериалы = Новый Структура("Материалы", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""План затрат материалов (количество)"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПланТрудозатратРолейЧасы Тогда
		Если ЕстьПраво("Документ.грзнтПланТрудозатратРолейЧасы", "Изменение") Тогда
			ДокументРоли = МассивРезультатов.Получить(5).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланТрудозатратРолейЧасы";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План трудозатрат по ролям (часы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументРоли) Тогда
				ДокументРоли = ДокументРоли.ПолучитьОбъект();
				
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументРоли.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументРоли.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументРоли + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументРоли.ПометкаУдаления Тогда
						Попытка
							ДокументРоли.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументРоли.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументРоли = Документы.грзнтПланТрудозатратРолейЧасы.СоздатьДокумент();
					ДокументРоли.Дата = ТекущаяДата();
					ДокументРоли.Проект = Проект;
					ДокументРоли.ВидВерсииПлана = ВидВерсииПлана;
					ДокументРоли.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументРоли.УстановитьСсылкуНового(Документы.грзнтПланТрудозатратРолейЧасы.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументРоли = Новый Структура("Роли", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
			ДокументРоли.Роли.Очистить();
		Иначе
			ДокументРоли = Новый Структура("Роли", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""План трудозатрат по ролям (часы)"" не записан - недостаточно прав по проекту";
		КонецЕсли;	
	Иначе
		ДокументРоли = Новый Структура("Роли", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""План трудозатрат по ролям (часы)"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПланТрудозатратРесурсовЧасы Тогда
		Если ЕстьПраво("Документ.грзнтПланТрудозатратРесурсовЧасы", "Изменение") Тогда
			ДокументРесурсы = МассивРезультатов.Получить(6).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланТрудозатратРесурсовЧасы";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План трудозатрат по ресурсам (часы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументРесурсы) Тогда
				ДокументРесурсы = ДокументРесурсы.ПолучитьОбъект();
				
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументРесурсы.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументРесурсы.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументРесурсы + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументРесурсы.ПометкаУдаления Тогда
						Попытка
							ДокументРесурсы.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументРесурсы.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументРесурсы = Документы.грзнтПланТрудозатратРесурсовЧасы.СоздатьДокумент();
					ДокументРесурсы.Дата = ТекущаяДата();
					ДокументРесурсы.Проект = Проект;
					ДокументРесурсы.ВидВерсииПлана = ВидВерсииПлана;
					ДокументРесурсы.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументРесурсы.УстановитьСсылкуНового(Документы.грзнтПланТрудозатратРесурсовЧасы.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументРесурсы = Новый Структура("ТрудовыеРесурсы", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
			ДокументРесурсы.ТрудовыеРесурсы.Очистить();
		Иначе
			ДокументРесурсы = Новый Структура("ТрудовыеРесурсы", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""План трудозатрат по ресурсам (часы)"" не записан - недостаточно прав по проекту";
		КонецЕсли;	
	Иначе
		ДокументРесурсы = Новый Структура("ТрудовыеРесурсы", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""План трудозатрат по ресурсам (часы)"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПланЗатратМатериаловСумма Тогда
		Если ЕстьПраво("Документ.грзнтПланЗатратМатериаловСумма", "Изменение") Тогда
			ДокументМатериалыСумма = МассивРезультатов.Получить(7).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланЗатратМатериаловСумма";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План затрат материалов (сумма)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументМатериалыСумма) Тогда
				ДокументМатериалыСумма = ДокументМатериалыСумма.ПолучитьОбъект();
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументМатериалыСумма.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументМатериалыСумма.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументМатериалыСумма + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументМатериалыСумма.ПометкаУдаления Тогда
						Попытка
							ДокументМатериалыСумма.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументМатериалыСумма.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументМатериалыСумма = Документы.грзнтПланЗатратМатериаловСумма.СоздатьДокумент();
					ДокументМатериалыСумма.Дата = ТекущаяДата();
					ДокументМатериалыСумма.Проект = Проект;
					ДокументМатериалыСумма.ВидВерсииПлана = ВидВерсииПлана;
					ДокументМатериалыСумма.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументМатериалыСумма.УстановитьСсылкуНового(Документы.грзнтПланЗатратМатериаловСумма.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументМатериалыСумма = Новый Структура("Материалы", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
			ДокументМатериалыСумма.Материалы.Очистить();
		Иначе
			ДокументМатериалыСумма = Новый Структура("Материалы", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""План затрат материалов (сумма)"" не записан - недостаточно прав по проекту";
		КонецЕсли;
	Иначе
		ДокументМатериалыСумма = Новый Структура("Материалы", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""План затрат материалов (сумма)"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПланТрудозатратРолейФинансы Тогда
		Если ЕстьПраво("Документ.грзнтПланТрудозатратРолейФинансы", "Изменение") Тогда
			ДокументРолиФинансы = МассивРезультатов.Получить(8).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланТрудозатратРолейФинансы";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План трудозатрат по ролям (финансы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументРолиФинансы) Тогда
				ДокументРолиФинансы = ДокументРолиФинансы.ПолучитьОбъект();
				
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументРолиФинансы.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументРолиФинансы.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументРолиФинансы + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументРолиФинансы.ПометкаУдаления Тогда
						Попытка
							ДокументРолиФинансы.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументРолиФинансы.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументРолиФинансы = Документы.грзнтПланТрудозатратРолейФинансы.СоздатьДокумент();
					ДокументРолиФинансы.Дата = ТекущаяДата();
					ДокументРолиФинансы.Проект = Проект;
					ДокументРолиФинансы.ВидВерсииПлана = ВидВерсииПлана;
					ДокументРолиФинансы.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументРолиФинансы.УстановитьСсылкуНового(Документы.грзнтПланТрудозатратРолейФинансы.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументРолиФинансы = Новый Структура("Роли", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
			ДокументРолиФинансы.Роли.Очистить();
		Иначе
			ДокументРолиФинансы = Новый Структура("Роли", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""План трудозатрат по ролям (финансы)"" не записан - недостаточно прав по проекту";
		КонецЕсли;
	Иначе
		ДокументРолиФинансы = Новый Структура("Роли", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""План трудозатрат по ролям (финансы)"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ПланТрудозатратРесурсовФинансы Тогда
		Если ЕстьПраво("Документ.грзнтПланТрудозатратРесурсовФинансы", "Изменение") Тогда
			ДокументРесурсыФинансы = МассивРезультатов.Получить(9).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтПланТрудозатратРесурсовФинансы";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("ЭкземплярВерсии", ЭкземплярВерсии);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""План трудозатрат по ресурсам (финансы)"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументРесурсыФинансы) Тогда
				ДокументРесурсыФинансы = ДокументРесурсыФинансы.ПолучитьОбъект();
				
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументРесурсыФинансы.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументРесурсыФинансы.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументРесурсыФинансы + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументРесурсыФинансы.ПометкаУдаления Тогда
						Попытка
							ДокументРесурсыФинансы.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументРесурсыФинансы.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументРесурсыФинансы = Документы.грзнтПланТрудозатратРесурсовФинансы.СоздатьДокумент();
					ДокументРесурсыФинансы.Дата = ТекущаяДата();
					ДокументРесурсыФинансы.Проект = Проект;
					ДокументРесурсыФинансы.ВидВерсииПлана = ВидВерсииПлана;
					ДокументРесурсыФинансы.ЭкземплярВерсии = ЭкземплярВерсии;
					ДокументРесурсыФинансы.УстановитьСсылкуНового(Документы.грзнтПланТрудозатратРесурсовФинансы.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументРесурсыФинансы = Новый Структура("ТрудовыеРесурсы", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
			ДокументРесурсыФинансы.ТрудовыеРесурсы.Очистить();
		Иначе
			ДокументРесурсыФинансы = Новый Структура("ТрудовыеРесурсы", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""План трудозатрат по ресурсам (финансы)"" не записан - недостаточно прав по проекту";
		КонецЕсли;
	Иначе
		ДокументРесурсыФинансы = Новый Структура("ТрудовыеРесурсы", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""План трудозатрат по ресурсам (финансы)"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ФактическийПроцентГотовности Тогда
		Если ЕстьПраво("Документ.грзнтФактическийПроцентГотовности", "Изменение") Тогда
			ДокументФактическийПроцент = МассивРезультатов.Получить(10).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтФактическийПроцентГотовности";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Проект", Проект);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""Фактические проценты готовности"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументФактическийПроцент) Тогда
				ДокументФактическийПроцент = ДокументФактическийПроцент.ПолучитьОбъект();
				
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументФактическийПроцент.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументФактическийПроцент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументФактическийПроцент + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументФактическийПроцент.ПометкаУдаления Тогда
						Попытка
							ДокументФактическийПроцент.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументФактическийПроцент.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументФактическийПроцент = Документы.грзнтФактическийПроцентГотовности.СоздатьДокумент();
					ДокументФактическийПроцент.Дата = ТекущаяДата();
					ДокументФактическийПроцент.Проект = Проект;
					ДокументФактическийПроцент.АвтоматическийДокумент = Истина;
					ДокументФактическийПроцент.УстановитьСсылкуНового(Документы.грзнтФактическийПроцентГотовности.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументФактическийПроцент = Новый Структура("ФактическиеПроценты", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			ДокументФактическийПроцент = Новый Структура("ФактическиеПроценты", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""Фактический процент готовности"" не записан - недостаточно прав по проекту";
		КонецЕсли;
	Иначе
		ДокументФактическийПроцент = Новый Структура("ФактическиеПроценты", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""Фактический процент готовности"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Если СтрПрав.Право_ФактическиеСроки Тогда
		Если ЕстьПраво("Документ.грзнтФактическиеСрокиПроекта", "Изменение") Тогда
			ДокументФактическиеСроки = МассивРезультатов.Получить(11).Ссылка;
			
			Если ИспользоватьУправляемуюБлокировку Тогда
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "Документ.грзнтФактическиеСрокиПроекта";
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				ЭлементБлокировки.УстановитьЗначение("Проект", Проект);
				Попытка
					Блокировка.Заблокировать();
				Исключение
					ТекстСообщения = "Ошибка блокировки документа ""Фактические сроки проекта"" при записи проекта, возможно, другие пользователи записывают документы по этому проекту!"
						+ Символы.ПС + "Информация: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
					ОтменитьТранзакцию();
					Возврат Ложь;
				КонецПопытки;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДокументФактическиеСроки) Тогда
				ДокументФактическиеСроки = ДокументФактическиеСроки.ПолучитьОбъект();
				
				Если ИспользоватьУправляемуюБлокировку Тогда
					Если ДокументФактическиеСроки.Проведен Тогда
						Попытка
							Если ОтменятьПроведение Тогда
								ДокументФактическиеСроки.Записать(РежимЗаписиДокумента.ОтменаПроведения);
							КонецЕсли;
						Исключение
							ТекстСообщения = "Ошибка распроведения документа: " + ДокументФактическиеСроки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
							Возврат Ложь;
						КонецПопытки;
					КонецЕсли;
					Если ДокументФактическиеСроки.ПометкаУдаления Тогда
						Попытка
							ДокументФактическиеСроки.УстановитьПометкуУдаления(Ложь);
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
				ДокументФактическиеСроки.Дата = ТекущаяДата();
			Иначе
				Попытка
					ДокументФактическиеСроки = Документы.грзнтФактическиеСрокиПроекта.СоздатьДокумент();
					ДокументФактическиеСроки.Дата = ТекущаяДата();
					ДокументФактическиеСроки.Проект = Проект;
					ДокументФактическиеСроки.АвтоматическийДокумент = Истина;
					ДокументФактическиеСроки.УстановитьСсылкуНового(Документы.грзнтФактическиеСрокиПроекта.ПолучитьСсылку(Новый УникальныйИдентификатор));
				Исключение
					ДокументФактическиеСроки = Новый Структура("СрокиПроекта", ПустаяТаблицаДокумента);
				КонецПопытки;
			КонецЕсли;
			
		Иначе
			ДокументФактическиеСроки = Новый Структура("СрокиПроекта", ПустаяТаблицаДокумента);
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Документ ""Фактические сроки проекта"" не записан - недостаточно прав по проекту";
		КонецЕсли;
	Иначе
		ДокументФактическиеСроки = Новый Структура("СрокиПроекта", ПустаяТаблицаДокумента);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документ ""Фактические сроки проекта"" не записан - недостаточно системных прав";
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПометкуИзменений(ЭтаФорма)
	Для Каждого СтрокаТаблицы ИЗ ЭтаФорма.ТаблицаПроектаКопия Цикл
		Если СтрокаТаблицы.ДатаНачалаВыделено ИЛИ СтрокаТаблицы.ДатаОкончанияВыделено ИЛИ СтрокаТаблицы.ДлительностьВыделено Тогда
			Если СтрокаТаблицы.Идентификатор >= 0 Тогда
				СтрокаДерева = ЭтаФорма.ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
			КонецЕсли;
			Если СтрокаДерева <> Неопределено Тогда
				СтрокаДерева.ДатаНачалаВыделено = Ложь;
				СтрокаТаблицы.ДатаНачалаВыделено = Ложь;
				
				СтрокаДерева.ДатаОкончанияВыделено = Ложь;
				СтрокаТаблицы.ДатаОкончанияВыделено = Ложь;
				
				СтрокаДерева.ДлительностьВыделено = Ложь;
				СтрокаТаблицы.ДлительностьВыделено = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровДляОткрытияФормыРедактированияЗадачиНаКлиенте(УИД, Родитель)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииОкнаВладельца", Истина);
	СтруктураПараметров.Вставить("УИД", УИД);
	СтруктураПараметров.Вставить("Родитель", Родитель);
	СтруктураПараметров.Вставить("Проект", Проект);
	СтруктураПараметров.Вставить("ИмяФормыРедактирования", ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаЗадачиПроекта");
	// loza [01.12.15
	СтруктураПараметров.Вставить("ПраваПользователяПоПроекту", ПраваПользователяПоПроекту);
	СтруктураПараметров.Вставить("ПроверятьПраваНаТаблицы", ПроверятьПраваНаТаблицы);
	// 01.12.15] loza
	Если Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьПредшественники ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьПредшественникиПоНомеруСтроки
		ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьПоследователи ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаНадписьПоследователиПоНомеруСтроки Тогда
		СтруктураПараметров.Вставить("Страница", "Предшественники");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаПоступление ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаПоступлениеУпр Тогда
		СтруктураПараметров.Вставить("Страница", "ДДС");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаВыплата ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаВыплатаУпр Тогда
		СтруктураПараметров.Вставить("Страница", "ДДС");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаДоход ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаДоходУпр Тогда
		СтруктураПараметров.Вставить("Страница", "Доходы");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРасход ИЛИ Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРасходУпр Тогда
		СтруктураПараметров.Вставить("Страница", "Расходы");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРоли Тогда
		СтруктураПараметров.Вставить("Страница", "Роли");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаКоличествоРоли Тогда
		СтруктураПараметров.Вставить("Страница", "Роли");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаРесурсы Тогда
		СтруктураПараметров.Вставить("Страница", "Ресурсы");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаКоличествоРесурсы Тогда
		СтруктураПараметров.Вставить("Страница", "Ресурсы");
	ИначеЕсли Элементы.ДеревоПроекта.ТекущийЭлемент = Элементы.ДеревоПроектаСуммаМатериалы Тогда
		СтруктураПараметров.Вставить("Страница", "Материалы");
	Иначе
	КонецЕсли;
	Возврат СтруктураПараметров;
КонецФункции

&НаСервере
Функция ВыполнитьОтражениеЗадачиВЭкземпляреВерсииНаСервере(ЭкземплярПриемник, УИД, СтруктураПараметров)
	ТаблицаПроектаТаблица = ТаблицаПроектаКопия.Выгрузить();
	
	СтрокаТаблицыПроекта = ТаблицаПроектаТаблица.Найти(УИД, "УИД");
	Если СтрокаТаблицыПроекта= Неопределено Тогда
		Возврат "Не найдена задача в таблице проекта.";
	КонецЕсли;
	//Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
	//	ТекущийУзелДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
	//	Если ТекущийУзелДерева = Неопределено Тогда
	//		Возврат "Не найден узел дерева в дереве проекта.";
	//	КонецЕсли;
	//КонецЕсли;
	ТекстСообщения = "";
	Если НЕ СоздатьНедостающиеПроекты(ТекстСообщения) Тогда
		Возврат "Ошибка записи структуры проекта." + Символы.ПС + ТекстСообщения;
	КонецЕсли;
	
	ТаблицаПроектаПриемник = грзнтСДРПроектаСервер.ПолучитьДанныеСДРДляЭкземпляраВерсииТаблицей(ЭкземплярПриемник);
	Если ТаблицаПроектаПриемник.НайтиСтроки(Новый Структура("Задача", СтрокаТаблицыПроекта.Задача)).Количество() > 0 Тогда
		Возврат "Выбранная задача уже отражена в выбранном экземпляре версии";
	КонецЕсли;
	
	// Таблица переносимых узлов = просто список задач для переноса, с учётом подчиненных и родителей
	ТаблицаПереносимыхУзлов = Новый ТаблицаЗначений;
	ТаблицаПереносимыхУзлов.Колонки.Добавить("ИсходныйУзел");
	ТаблицаПереносимыхУзлов.Колонки.Добавить("Родитель");
	ТаблицаПереносимыхУзлов.Колонки.Добавить("УИД");
	
	ТаблицаПереносимыхУзлов.Добавить().ИсходныйУзел = СтрокаТаблицыПроекта.Задача;
	ТаблицаПереносимыхУзлов.Получить(0).УИД = СтрокаТаблицыПроекта.УИД;
	
	Если СтруктураПараметров.Свойство("ПереноситьЗадачаВместеСПодчиненными") И СтруктураПараметров.ПереноситьЗадачаВместеСПодчиненными Тогда
		// Для корневого переносимого смотрим родителя. Если он есть в отражаемой версии, то переносим в родителя. Если нет, переносим в корень
		//СтрокаРодитель = ТаблицаПроектаТаблица.Найти(СтрокаТаблицыПроекта.Родитель, "УИД");
		//Если СтрокаРодитель <> Неопределено Тогда
		//	СтрокаПриемник = ТаблицаПроектаПриемник.Найти(СтрокаРодитель.Задача, "Задача");
		//КонецЕсли;
		//
		//Если СтрокаПриемник = Неопределено Тогда
		//	ТаблицаПереносимыхУзлов.Получить(0).Родитель = Проект;
		//Иначе
		//	ТаблицаПереносимыхУзлов.Получить(0).Родитель = СтрокаПриемник.Задача;
		//КонецЕсли;
			
		// Для каждого нижестоящего смотрим родителя, потом выбираем ещё подчиненных и добавляем в массив. 
		МассивПодчиненных = ТаблицаПроектаТаблица.НайтиСтроки(Новый Структура("Родитель", СтрокаТаблицыПроекта.УИД));
		Пока МассивПодчиненных.Количество() > 0 Цикл
			СтрокаНижестоящий = МассивПодчиненных.Получить(0);
			СтрокаРодитель = ТаблицаПроектаТаблица.Найти(СтрокаНижестоящий.Родитель, "УИД");
			
			// Если по каким-то причинам нижестоящая задача 
			Если ТаблицаПроектаПриемник.Найти(СтрокаНижестоящий.Задача) = Неопределено Тогда
				СтрокаПереносимый = ТаблицаПереносимыхУзлов.Добавить();
				СтрокаПереносимый.ИсходныйУзел = СтрокаНижестоящий.Задача;
				СтрокаПереносимый.УИД = СтрокаНижестоящий.УИД;
				СтрокаПереносимый.Родитель = СтрокаРодитель.Задача;
			КонецЕсли;
			
			СтрокиПодчиненные = ТаблицаПроектаТаблица.НайтиСтроки(Новый Структура("Родитель", СтрокаНижестоящий.УИД));
			Для Каждого СтрокаПодчиненный ИЗ СтрокиПодчиненные Цикл
				МассивПодчиненных.Добавить(СтрокаПодчиненный);
			КонецЦикла;
			
			МассивПодчиненных.Удалить(0);
		КонецЦикла;
	КонецЕсли;
	
	// Получим родителя текущей задачи
	СтрокаРодитель = ТаблицаПроектаТаблица.Найти(СтрокаТаблицыПроекта.Родитель, "УИД");
	
	Если СтруктураПараметров.Свойство("ПереноситьЗадачуВместеСРодителями") Тогда
		// пока можем найти родителя 
		Пока СтрокаРодитель <> Неопределено Цикл
			// поставим родителя предыдущей записи
			ТаблицаПереносимыхУзлов.Получить(0).Родитель = СтрокаРодитель.Задача;
			СтрокаПриемник = ТаблицаПроектаПриемник.Найти(СтрокаРодитель.Задача, "Задача");
			Если СтрокаПриемник <> Неопределено Тогда
				// нашли общего родителя в обоих экземплярах
				Прервать;
			КонецЕсли;
			ТаблицаПереносимыхУзлов.Вставить(0).ИсходныйУзел = СтрокаРодитель.Задача;
			ТаблицаПереносимыхУзлов.Получить(0).УИД = СтрокаРодитель.УИД;
			
			СтрокаРодитель = ТаблицаПроектаТаблица.Найти(СтрокаРодитель.Родитель, "УИД");
		КонецЦикла;
	Иначе 
		СтрокаПриемник = ТаблицаПроектаПриемник.Найти(СтрокаРодитель.Задача, "Задача");
	КонецЕсли;
	
	Если СтрокаПриемник = Неопределено Тогда
		ТаблицаПереносимыхУзлов.Получить(0).Родитель = Проект;
	Иначе
		ТаблицаПереносимыхУзлов.Получить(0).Родитель = СтрокаПриемник.Задача;
	КонецЕсли;
	
	ЗапросДокумента = Новый Запрос;
	ЗапросДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтСДРПроекта КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр";
	ЗапросДокумента.УстановитьПараметр("Экземпляр", ЭкземплярПриемник);
	ВыборкаДокумента = ЗапросДокумента.Выполнить().Выбрать();
	Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
		ДокументСДР = Документы.грзнтСДРПроекта.СоздатьДокумент();
		ДокументСДР.Дата = ТекущаяДата();
		ДокументСДР.Проект = Проект;
		ДокументСДР.ВидВерсииПлана = ВидВерсииПлана;
		ДокументСДР.ЭкземплярВерсии = ЭкземплярПриемник;
		ДокументСДР.СДРПроекта.Добавить().Задача = Проект;
	Иначе
		ДокументСДР = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗапросДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПлановыеСрокиПроекта КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр";
	ЗапросДокумента.УстановитьПараметр("Экземпляр", ЭкземплярПриемник);
	ВыборкаДокумента = ЗапросДокумента.Выполнить().Выбрать();
	Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
		ДокументСроки = Документы.грзнтПлановыеСрокиПроекта.СоздатьДокумент();
		ДокументСроки.Дата = ТекущаяДата();
		ДокументСроки.Проект = Проект;
		ДокументСроки.ВидВерсииПлана = ВидВерсииПлана;
		ДокументСроки.ЭкземплярВерсии = ЭкземплярПриемник;
		ДокументСроки.СрокиПроекта.Добавить().Задача = Проект;
	Иначе
		ДокументСроки = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	// ДДС
	Если СтруктураПараметров.Свойство("ПереноситьДДС") И СтруктураПараметров.ПереноситьДДС Тогда
		ЗапросДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПланДвиженияДенежныхСредствПроекта КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр";
		ЗапросДокумента.УстановитьПараметр("Экземпляр", ЭкземплярПриемник);
		ВыборкаДокумента = ЗапросДокумента.Выполнить().Выбрать();
		Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
			ДокументДДС = Документы.грзнтПланДвиженияДенежныхСредствПроекта.СоздатьДокумент();
			ДокументДДС.Дата = ТекущаяДата();
			ДокументДДС.Проект = Проект;
			ДокументДДС.ВидВерсииПлана = ВидВерсииПлана;
			ДокументДДС.ЭкземплярВерсии = ЭкземплярПриемник;
		Иначе
			ДокументДДС = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		//Если СтруктураВыбора.ПереноситьДДС Тогда
		//Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланДДС Цикл
	КонецЕсли;
	
	// Доходы/расходы
	Если СтруктураПараметров.Свойство("ПереноситьДоходы") И СтруктураПараметров.ПереноситьДоходы
		ИЛИ СтруктураПараметров.Свойство("ПереноситьРасходы") И СтруктураПараметров.ПереноситьРасходы Тогда
		ЗапросДокумента.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПланДоходовРасходовПроекта КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр";
		ЗапросДокумента.УстановитьПараметр("Экземпляр", ЭкземплярПриемник);
		ВыборкаДокумента = ЗапросДокумента.Выполнить().Выбрать();
		Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
			ДокументДР = Документы.грзнтПланДоходовРасходовПроекта.СоздатьДокумент();
			ДокументДР.Дата = ТекущаяДата();
			ДокументДР.Проект = Проект;
			ДокументДР.ВидВерсииПлана = ВидВерсииПлана;
			ДокументДР.ЭкземплярВерсии = ЭкземплярПриемник;
		Иначе
			ДокументДР = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		//Если СтруктураВыбора.ПереноситьДоходы Тогда
		//Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланДоходы Цикл
		//Если СтруктураВыбора.ПереноситьРасходы Тогда
		//Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланРасходы Цикл
	КонецЕсли;
	
	// Роли
	Если СтруктураПараметров.Свойство("ПереноситьТрудозатратыПоРолям") И СтруктураПараметров.ПереноситьТрудозатратыПоРолям Тогда
		ЗапросДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПланТрудозатратРолейЧасы КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПланТрудозатратРолейФинансы КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр";
		ЗапросДокумента.УстановитьПараметр("Экземпляр", ЭкземплярПриемник);
		МассивРезультатов = ЗапросДокумента.ВыполнитьПакет();
		
		ВыборкаДокумента = МассивРезультатов.Получить(0).Выбрать();
		Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
			ДокументРолиЧасы = Документы.грзнтПланТрудозатратРолейЧасы.СоздатьДокумент();
			ДокументРолиЧасы.Дата = ТекущаяДата();
			ДокументРолиЧасы.Проект = Проект;
			ДокументРолиЧасы.ВидВерсииПлана = ВидВерсииПлана;
			ДокументРолиЧасы.ЭкземплярВерсии = ЭкземплярПриемник;
		Иначе
			ДокументРолиЧасы = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		ВыборкаДокумента = МассивРезультатов.Получить(1).Выбрать();
		Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
			ДокументРолиФинансы = Документы.грзнтПланТрудозатратРолейФинансы.СоздатьДокумент();
			ДокументРолиФинансы.Дата = ТекущаяДата();
			ДокументРолиФинансы.Проект = Проект;
			ДокументРолиФинансы.ВидВерсииПлана = ВидВерсииПлана;
			ДокументРолиФинансы.ЭкземплярВерсии = ЭкземплярПриемник;
		Иначе
			ДокументРолиФинансы = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		//Если СтруктураВыбора.ПереноситьТрудозатратыПоРолям Тогда
		//Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланТрудозатратыРолей Цикл
	КонецЕсли;
	
	// Ресурсы
	Если СтруктураПараметров.Свойство("ПереноситьТрудозатратыПоРесурсам") И СтруктураПараметров.ПереноситьТрудозатратыПоРесурсам Тогда
		ЗапросДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПланТрудозатратРесурсовЧасы КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПланТрудозатратРесурсовФинансы КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр";
		ЗапросДокумента.УстановитьПараметр("Экземпляр", ЭкземплярПриемник);
		МассивРезультатов = ЗапросДокумента.ВыполнитьПакет();
		
		ВыборкаДокумента = МассивРезультатов.Получить(0).Выбрать();
		Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
			ДокументРесурсыЧасы = Документы.грзнтПланТрудозатратРесурсовЧасы.СоздатьДокумент();
			ДокументРесурсыЧасы.Дата = ТекущаяДата();
			ДокументРесурсыЧасы.Проект = Проект;
			ДокументРесурсыЧасы.ВидВерсииПлана = ВидВерсииПлана;
			ДокументРесурсыЧасы.ЭкземплярВерсии = ЭкземплярПриемник;
		Иначе
			ДокументРесурсыЧасы = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		ВыборкаДокумента = МассивРезультатов.Получить(1).Выбрать();
		Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
			ДокументРесурсыФинансы = Документы.грзнтПланТрудозатратРесурсовФинансы.СоздатьДокумент();
			ДокументРесурсыФинансы.Дата = ТекущаяДата();
			ДокументРесурсыФинансы.Проект = Проект;
			ДокументРесурсыФинансы.ВидВерсииПлана = ВидВерсииПлана;
			ДокументРесурсыФинансы.ЭкземплярВерсии = ЭкземплярПриемник;
		Иначе
			ДокументРесурсыФинансы = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		//Если СтруктураВыбора.ПереноситьТрудозатратыПоРесурсам Тогда
		//Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланТрудозатратыРесурсоы Цикл
	КонецЕсли;
	
	// Материалы
	Если СтруктураПараметров.Свойство("ПереноситьМатериалы") И СтруктураПараметров.ПереноситьМатериалы Тогда
		ЗапросДокумента.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПланЗатратМатериаловКоличество КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр;
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ Док.Ссылка ИЗ Документ.грзнтПланЗатратМатериаловСумма КАК Док ГДЕ Док.ЭкземплярВерсии = &Экземпляр";
		ЗапросДокумента.УстановитьПараметр("Экземпляр", ЭкземплярПриемник);
		МассивРезультатов = ЗапросДокумента.ВыполнитьПакет();
		
		ВыборкаДокумента = МассивРезультатов.Получить(0).Выбрать();
		Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
			ДокументМатериалыКоличество = Документы.грзнтПланЗатратМатериаловКоличество.СоздатьДокумент();
			ДокументМатериалыКоличество.Дата = ТекущаяДата();
			ДокументМатериалыКоличество.Проект = Проект;
			ДокументМатериалыКоличество.ВидВерсииПлана = ВидВерсииПлана;
			ДокументМатериалыКоличество.ЭкземплярВерсии = ЭкземплярПриемник;
		Иначе
			ДокументМатериалыКоличество = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		ВыборкаДокумента = МассивРезультатов.Получить(1).Выбрать();
		Если НЕ ВыборкаДокумента.Следующий() ИЛИ НЕ ЗначениеЗаполнено(ВыборкаДокумента.Ссылка) Тогда
			ДокументМатериалыСумма = Документы.грзнтПланЗатратМатериаловСумма.СоздатьДокумент();
			ДокументМатериалыСумма.Дата = ТекущаяДата();
			ДокументМатериалыСумма.Проект = Проект;
			ДокументМатериалыСумма.ВидВерсииПлана = ВидВерсииПлана;
			ДокументМатериалыСумма.ЭкземплярВерсии = ЭкземплярПриемник;
		Иначе
			ДокументМатериалыСумма = ВыборкаДокумента.Ссылка.ПолучитьОбъект();
		КонецЕсли;
		//Если СтруктураВыбора.ПереноситьМатериалы Тогда
		//Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланМатериалы Цикл
	КонецЕсли;
	
	//Для К = 1 По ТаблицаПереносимыхУзлов.Количество() Цикл
	Пока ТаблицаПереносимыхУзлов.Количество() > 0 Цикл
		СтрокаПереносимыхУзлов = ТаблицаПереносимыхУзлов.Получить(0);
		СтрокаДокументаСДР = ДокументСДР.СДРПроекта.Добавить();
		СтрокаДокументаСДР.Задача = СтрокаПереносимыхУзлов.ИсходныйУзел;
		СтрокаДокументаСДР.Родитель = СтрокаПереносимыхУзлов.Родитель;
		
		СтрокиСроковРодитель = ДокументСроки.СрокиПроекта.НайтиСтроки(Новый Структура("Задача", СтрокаПереносимыхУзлов.Родитель));
		СтрокаДокументаСроков = ДокументСроки.СрокиПроекта.Добавить();
		СтрокаДокументаСроков.Задача = СтрокаПереносимыхУзлов.ИсходныйУзел;
		Если СтрокиСроковРодитель.Количество() > 0 Тогда
			СтрокаДокументаСроков.ДатаНачала = СтрокиСроковРодитель.Получить(0).ДатаНачала;
		Иначе
			СтрокиСроковРодитель = ДокументСроки.СрокиПроекта.НайтиСтроки(Новый Структура("Задача", Проект));
			Если СтрокиСроковРодитель.Количество() > 0 Тогда
				СтрокаДокументаСроков.ДатаНачала = СтрокиСроковРодитель.Получить(0).ДатаНачала;
			Иначе
				СтрокаДокументаСроков.ДатаНачала = ТекущаяДата();;
			КонецЕсли;
		КонецЕсли;
		СтрокаДокументаСроков.ДатаОкончания = СтрокаДокументаСроков.ДатаНачала;
		СтрокаДокументаСроков.Длительность = 1;
		Если КалендарьПроекта.СуточныйКалендарь Тогда
			СтрокаДокументаСроков.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Сутки");
		Иначе
			СтрокаДокументаСроков.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень");
		КонецЕсли;
		
		Если СтруктураПараметров.ПереноситьСрокиИДлительность Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураПараметров.ПлановыеСроки Цикл
				Если СтруктураПлана.УИД = СтрокаПереносимыхУзлов.УИД Тогда
					ЗаполнитьЗначенияСвойств(СтрокаДокументаСроков, СтруктураПлана, "ДатаНачала, ДатаОкончания, Длительность, ЕдиницаВремени, Календарь, РучнойВвод, ОграничениеСроковЗадачи, ДатаОграниченияСроковЗадачи");
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.ПереноситьДДС Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураПараметров.ПланДДС Цикл
				Если СтруктураПлана.Задача = СтрокаДокументаСроков.Задача Тогда
					СтрокаДокумента = ДокументДДС.ДвиженияДенежныхСредств.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.ПереноситьДоходы Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураПараметров.ПланДоходы Цикл
				СтрокаДокумента = ДокументДР.ПланДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.ПереноситьРасходы Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураПараметров.ПланРасходы Цикл
				СтрокаДокумента = ДокументДР.ПланРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.ПереноситьТрудозатратыПоРолям Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураПараметров.ПланТрудозатратыРолей Цикл
				СтрокаДокумента = ДокументРолиЧасы.Роли.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
				
				СтрокаДокумента = ДокументРолиФинансы.Роли.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.ПереноситьТрудозатратыПоРесурсам Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураПараметров.ПланТрудозатратРесурсов Цикл
				СтрокаДокумента = ДокументРесурсыЧасы.ТрудовыеРесурсы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
				
				СтрокаДокумента = ДокументРесурсыФинансы.ТрудовыеРесурсы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.ПереноситьМатериалы Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураПараметров.ПланМатериалы Цикл
				СтрокаДокумента = ДокументМатериалыКоличество.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
				
				СтрокаДокумента = ДокументМатериалыСумма.Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДокумента, СтруктураПлана);
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаПереносимыхУзлов.Удалить(0);
	КонецЦикла;
	
	Попытка
		Если ДокументСДР.СДРПроекта.Количество() > 0 ИЛИ НЕ ДокументСДР.ЭтоНовый() Тогда
			ДокументСДР.ПересчитатьСДРПроекта();
			ДокументСДР.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ТекстСообщения = "Ошибка записи документа ""Плановые сроки проекта""" + Символы.ПС + ОписаниеОшибки();
		Возврат ТекстСообщения;
	КонецПопытки;
	
	Попытка
		Если ДокументСроки.СрокиПроекта.Количество() > 0 ИЛИ НЕ ДокументСроки.ЭтоНовый() Тогда
			ДокументСроки.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		ТекстСообщения = "Ошибка записи документа ""Плановые сроки проекта""" + Символы.ПС + ОписаниеОшибки();
		Возврат ТекстСообщения;
	КонецПопытки;
	
	Если СтруктураПараметров.ПереноситьДДС Тогда
		Попытка
			Если ДокументДДС.ДвиженияДенежныхСредств.Количество() > 0 ИЛИ НЕ ДокументДДС.ЭтоНовый() Тогда
				ДокументДДС.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План движения денежных средств проекта""" + Символы.ПС + ОписаниеОшибки();
			Возврат ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
		
	Если СтруктураПараметров.ПереноситьДоходы ИЛИ СтруктураПараметров.ПереноситьРасходы Тогда
		Попытка
			Если ДокументДР.ПланДоходов.Количество() > 0 ИЛИ ДокументДР.ПланРасходов.Количество() > 0 ИЛИ НЕ ДокументДР.ЭтоНовый() Тогда
				ДокументДР.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План доходов и расходов проекта""" + Символы.ПС + ОписаниеОшибки();
			Возврат ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
		
	Если СтруктураПараметров.ПереноситьТрудозатратыПоРолям Тогда
		Попытка
			Если ДокументРолиЧасы.Роли.Количество() > 0 ИЛИ НЕ ДокументРолиЧасы.ЭтоНовый() Тогда
				ДокументРолиЧасы.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План трудозатрат по ролям (часы)""" + Символы.ПС + ОписаниеОшибки();
			Возврат ТекстСообщения;
		КонецПопытки;
		Попытка
			Если ДокументРолиФинансы.Роли.Количество() > 0 ИЛИ НЕ ДокументРолиФинансы.ЭтоНовый() Тогда
				ДокументРолиФинансы.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План трудозатрат по ролям (финансы)""" + Символы.ПС + ОписаниеОшибки();
			Возврат ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
	
	Если СтруктураПараметров.ПереноситьТрудозатратыПоРесурсам Тогда
		Попытка
			Если ДокументРесурсыЧасы.ТрудовыеРесурсы.Количество() > 0 ИЛИ НЕ ДокументРесурсыЧасы.ЭтоНовый() Тогда
				ДокументРесурсыЧасы.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План трудозатрат по ресурсам (часы)""" + Символы.ПС + ОписаниеОшибки();
			Возврат ТекстСообщения;
		КонецПопытки;
		Попытка
			Если ДокументРесурсыФинансы.ТрудовыеРесурсы.Количество() > 0 ИЛИ НЕ ДокументРесурсыФинансы.ЭтоНовый() Тогда
				ДокументРесурсыФинансы.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План трудозатрат по ресурсам (финансы)""" + Символы.ПС + ОписаниеОшибки();
			Возврат ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
	
	Если СтруктураПараметров.ПереноситьМатериалы Тогда
		Попытка
			Если ДокументМатериалыКоличество.Материалы.Количество() > 0 ИЛИ НЕ ДокументМатериалыКоличество.ЭтоНовый() Тогда
				ДокументМатериалыКоличество.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План затрат материалов (количество)""" + Символы.ПС + ОписаниеОшибки();
			Возврат ТекстСообщения;
		КонецПопытки;
		Попытка
			Если ДокументМатериалыСумма.Материалы.Количество() > 0 ИЛИ НЕ ДокументМатериалыСумма.ЭтоНовый() Тогда
				ДокументМатериалыСумма.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
		Исключение
			ТекстСообщения = "Ошибка записи документа ""План затрат материалов (сумма)""" + Символы.ПС + ОписаниеОшибки();
			Возврат ТекстСообщения;
		КонецПопытки;
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРеквизитОбъекта(ИсходныйОбъект, НаименованиеРеквизита);
	Попытка
		Возврат ИсходныйОбъект[НаименованиеРеквизита];
	Исключение
		Возврат 0;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровДляОткрытияФормыВыбораЗадачиНаКлиенте(УИД, РодительЗадачиУИД)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииОкнаВладельца", Истина);
	СтруктураПараметров.Вставить("ТекущийУИД", УИД);
	СтруктураПараметров.Вставить("ПредшественникУИД", РодительЗадачиУИД);
	СтруктураПараметров.Вставить("ИмяФормыРедактирования", ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаВыбораЗадачи");
	Возврат СтруктураПараметров;
КонецФункции

&НаКлиенте
Функция ПодготовитьСтруктуруПараметровДляОткрытияФормыВыбораПредшественникаНаКлиенте(ТекущийУИД)
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииОкнаВладельца", Истина);
	СтруктураПараметров.Вставить("ТекущийУИД", Элементы.ДеревоПроекта.ТекущиеДанные.УИД);
	СтруктураПараметров.Вставить("ПредшественникУИД", Элементы.ТаблицаПредшественники.ТекущиеДанные.ПредшественникУИД);
	СтруктураПараметров.Вставить("Проект", Проект);
	СтруктураПараметров.Вставить("ИмяФормыРедактирования", ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаВыбораЗадачи");
	Возврат СтруктураПараметров;
КонецФункции

&НаКлиенте
Процедура СкопироватьДанныеУзла(ПриемникУИД, ИсточникУИД)
	// тут мы найдём строки по УИД
	СтрокаПриемник = тСоответствиеТаблицыУИД.Получить(ПриемникУИД);
	СтрокаИсточник = тСоответствиеТаблицыУИД.Получить(ИсточникУИД);
	Если СтрокаИсточник = Неопределено ИЛИ СтрокаПриемник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачатьДействие();
	СписокСообщенийСерверу.Очистить();
	
	// скопируем всякие ограничения и прочую ерунду
	СтруктураРеквизитов = Новый Структура("ДатаНачала, ДатаОкончания, РучнойВвод, Длительность, ЕдиницаВремени, Календарь, ПДН, ПДО, РДН, РДО, ВидОперации,"
		"КритическийПуть, ПроцентГотовности, ТипОграничения, ДатаОграничения, ФактическаяДатаНачала, ФактическаяДатаОкончания, ФактическаяДлительность, ДлительностьПлан");
	Для Каждого КлючИЗначение ИЗ СтруктураРеквизитов Цикл
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПриемник, КлючИЗначение.Ключ, СтрокаИсточник[КлючИЗначение.Ключ]);
	КонецЦикла;
	
	СтруктураРеквизитов = Новый Структура("Длительность, ДатаНачала, ДатаОкончания, РучнойВвод, ЕдиницаВремени, Календарь, ТипОграничения, ДатаОграничения, ФактическаяДатаНачала, ФактическаяДатаОкончания");
	Для Каждого КлючИЗначение ИЗ СтруктураРеквизитов Цикл
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", СтрокаПриемник.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", КлючИЗначение.Ключ);
		СообщениеСерверу.Вставить("НовоеЗначение", СтрокаИсточник[КлючИЗначение.Ключ]);
		СписокСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЦикла;
	
	// Если нед подчиненных элементов, то мы можем быть вехой или задачей, иначе - мы просто группа
	ЭлементыДерева = тСоответствиеТаблицыРодитель.Получить(ПриемникУИД);
	Если ЭлементыДерева = Неопределено ИЛИ ЭлементыДерева.Количество() = 0 Тогда 
		ЭлементыДерева = тСоответствиеТаблицыРодитель.Получить(ИсточникУИД);
		Если ЭлементыДерева = Неопределено ИЛИ ЭлементыДерева.Количество() = 0 Тогда 
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПриемник, "ВидЭлемента", СтрокаИсточник.ВидЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	// перед копированием новых данных нам нужно очистить старые плановые
	СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
	МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПриемник.УИД);
	Если МассивПредшественники = Неопределено Тогда
		МассивПредшественники = Новый Массив;
	КонецЕсли;
	Для Каждого СвязьПредшественник ИЗ МассивПредшественники Цикл
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
		СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", СтрокаПриемник.УИД, СвязьПредшественник.ПредшественникУИД));
		СписокСообщенийСерверу.Добавить(СообщениеСерверу);
		
		МассивПоследователи = тСоответствиеПредшественникиПредшественникУИД.Получить(СвязьПредшественник.ПредшественникУИД);
		Если МассивПоследователи = Неопределено Тогда
			МассивПоследователи = Новый Массив;
		КонецЕсли;
		Для Каждого СвязьПоследователь ИЗ МассивПоследователи Цикл
			Если СвязьПоследователь.УИД = СвязьПредшественник.УИД Тогда
				МассивПоследователи.Удалить(МассивПоследователи.Найти(СвязьПоследователь));
				Прервать;
			КонецЕсли;
		КонецЦикла;
		тСоответствиеПредшественникиПредшественникУИД.Вставить(СвязьПредшественник.ПредшественникУИД, МассивПоследователи);
		ТаблицаПредшественники.Удалить(СвязьПредшественник);
		Если СписокУИДПредшественикиДляПересчетаПоследователи.НайтиПоЗначению(СвязьПредшественник.ПредшественникУИД) = Неопределено Тогда
			СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СвязьПредшественник.ПредшественникУИД);
		КонецЕсли;
	КонецЦикла;
	МассивПредшественники.Очистить();
	тСоответствиеПредшественникиУИД.Вставить(СтрокаПриемник.УИД, МассивПредшественники);
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	СтрокаПриемник.ТаблицаПредшественники.Очистить();
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДвиженияДенежныхСредств");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	СтрокаПриемник.ПланДвиженияДенежныхСредств.Очистить();
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланДоходов");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	СтрокаПриемник.ПланДоходов.Очистить();
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРасходов");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	СтрокаПриемник.ПланРасходов.Очистить();
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланМатериаловОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	СтрокаПриемник.ПланМатериаловОбщая.Очистить();
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРесурсовОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	СтрокаПриемник.ПланРесурсовОбщая.Очистить();
	
	ОписаниеСобытия = Новый Структура;
	ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
	ОписаниеСобытия.Вставить("ИмяТаблицы", "ПланРолейОбщая");
	ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
	ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
	СтрокаПриемник.ПланРолейОбщая.Очистить();
	
	// а вот теперь копируем новые плановые
	СкопироватьПлановыеДанные(СтрокаИсточник, СтрокаПриемник, Ложь, СписокСообщенийСерверу);
	
	ТаблицаПредшественникиСинхронизироватьСоответствия(СтрокаПриемник);
		
	СтруктураНадписей = СформироватьНадписьПредшественники(СтрокаПриемник);
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПриемник, "НадписьПредшественники", СтруктураНадписей.Надпись);
	ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПриемник, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписей.НадписьПоНомеруСтроки);
	ПолеПредшественники = СтрокаПриемник.НадписьПредшественникиПоНомеруСтроки;
	
	Для Каждого СвязьПредшественник ИЗ СтрокаПриемник.ТаблицаПредшественники Цикл
		Если СписокУИДПредшественикиДляПересчетаПоследователи.НайтиПоЗначению(СвязьПредшественник.ПредшественникУИД) = Неопределено Тогда
			СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СвязьПредшественник.ПредшественникУИД);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ЭлементСпискаПредшественник ИЗ СписокУИДПредшественикиДляПересчетаПоследователи Цикл
		СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(ЭлементСпискаПредшественник.Значение);
		Если СтрокаПредшественник = Неопределено ИЛИ СтрокаПредшественник.Внешний Тогда
			Продолжить;
		КонецЕсли;
		СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаПредшественник);
		СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
		ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
		ОписаниеСобытия.Вставить("УИД", СтрокаПредшественник.УИД);
		ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
	КонецЦикла;
	СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
	
	МассивСообщенийСерверу = СписокСообщенийСерверу.ВыгрузитьЗначения();
	Если МассивсообщенийСерверу.Количество() > 0 Тогда
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);
	КонецЕсли;
	
	ПосчитатьИтогиПоКолонкам(, СтрокаПриемник.УИД);
	ПосчитатьИтогиВалютыПоКолонкам(, СтрокаПриемник.УИД);
	//ПосчитатьИтогиПроцентовПоКолонкам(, СтрокаПриемник.УИД);
	ПосчитатьИтогиПроцентовПоКолонкам(, );
	ПосчитатьФактическуюДлительностьПоКолонкам(, СтрокаПриемник.УИД);
	
	ЭтаФорма.Модифицированность = Истина;
	СписокСообщенийСерверу.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПланУзла(ПриемникУИД, ИсточникУИД, ВидПлана)
	// тут мы найдём строки по УИД
	СтрокаПриемник = тСоответствиеТаблицыУИД.Получить(ПриемникУИД);
	СтрокаИсточник = тСоответствиеТаблицыУИД.Получить(ИсточникУИД);
	Если СтрокаИсточник = Неопределено ИЛИ СтрокаПриемник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачатьДействие();
	
	СписокСообщенийСерверу.Очистить();
	
	Если ВидПлана = "ТаблицаПредшественники" Тогда
		// перед копированием новых данных нам нужно очистить старые плановые
		СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
		МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПриемник.УИД);
		Если МассивПредшественники = Неопределено Тогда
			МассивПредшественники = Новый Массив;
		КонецЕсли;
		Для Каждого СвязьПредшественник ИЗ МассивПредшественники Цикл
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
			СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", СтрокаПриемник.УИД, СвязьПредшественник.ПредшественникУИД));
			СписокСообщенийСерверу.Добавить(СообщениеСерверу);
			
			МассивПоследователи = тСоответствиеПредшественникиПредшественникУИД.Получить(СвязьПредшественник.ПредшественникУИД);
			Если МассивПоследователи = Неопределено Тогда
				МассивПоследователи = Новый Массив;
			КонецЕсли;
			Для Каждого СвязьПоследователь ИЗ МассивПоследователи Цикл
				Если СвязьПоследователь.УИД = СвязьПредшественник.УИД Тогда
					МассивПоследователи.Удалить(МассивПоследователи.Найти(СвязьПоследователь));
					Прервать;
				КонецЕсли;
			КонецЦикла;
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СвязьПредшественник.ПредшественникУИД, МассивПоследователи);
			ТаблицаПредшественники.Удалить(СвязьПредшественник);
			Если СписокУИДПредшественикиДляПересчетаПоследователи.НайтиПоЗначению(СвязьПредшественник.ПредшественникУИД) = Неопределено Тогда
				СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СвязьПредшественник.ПредшественникУИД);
			КонецЕсли;
		КонецЦикла;
		МассивПредшественники.Очистить();
		тСоответствиеПредшественникиУИД.Вставить(СтрокаПриемник.УИД, МассивПредшественники);
	
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
		ДобавитьСобытиеИзменениеПлана(ОписаниеСобытия);
		СтрокаПриемник.ТаблицаПредшественники.Очистить();
		
		Для Каждого СтрокаПланов ИЗ СтрокаИсточник.ТаблицаПредшественники Цикл
			НоваяСтрокаПланов = СтрокаПриемник.ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПланов);
			
			НоваяСтрокаПланов = ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПланов);
			НоваяСтрокаПланов.УИД = СтрокаПриемник.УИД;
			
			МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(НоваяСтрокаПланов.УИД);
			Если МассивПредшественники = Неопределено Тогда
				МассивПредшественники = Новый Массив;
			КонецЕсли;
			МассивПредшественники.Добавить(НоваяСтрокаПланов);
			тСоответствиеПредшественникиУИД.Вставить(НоваяСтрокаПланов.УИД, МассивПредшественники);
			
			МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(НоваяСтрокаПланов.ПредшественникУИД);
			Если МассивПредшественники = Неопределено Тогда
				МассивПредшественники = Новый Массив;
			КонецЕсли;
			МассивПредшественники.Добавить(НоваяСтрокаПланов);
			тСоответствиеПредшественникиПредшественникУИД.Вставить(НоваяСтрокаПланов.ПредшественникУИД, МассивПредшественники);
			
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("ИмяСобытия", "ДобавитьПредшественника");
			СтруктураДанных = Новый Структура("УИД, ПредшественникУИД, Задержка, ТипСвязи, ЕдиницаВремени");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, НоваяСтрокаПланов);
			ОписаниеСобытия.Вставить("ДанныеЗадачи", СтруктураДанных);
			СписокСообщенийСерверу.Добавить(ОписаниеСобытия);
		КонецЦикла;
		
		ТаблицаПредшественникиСинхронизироватьСоответствия(СтрокаПриемник);
		
		СтруктураНадписей = СформироватьНадписьПредшественники(СтрокаПриемник);
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПриемник, "НадписьПредшественники", СтруктураНадписей.Надпись);
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПриемник, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписей.НадписьПоНомеруСтроки);
		ПолеПредшественники = СтрокаПриемник.НадписьПредшественникиПоНомеруСтроки;
		
		Для Каждого СвязьПредшественник ИЗ СтрокаПриемник.ТаблицаПредшественники Цикл
			Если СписокУИДПредшественикиДляПересчетаПоследователи.НайтиПоЗначению(СвязьПредшественник.ПредшественникУИД) = Неопределено Тогда
				СписокУИДПредшественикиДляПересчетаПоследователи.Добавить(СвязьПредшественник.ПредшественникУИД);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ЭлементСпискаПредшественник ИЗ СписокУИДПредшественикиДляПересчетаПоследователи Цикл
			СтрокаПредшественник = тСоответствиеТаблицыУИД.Получить(ЭлементСпискаПредшественник.Значение);
			Если СтрокаПредшественник = Неопределено ИЛИ СтрокаПредшественник.Внешний Тогда
				Продолжить;
			КонецЕсли;
			СтруктураНадписи = СформироватьНадписьПоследователи(СтрокаПредшественник);
			СтруктураИзменения = Новый Структура("НадписьПоследователи, НадписьПоследователиПоНомеруСтроки", СтруктураНадписи.Надпись, СтруктураНадписи.НадписьПоНомеруСтроки);
			ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизитаУИД");
			ОписаниеСобытия.Вставить("УИД", СтрокаПредшественник.УИД);
			ОписаниеСобытия.Вставить("Реквизит", СтруктураИзменения);
			ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		КонецЦикла;
		СписокУИДПредшественикиДляПересчетаПоследователи.Очистить();
		
		МассивСообщенийСерверу = СписокСообщенийСерверу.ВыгрузитьЗначения();
		Если МассивсообщенийСерверу.Количество() > 0 Тогда
			МассивВозврата = Новый Массив;
			АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
			ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);
		КонецЕсли;
	Иначе
		СтрокаПриемник[ВидПлана].Очистить();
		Для Каждого СтрокаПлана ИЗ СтрокаИсточник[ВидПлана] Цикл
			СтрокаПланаНовая = СтрокаПриемник[ВидПлана].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаНовая, СтрокаПлана);
			СтрокаПланаНовая.ГУИД = Новый УникальныйИдентификатор;
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
			ОписаниеСобытия.Вставить("ИмяТаблицы", ВидПлана);
			ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаПриемник);
			ОписаниеСобытия.Вставить("СобытиеПлана", "ДобавлениеСтроки");
			ОписаниеСобытия.Вставить("ГУИД", СтрокаПланаНовая.ГУИД);
			ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаПриемник.Идентификатор >= 0 Тогда
		ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаПриемник.Идентификатор);
		СкопироватьВсеПланыИзСтрокиТаблицыВУзелДерева(ЭлементДерева, СтрокаПриемник, ЭтаФорма);
	КонецЕсли;
	
	ПосчитатьИтогиПоКолонкам(, СтрокаПриемник.УИД);
	ПосчитатьИтогиВалютыПоКолонкам(, СтрокаПриемник.УИД);
	//ПосчитатьИтогиПроцентовПоКолонкам(, СтрокаПриемник.УИД);
	ПосчитатьИтогиПроцентовПоКолонкам(, );
	ПосчитатьФактическуюДлительностьПоКолонкам(, СтрокаПриемник.УИД);
	
	ЭтаФорма.Модифицированность = Истина;
	СписокСообщенийСерверу.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПлановыеДанные(СтрокаСтарыйУИД, СтрокаНовыйУИД, Удалять, МассивСообщенийСерверу)
	К = 0;
	СтрокаНовыйУИД.ПланДвиженияДенежныхСредств.Очистить();
	Для Каждого СтрокаПлана ИЗ СтрокаСтарыйУИД.ПланДвиженияДенежныхСредств Цикл
		СтрокаПланаНовая = СтрокаНовыйУИД.ПланДвиженияДенежныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПланаНовая, СтрокаПлана);
	КонецЦикла;
	Если Удалять Тогда
		СтрокаСтарыйУИД.ПланДвиженияДенежныхСредств.Очистить();
	КонецЕсли;
	
	СтрокаНовыйУИД.ПланДоходов.Очистить();
	Для Каждого СтрокаПлана ИЗ СтрокаСтарыйУИД.ПланДоходов Цикл
		СтрокаПланаНовая = СтрокаНовыйУИД.ПланДоходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПланаНовая, СтрокаПлана);
	КонецЦикла;
	Если Удалять Тогда
		СтрокаСтарыйУИД.ПланДоходов.Очистить();
	КонецЕсли;
	
	СтрокаНовыйУИД.ПланРасходов.Очистить();
	Для Каждого СтрокаПлана ИЗ СтрокаСтарыйУИД.ПланРасходов Цикл
		СтрокаПланаНовая = СтрокаНовыйУИД.ПланРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПланаНовая, СтрокаПлана);
	КонецЦикла;
	Если Удалять Тогда
		СтрокаСтарыйУИД.ПланРасходов.Очистить();
	КонецЕсли;
	
	СтрокаНовыйУИД.ПланМатериаловОбщая.Очистить();
	Для Каждого СтрокаПлана ИЗ СтрокаСтарыйУИД.ПланМатериаловОбщая Цикл
		СтрокаПланаНовая = СтрокаНовыйУИД.ПланМатериаловОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПланаНовая, СтрокаПлана);
	КонецЦикла;
	Если Удалять Тогда
		СтрокаСтарыйУИД.ПланМатериаловОбщая.Очистить();
	КонецЕсли;
	
	СтрокаНовыйУИД.ПланРесурсовОбщая.Очистить();
	Для Каждого СтрокаПлана ИЗ СтрокаСтарыйУИД.ПланРесурсовОбщая Цикл
		СтрокаПланаНовая = СтрокаНовыйУИД.ПланРесурсовОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПланаНовая, СтрокаПлана);
	КонецЦикла;
	Если Удалять Тогда
		СтрокаСтарыйУИД.ПланРесурсовОбщая.Очистить();
	КонецЕсли;
	
	СтрокаНовыйУИД.ПланРолейОбщая.Очистить();
	Для Каждого СтрокаПлана ИЗ СтрокаСтарыйУИД.ПланРолейОбщая Цикл
		СтрокаПланаНовая = СтрокаНовыйУИД.ПланРолейОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПланаНовая, СтрокаПлана);
	КонецЦикла;
	Если Удалять Тогда
		СтрокаСтарыйУИД.ПланРолейОбщая.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаПланов ИЗ СтрокаСтарыйУИД.ТаблицаПредшественники Цикл
		НоваяСтрокаПланов = СтрокаНовыйУИД.ТаблицаПредшественники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПланов);
		
		НоваяСтрокаПланов = ЭтаФорма.ТаблицаПредшественники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПланов);
		НоваяСтрокаПланов.УИД = СтрокаНовыйУИД.УИД;
		
		МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(НоваяСтрокаПланов.УИД);
		Если МассивПредшественники = Неопределено Тогда
			МассивПредшественники = Новый Массив;
		КонецЕсли;
		МассивПредшественники.Добавить(НоваяСтрокаПланов);
		тСоответствиеПредшественникиУИД.Вставить(НоваяСтрокаПланов.УИД, МассивПредшественники);
		
		МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(НоваяСтрокаПланов.ПредшественникУИД);
		Если МассивПредшественники = Неопределено Тогда
			МассивПредшественники = Новый Массив;
		КонецЕсли;
		МассивПредшественники.Добавить(НоваяСтрокаПланов);
		тСоответствиеПредшественникиПредшественникУИД.Вставить(НоваяСтрокаПланов.ПредшественникУИД, МассивПредшественники);
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("ИмяСобытия", "ДобавитьПредшественника");
		СтруктураДанных = Новый Структура("УИД, ПредшественникУИД, Задержка, ТипСвязи, ЕдиницаВремени");
		ЗаполнитьЗначенияСвойств(СтруктураДанных, НоваяСтрокаПланов);
		ОписаниеСобытия.Вставить("ДанныеЗадачи", СтруктураДанных);
		МассивСообщенийСерверу.Добавить(ОписаниеСобытия);
	КонецЦикла;
	Если Удалять Тогда
		СтрокаСтарыйУИД.ТаблицаПредшественники.Очистить();
		К = 0;
		Пока К < ЭтаФорма.ТаблицаПредшественники.Количество() Цикл
			СтрокаПлана = ЭтаФорма.ТаблицаПредшественники.Получить(К);
			Если СтрокаПлана.УИД <> СтрокаСтарыйУИД.УИД Тогда
				К = К + 1;
				Продолжить;
			КонецЕсли;
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("ИмяСобытия", "УдалитьПредшественника");
			СтруктураДанных = Новый Структура("УИД, ПредшественникУИД");
			ЗаполнитьЗначенияСвойств(СтруктураДанных, СтрокаПланов);
			ОписаниеСобытия.Вставить("ДанныеЗадачи", СтруктураДанных);
			МассивСообщенийСерверу.Добавить(ОписаниеСобытия);
			
			МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПлана.УИД);
			Если МассивПредшественники <> Неопределено Тогда
				Если МассивПредшественники.Найти(СтрокаПлана) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПлана));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиУИД.Вставить(СтрокаПлана.УИД, МассивПредшественники);
			
			МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПлана.ПредшественникУИД);
			Если МассивПредшественники <> Неопределено Тогда
				Если МассивПредшественники.Найти(СтрокаПлана) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПлана));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПлана.ПредшественникУИД, МассивПредшественники);
			
			ЭтаФорма.ТаблицаПредшественники.Удалить(К);
		КонецЦикла;
	КонецЕсли;
	Если СтрокаСтарыйУИД.Идентификатор >= 0 Тогда
		ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаСтарыйУИД.Идентификатор);
		СкопироватьВсеПланыИзСтрокиТаблицыВУзелДерева(ЭлементДерева, СтрокаСтарыйУИД, ЭтаФорма);
	КонецЕсли;
	Если СтрокаНовыйУИД.Идентификатор >= 0 Тогда
		ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаНовыйУИД.Идентификатор);
		СкопироватьВсеПланыИзСтрокиТаблицыВУзелДерева(ЭлементДерева, СтрокаНовыйУИД, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СкопироватьПодчиненныеУзлыПроекта(ТекущиеДанныеУИД, УзелДерева, МассивСообщенийСерверу)
	//Для Каждого СтрокаТаблицы ИЗ ТаблицаПроектаКопия Цикл
	//	Если СтрокаТаблицы.УИД = ТекущиеДанныеУИД Тогда
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	СтрокаТаблицы = тСоответствиеТаблицыУИД.Получить(ТекущиеДанныеУИД);
	СтрокаДереваСДР = ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСДР);
	Если СтрокаДереваСДР.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Если РежимОтображенияСписок Тогда
		НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
		ИндексВставки = НаборЭлементовДерева.Индекс(УзелДерева) + 1;
	КонецЕсли;
	
	МассивПодчиненные = тСоответствиеТаблицыРодитель.Получить(ТекущиеДанныеУИД);
	// отсортируем по номеру строки
	КоличествоВМассиве = МассивПодчиненные.Количество();
	Для сч1 = 0 ПО КоличествоВМассиве - 2 Цикл
		мин = МассивПодчиненные.Получить(сч1).НомерСтрокиПроекта;
		минд = сч1;
		Для сч2 = сч1 + 1 По КоличествоВМассиве - 1 Цикл
			Если МассивПодчиненные.Получить(сч2).НомерСтрокиПроекта < мин Тогда
				мин = МассивПодчиненные.Получить(сч2).НомерСтрокиПроекта;
				минд = сч2;
			КонецЕсли;
		КонецЦикла;
		Если минд <> сч1 Тогда
			ЗначениБольше = МассивПодчиненные.Получить(сч1);
			МассивПодчиненные.Установить(сч1, МассивПодчиненные.Получить(минд));
			МассивПодчиненные.Установить(минд, ЗначениБольше);
		КонецЕсли;
	КонецЦикла;
	
	//Для Каждого СтрокаПодчиненный ИЗ ТаблицаПроектаКопия Цикл
	Для Каждого СтрокаПодчиненный ИЗ МассивПодчиненные Цикл
		//Если СтрокаПодчиненный.Родитель = СтрокаТаблицы.УИД Тогда
			Если РежимОтображенияСписок Тогда
				НовыйЭлемент = НаборЭлементовДерева.Вставить(ИндексВставки);
				ИндексВставки = ИндексВставки + 1;
			Иначе
				НовыйЭлемент = УзелДерева.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтрокаПодчиненный, , стрКолонкиТаблицыИсключение + ", НадписьПоследователи, НадписьПоследователиПоНомеруСтроки, КонтрактныйДатаНачала, КонтрактныйДатаНачалаОтклонение, КонтрактныйДатаОкончанияОтклонение, КонтрактныйДатаОкончания, АктуализацияДатаНачалаОтклонение, АктуализацияДатаОкончанияОтклонение");
			
			НовыйЭлемент.Задача = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
			НовыйЭлемент.Родитель = УзелДерева.УИД;
			НовыйЭлемент.УИД = СокрЛП(Новый УникальныйИдентификатор);
			НовыйЭлемент.ИндексТаблицы = -1;
			
			СтруктураСообщенияНаСервер = Новый Структура;
			СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "ДобавлениеЗадачи");
			СтруктураДанныхЗадачи = Новый Структура("УИД, ДатаНачала, ДатаОкончания, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель, ТипОграничения, ДатаОграничения");
			ЗаполнитьЗначенияСвойств(СтруктураДанныхЗадачи, НовыйЭлемент);
			СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
			МассивСообщенийСерверу.Добавить(СтруктураСообщенияНаСервер);
			
			Если НовыйЭлемент.ФактическаяДатаНачала <> Дата(1,1,1) ИЛИ НовыйЭлемент.ФактическаяДатаОкончания <> Дата(1,1,1) Тогда
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
				СообщениеСерверу.Вставить("УИД", НовыйЭлемент.УИД);
				СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
				СообщениеСерверу.Вставить("НовоеЗначение", Истина);
				МассивСообщенийСерверу.Добавить(СообщениеСерверу);
				
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
				СообщениеСерверу.Вставить("УИД", НовыйЭлемент.УИД);
				СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаНачала");
				СообщениеСерверу.Вставить("НовоеЗначение", НовыйЭлемент.ФактическаяДатаНачала);
				МассивСообщенийСерверу.Добавить(СообщениеСерверу);
				
				СообщениеСерверу = Новый Структура;
				СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
				СообщениеСерверу.Вставить("УИД", НовыйЭлемент.УИД);
				СообщениеСерверу.Вставить("ИмяРеквизита", "ФактическаяДатаОкончания");
				СообщениеСерверу.Вставить("НовоеЗначение", НовыйЭлемент.ФактическаяДатаОкончания);
				МассивСообщенийСерверу.Добавить(СообщениеСерверу);
			КонецЕсли;
	
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ДобавлениеЗадачи");
			ОписаниеСобытия.Вставить("ИдентификаторСтроки", НовыйЭлемент.ПолучитьИдентификатор());
			ДобавитьСобытиеДерева(ОписаниеСобытия);
			
			СкопироватьПлановыеДанные(СтрокаПодчиненный, ТаблицаПроектаКопия.Получить(НовыйЭлемент.ИндексТаблицы), Ложь, МассивСообщенийСерверу);
			
			ИндексВставки = СкопироватьПодчиненныеУзлыПроекта(СтрокаПодчиненный.УИД, НовыйЭлемент, МассивСообщенийСерверу);
		//КонецЕсли;
	КонецЦикла;
	Возврат ИндексВставки;
КонецФункции

&НаКлиенте
Процедура ОчиститьПлановыеДанные(СтарыйУИД)
	
	СтрокаПроекта = тСоответствиеТаблицыУИД.Получить(СтарыйУИД);
	СтрокаПроекта.ТаблицаПредшественники.Очистить();
	СтрокаПроекта.ПланДвиженияДенежныхСредств.Очистить();
	СтрокаПроекта.ПланДоходов.Очистить();
	СтрокаПроекта.ПланРасходов.Очистить();
	СтрокаПроекта.ПланРолейОбщая.Очистить();
	СтрокаПроекта.ПланРесурсовОбщая.Очистить();
	СтрокаПроекта.ПланМатериаловОбщая.Очистить();
	
	К = 0;
	МассивПересчитать = Новый Массив;
	Пока К < ТаблицаПредшественники.Количество() Цикл
		СтрокаПланов = ТаблицаПредшественники.Получить(К);
		Если СтрокаПланов.УИД = СтарыйУИД Тогда
			
			// ((( grznt.Solntsev 29.08.2016
			МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПланов.УИД);
			Если МассивПредшественники <> Неопределено Тогда
				Если МассивПредшественники.Найти(СтрокаПланов) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПланов));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиУИД.Вставить(СтрокаПланов.УИД, МассивПредшественники);
			
			МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПланов.ПредшественникУИД);
			Если МассивПредшественники <> Неопределено Тогда
				Если МассивПредшественники.Найти(СтрокаПланов) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПланов));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПланов.ПредшественникУИД, МассивПредшественники);
			// ))) grznt.Solntsev 29.08.2016
			
			ТаблицаПредшественники.Удалить(К);
			Продолжить;
		ИначеЕсли СтрокаПланов.ПредшественникУИД = СтарыйУИД Тогда
			Если МассивПересчитать.Найти(СтрокаПланов.УИД) = Неопределено Тогда
				МассивПересчитать.Добавить(СтрокаПланов.УИД);
			КонецЕсли;
			
			// ((( grznt.Solntsev 29.08.2016
			МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПланов.УИД);
			Если МассивПредшественники <> Неопределено Тогда
				Если МассивПредшественники.Найти(СтрокаПланов) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПланов));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиУИД.Вставить(СтрокаПланов.УИД, МассивПредшественники);
			
			МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПланов.ПредшественникУИД);
			Если МассивПредшественники <> Неопределено Тогда
				Если МассивПредшественники.Найти(СтрокаПланов) <> Неопределено Тогда
					МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПланов));
				КонецЕсли;
			КонецЕсли;
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПланов.ПредшественникУИД, МассивПредшественники);
			// ))) grznt.Solntsev 29.08.2016
			
			ТаблицаПредшественники.Удалить(К);
			Продолжить;
		КонецЕсли;
		К = К + 1;
	КонецЦикла;
	Если МассивПересчитать.Количество() > 0 Тогда
		Для Каждого СтрокаТаблицы ИЗ ТаблицаПроектаКопия Цикл
			Если МассивПересчитать.Найти(СтрокаТаблицы.УИД) <> Неопределено Тогда 
				К = 0;
				Пока К < СтрокаТаблицы.ТаблицаПредшественники.Количество() Цикл
					СтрокаПланов = СтрокаТаблицы.ТаблицаПредшественники.Получить(К);
					Если СтрокаПланов.ПредшественникУИД <> СтарыйУИД Тогда
						К = К + 1;
						Продолжить;
					КонецЕсли;
					//добавить событие на сервер
					СтрокаТаблицы.ТаблицаПредшественники.Удалить(К);
				КонецЦикла;
					
				//НадписьПредшественники = СформироватьНадписьПредшественники(СтрокаТаблицы.УИД, ЭтаФорма);
				//НадписьПредшественники = СформироватьНадписьПредшественники(СтрокаТаблицы, ЭтаФорма);
				//ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "НадписьПредшественники", НадписьПредшественники, ЭтаФорма);
				СтруктураНадписей = СформироватьНадписьПредшественники(СтрокаТаблицы);
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "НадписьПредшественники", СтруктураНадписей.Надпись);
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицы, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписей.НадписьПоНомеруСтроки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкопироватьВсеПланыИзСтрокиТаблицыВУзелДерева(ЭлементДерева, СтрокаПроекта, ЭтаФорма)
	ЭлементДерева.ТаблицаПредшественники.Очистить();
	ЭлементДерева.ПланДвиженияДенежныхСредств.Очистить();
	ЭлементДерева.ПланДоходов.Очистить();
	ЭлементДерева.ПланРасходов.Очистить();
	ЭлементДерева.ПланРолейОбщая.Очистить();
	ЭлементДерева.ПланРесурсовОбщая.Очистить();
	ЭлементДерева.ПланМатериаловОбщая.Очистить();
	ЭлементДерева.ПланРесурсовОперативный.Очистить();
	ЭлементДерева.КомментарииКЗадаче.Очистить();
	#Если Клиент Тогда
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.ТаблицаПредшественники Цикл
			НоваяСтрокаПланов = ЭлементДерева.ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.ПланДвиженияДенежныхСредств Цикл
			НоваяСтрокаПланов = ЭлементДерева.ПланДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.ПланДоходов Цикл
			НоваяСтрокаПланов = ЭлементДерева.ПланДоходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.ПланРасходов Цикл
			НоваяСтрокаПланов = ЭлементДерева.ПланРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.ПланРолейОбщая Цикл
			НоваяСтрокаПланов = ЭлементДерева.ПланРолейОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.ПланРесурсовОбщая Цикл
			НоваяСтрокаПланов = ЭлементДерева.ПланРесурсовОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.ПланМатериаловОбщая Цикл
			НоваяСтрокаПланов = ЭлементДерева.ПланМатериаловОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.ПланРесурсовОперативный Цикл
			НоваяСтрокаПланов = ЭлементДерева.ПланРесурсовОперативный.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
		Для Каждого СтрокаПлана ИЗ СтрокаПроекта.КомментарииКЗадаче Цикл
			НоваяСтрокаПланов = ЭлементДерева.КомментарииКЗадаче.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПланов, СтрокаПлана);
		КонецЦикла;
	#Иначе
		ЭлементДерева.ТаблицаПредшественники.Загрузить(СтрокаПроекта.ТаблицаПредшественники.Выгрузить());
		ЭлементДерева.ПланДвиженияДенежныхСредств.Загрузить(СтрокаПроекта.ПланДвиженияДенежныхСредств.Выгрузить());
		ЭлементДерева.ПланДоходов.Загрузить(СтрокаПроекта.ПланДоходов.Выгрузить());
		ЭлементДерева.ПланРасходов.Загрузить(СтрокаПроекта.ПланРасходов.Выгрузить());
		ЭлементДерева.ПланРолейОбщая.Загрузить(СтрокаПроекта.ПланРолейОбщая.Выгрузить());
		ЭлементДерева.ПланРесурсовОбщая.Загрузить(СтрокаПроекта.ПланРесурсовОбщая.Выгрузить());
		ЭлементДерева.ПланМатериаловОбщая.Загрузить(СтрокаПроекта.ПланМатериаловОбщая.Выгрузить());
		ЭлементДерева.ПланРесурсовОперативный.Загрузить(СтрокаПроекта.ПланРесурсовОперативный.Выгрузить());
		ЭлементДерева.КомментарииКЗадаче.Загрузить(СтрокаПроекта.КомментарииКЗадаче.Выгрузить());
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьУИДВоВсехТаблицах(СтарыйУИД, НовыйУИД)
	Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаПроекта.Родитель = СтарыйУИД Тогда
			СтрокаПроекта.Родитель = НовыйУИД;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы ИЗ СтрокаПроекта.ТаблицаПредшественники Цикл
			Если СтрокаТаблицы.ПредшественникУИД = СтарыйУИД Тогда
				СтрокаТаблицы.ПредшественникУИД = НовыйУИД;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Для Каждого СтрокаТаблицы ИЗ ЭтаФорма.ТаблицаПредшественники Цикл
		Если СтрокаТаблицы.УИД = СтарыйУИД Тогда
			СтрокаТаблицы.УИД = НовыйУИД;
		КонецЕсли;
		Если СтрокаТаблицы.ПредшественникУИД = СтарыйУИД Тогда
			СтрокаТаблицы.ПредшественникУИД = НовыйУИД;
		КонецЕсли;
	КонецЦикла;
	СообщениеСерверу = Новый Структура;
	СообщениеСерверу.Вставить("УИД", СтарыйУИД);
	СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
	СообщениеСерверу.Вставить("ИмяРеквизита", "УИД");
	СообщениеСерверу.Вставить("НовоеЗначение", НовыйУИД);
	МассивВозврата = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, СообщениеСерверу, МассивВозврата, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);

	ЗаменитьУИДВДеревеСДР(СтарыйУИД, НовыйУИД, );
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПереместитьУзелДереваПроектаВНовогоРодителя(СтарыйУзел, НовыйРодитель, ЭтаФорма, МассивВыделенныхСтрок)
	Если ЭтаФорма.РежимОтображенияСписок Тогда
		// Невероятный вариант. В списке всё делается по-другому вызов только из дерева
	Иначе
		НовыйЭлемент = НовыйРодитель.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтарыйУзел, , ЭтаФорма.стрКолонкиТаблицыИсключение);
	
	Для Каждого СтрокаПлана ИЗ СтарыйУзел.ТаблицаПредшественники Цикл
		СтрокаНовогоПлана = НовыйЭлемент.ТаблицаПредшественники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоПлана, СтрокаПлана);
	КонецЦикла;
	Для Каждого СтрокаПлана ИЗ СтарыйУзел.ПланДвиженияДенежныхСредств Цикл
		СтрокаНовогоПлана = НовыйЭлемент.ПланДвиженияДенежныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоПлана, СтрокаПлана);
	КонецЦикла;
	Для Каждого СтрокаПлана ИЗ СтарыйУзел.ПланДоходов Цикл
		СтрокаНовогоПлана = НовыйЭлемент.ПланДоходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоПлана, СтрокаПлана);
	КонецЦикла;
	Для Каждого СтрокаПлана ИЗ СтарыйУзел.ПланРасходов Цикл
		СтрокаНовогоПлана = НовыйЭлемент.ПланРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоПлана, СтрокаПлана);
	КонецЦикла;
	Для Каждого СтрокаПлана ИЗ СтарыйУзел.ПланРолейОбщая Цикл
		СтрокаНовогоПлана = НовыйЭлемент.ПланРолейОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоПлана, СтрокаПлана);
	КонецЦикла;
	Для Каждого СтрокаПлана ИЗ СтарыйУзел.ПланРесурсовОбщая Цикл
		СтрокаНовогоПлана = НовыйЭлемент.ПланРесурсовОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоПлана, СтрокаПлана);
	КонецЦикла;
	Для Каждого СтрокаПлана ИЗ СтарыйУзел.ПланМатериаловОбщая Цикл
		СтрокаНовогоПлана = НовыйЭлемент.ПланМатериаловОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоПлана, СтрокаПлана);
	КонецЦикла;
	
	СтрокаПроекта = ЭтаФорма.ТаблицаПроектаКопия.Получить(СтарыйУзел.ИндексТаблицы);
	СтрокаПроекта.Идентификатор = НовыйЭлемент.ПолучитьИдентификатор();
	Пока СтарыйУзел.ПолучитьЭлементы().Количество() > 0 Цикл
		ПереместитьУзелДереваПроектаВНовогоРодителя(СтарыйУзел.ПолучитьЭлементы().Получить(0), НовыйЭлемент, ЭтаФорма, МассивВыделенныхСтрок);
	КонецЦикла;
	Если МассивВыделенныхСтрок.Найти(СтарыйУзел.ПолучитьИдентификатор()) <> Неопределено Тогда
		МассивВыделенныхСтрок.Удалить(МассивВыделенныхСтрок.Найти(СтарыйУзел.ПолучитьИдентификатор()));
	КонецЕсли;
	Если СтарыйУзел.ПолучитьРодителя() = Неопределено Тогда 
		ЭтаФорма.ДеревоПроекта.ПолучитьЭлементы().Удалить(СтарыйУзел);
	Иначе
		СтарыйУзел.ПолучитьРодителя().ПолучитьЭлементы().Удалить(СтарыйУзел);
	КонецЕсли;
	Возврат НовыйЭлемент;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНачальныеЗначенияСтроки(ТекущиеДанные)
	ТекущиеДанные.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача");
	Если РежимОтображенияСписок Тогда
	Иначе
		Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено И ТекущиеДанные.ПолучитьРодителя().ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
			ТекущиеДанные.ПолучитьРодителя().ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
			ОписаниеСобытия = Новый Структура;
			ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизита");
			ОписаниеСобытия.Вставить("ИдентификаторСтроки", ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор());
			ОписаниеСобытия.Вставить("Реквизит", "ВидЭлемента");
			ДобавитьСобытиеДерева(ОписаниеСобытия);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаФильтра ИЗ ТаблицаФильтрРедактора Цикл
		Если СтрокаФильтра.Использование И НЕ ПустаяСтрока(СтрокаФильтра.Реквизит) И СтрокаФильтра.ВидСправнения = ВидСравнения.Равно Тогда
			ТекущиеДанные[СтрокаФильтра.Реквизит] = СтрокаФильтра.Значение;
		КонецЕсли;
	КонецЦикла;
	
	ТекущиеДанные.Длительность = 1;
	Если СокрЛП(КалендарьПроекта) = "24 часа" Тогда
		ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.Сутки");
	Иначе
		ТекущиеДанные.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень");
	КонецЕсли;
	ТекущиеДанные.ДатаНачала = ДатаНачалаПроекта;
	Если РежимОтображенияСписок Тогда
		Если ПустаяСтрока(ТекущиеДанные.Родитель) Тогда
			ТекущиеДанные.ДатаНачала = ДатаНачалаПроекта;
		Иначе
			Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
				Если СтрокаПроекта.УИД = ТекущиеДанные.Родитель Тогда
					ТекущиеДанные.ДатаНачала = СтрокаПроекта.ДатаНачала;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			ТекущиеДанные.ДатаНачала = ТекущиеДанные.ПолучитьРодителя().ДатаНачала;
		Иначе
			ТекущиеДанные.ДатаНачала = ДатаНачалаПроекта;
		КонецЕсли;
	КонецЕсли;
	ТекущиеДанные.ДатаОкончания = ТекущиеДанные.ДатаНачала;
	ТекущиеДанные.ТипОграничения = ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.КакМожноРаньше");
	ТекущиеДанные.РДН = ТекущиеДанные.ДатаНачала;
	ТекущиеДанные.РДО = ТекущиеДанные.ДатаНачала;
	ТекущиеДанные.УИД = СокрЛП(Новый УникальныйИдентификатор);
	ТекущиеДанные.ИндексТаблицы = -1;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДанныеЗадачиНаКлиентеИзСтруктуры(СтруктураОповещения)
	СтруктураПараметров = СтруктураОповещения;
	СтруктураОтбора = Новый Структура("УИД", СтруктураПараметров.УИД);
	Для Каждого СтрокаТаблицыПроекта ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаТаблицыПроекта.УИД = СтруктураПараметров.УИД Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаТаблицыПроекта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
		ЭлементДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
	КонецЕсли;
	
	НачатьДействие();
	МассивСообщенийСерверу = Новый Массив;
	
	ВыполнитьПолныйПересчет = Ложь;
	Если СтрокаТаблицыПроекта.ДатаНачала <> СтруктураПараметров.ДатаНачала Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ДатаНачала", СтруктураПараметров.ДатаНачала);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "ДатаНачала");
		СообщениеСерверу.Вставить("НовоеЗначение", СтруктураПараметров.ДатаНачала);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если СтрокаТаблицыПроекта.ДатаОкончания <> СтруктураПараметров.ДатаОкончания Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ДатаОкончания", СтруктураПараметров.ДатаОкончания);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "ДатаОкончания");
		СообщениеСерверу.Вставить("НовоеЗначение", СтруктураПараметров.ДатаОкончания);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если СтрокаТаблицыПроекта.Длительность <> СтруктураПараметров.Длительность Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Длительность", СтруктураПараметров.Длительность);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "Длительность");
		СообщениеСерверу.Вставить("НовоеЗначение", СтруктураПараметров.Длительность);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		ПустаяДата = Дата(1,1,1);
		Если СтрокаТаблицыПроекта.ФактическаяДатаНачала = ПустаяДата И СтрокаТаблицыПроекта.ФактическаяДатаОкончания = ПустаяДата Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ДлительностьПлан", СтрокаТаблицыПроекта.Длительность);
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаТаблицыПроекта.ЕдиницаВремени <> СтруктураПараметров.ЕдиницаВремени Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ЕдиницаВремени", СтруктураПараметров.ЕдиницаВремени);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "ЕдиницаВремени");
		СообщениеСерверу.Вставить("НовоеЗначение", СтруктураПараметров.ЕдиницаВремени);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если СтрокаТаблицыПроекта.Календарь <> СтруктураПараметров.Календарь Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Календарь", СтруктураПараметров.Календарь);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "Календарь");
		СообщениеСерверу.Вставить("НовоеЗначение", СтруктураПараметров.Календарь);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если СтрокаТаблицыПроекта.РучнойВвод <> СтруктураПараметров.РучнойВвод Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "РучнойВвод", СтруктураПараметров.РучнойВвод);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "РучнойВвод");
		СообщениеСерверу.Вставить("НовоеЗначение", СтруктураПараметров.РучнойВвод);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если СтрокаТаблицыПроекта.ТипОграничения <> СтруктураПараметров.ТипОграничения Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ТипОграничения", СтруктураПараметров.ТипОграничения);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "ТипОграничения");
		СообщениеСерверу.Вставить("НовоеЗначение", СтруктураПараметров.ТипОграничения);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если СтрокаТаблицыПроекта.ДатаОграничения <> СтруктураПараметров.ДатаОграничения Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ДатаОграничения", СтруктураПараметров.ДатаОграничения);
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "ДатаОграничения");
		СообщениеСерверу.Вставить("НовоеЗначение", СтруктураПараметров.ДатаОграничения);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	Если СтрокаТаблицыПроекта.НаименованиеЗадачи <> СтруктураПараметров.НаименованиеЗадачи
		ИЛИ СтрокаТаблицыПроекта.ВидЭлемента <> СтруктураПараметров.ВидЭлемента
		ИЛИ СтрокаТаблицыПроекта.ВидОперации <> СтруктураПараметров.ВидОперации Тогда
		СтрокаТаблицыПроекта.ИзменилисьРеквизиты = Истина;
	КонецЕсли;
	//Идентификатор = ЭлементДерева.ПолучитьИдентификатор();
	Если ЭлементДерева <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭлементДерева, СтруктураПараметров, "НаименованиеЗадачи, РучнойВвод, ДатаНачала, ДатаОкончания, ВидЭлемента, Календарь, Длительность, ЕдиницаВремени, ВидОперации, ТипОграничения, ДатаОграничения");
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаТаблицыПроекта, СтруктураПараметров, "НаименованиеЗадачи, РучнойВвод, ВидЭлемента, Календарь, ВидОперации");
	
	Если СтрокаТаблицыПроекта.Длительность = 0 И СтрокаТаблицыПроекта.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха"));
	ИначеЕсли СтрокаТаблицыПроекта.Длительность > 0 И СтрокаТаблицыПроекта.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") Тогда
		СтрокаСДР = ЭтаФорма.ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицыПроекта.ИдентификаторСДР);
		Если СтрокаСДР.ПолучитьЭлементы().Количество() > 0 Тогда
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач"));
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача"));
		КонецЕсли;
	ИначеЕсли СтруктураПараметров.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Веха") И ЭлементДерева.Длительность > 0 Тогда
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Длительность", 0);
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("УИД", СтруктураПараметров.УИД);
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("ИмяРеквизита", "Длительность");
		СообщениеСерверу.Вставить("НовоеЗначение", 0);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
	КонецЕсли;
	
	ИзмененаСтруктураДерева = Ложь;
	
	Если СтруктураПараметров.РодительЗадачиУИД <> СтрокаТаблицыПроекта.Родитель Тогда
		СтарыйРодительУИД = СтрокаТаблицыПроекта.Родитель;
		НовыйРодительУИД = СтруктураПараметров.РодительЗадачиУИД;
		
		// Перестроим дерево СДР и пересчитаем коды
		ТекущиеДанныеСДР = ДеревоСДР.НайтиПоИдентификатору(СтрокаТаблицыПроекта.ИдентификаторСДР);
		ТекущийРодительСДР = ТекущиеДанныеСДР.ПолучитьРодителя();
		Если ТекущийРодительСДР = Неопределено Тогда
			ТекущийРодительСДР = ДеревоСДР;
		КонецЕсли;
		Если НЕ ПустаяСтрока(СтрокаТаблицыПроекта.Родитель) Тогда
			Для Каждого СтрокаРодитель ИЗ ТаблицаПроектаКопия Цикл
				Если СтрокаРодитель.УИД = СтрокаТаблицыПроекта.Родитель Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Родитель", СтруктураПараметров.РодительЗадачиУИД);
		
		ПереместитьСтрокуДереваСДРВНовогоРодителя(СтрокаТаблицыПроекта, "");
		Если ТекущийРодительСДР.ПолучитьЭлементы().Количество() = 0 Тогда
			Если СтрокаРодитель.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
				ВидЗадача = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача");
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаРодитель, "ВидЭлемента", ВидЗадача);
			КонецЕсли;
		КонецЕсли;
		//ПересчитатьСДРДерева(ДеревоСДР, Истина, ЭтаФорма);
		ПересчитатьСДРДерева(ДеревоСДР, Истина);
		
		// Сообщим о наших изменениях на сервер
		
		СообщениеСерверу = Новый Структура;
		СообщениеСерверу.Вставить("ИмяСобытия", "ИзменениеРеквизита");
		СообщениеСерверу.Вставить("УИД", СтрокаТаблицыПроекта.УИД);
		СообщениеСерверу.Вставить("ИмяРеквизита", "Родитель");
		СообщениеСерверу.Вставить("НовоеЗначение", СтрокаТаблицыПроекта.Родитель);
		МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		
		//----------------------------------------
		Если РежимОтображенияСписок Тогда
			Если ЭлементДерева <> Неопределено Тогда
				НаборЭлементовДерева = ДеревоПроекта.ПолучитьЭлементы();
				ТекущийИндекс = НаборЭлементовДерева.Индекс(ЭлементДерева);
				МассивПодчиненныхУИД = ПолучитьМассивПодчиненныхУИД(ЭлементДерева.УИД);
				МассивПодчиненныхУИД.Добавить(ЭлементДерева.УИД);
				МассивСтрокДляСдвига = Новый Массив;
				КонечныйИндекс = ТекущийИндекс;
				Пока КонечныйИндекс < НаборЭлементовДерева.Количество() - 1 И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(КонечныйИндекс).УИД) <> Неопределено Цикл
					МассивСтрокДляСдвига.Вставить(0, НаборЭлементовДерева.Получить(КонечныйИндекс));
					КонечныйИндекс = КонечныйИндекс + 1;
				КонецЦикла;
				Если ПустаяСтрока(СтруктураПараметров.РодительЗадачиУИД) Тогда
					ИндексСмещения = НаборЭлементовДерева.Количество() - КонечныйИндекс;
					Если ИндексСмещения > 0 Тогда
						Для Каждого СтрокаМассива ИЗ МассивСтрокДляСдвига Цикл
							НаборЭлементовДерева.Сдвинуть(НаборЭлементовДерева.Индекс(СтрокаМассива), ИндексСмещения);
						КонецЦикла;
					КонецЕсли;
					НовыйРодитель = ДеревоПроекта;
				Иначе
					// Нужно определить, куда нам двигаться - вверх или вниз
					ДвижемсяНаверх = Ложь;
					Если ТекущийИндекс > 0 Тогда
						Если НаборЭлементовДерева.Получить(ТекущийИндекс - 1).КодСДР > ЭлементДерева.КодСДР Тогда
							// Нужно двигаться вверх
							ДвижемсяНаверх = Истина;
						КонецЕсли;
					КонецЕсли;
					Если ДвижемсяНаверх Тогда
						// посчитаем сколько по индексам нам двигаться вверх
						Для ИндексСмещения = 1 По ТекущийИндекс Цикл
							Если НаборЭлементовДерева.Получить(ТекущийИндекс - ИндексСмещения).КодСДР < ЭлементДерева.КодСДР Тогда
								Прервать;
							КонецЕсли;
						КонецЦикла;
						ИндексСмещения = ИндексСмещения - 1;
						Пока ТекущийИндекс < НаборЭлементовДерева.Количество() И МассивПодчиненныхУИД.Найти(НаборЭлементовДерева.Получить(ТекущийИндекс).УИД) <> Неопределено Цикл
							НаборЭлементовДерева.Сдвинуть(ТекущийИндекс, - ИндексСмещения);
							ТекущийИндекс = ТекущийИндекс + 1;
						КонецЦикла;
					Иначе
						ИндексСмещения = КонечныйИндекс;
						Пока ИндексСмещения <= НаборЭлементовДерева.Количество() - 1 И НаборЭлементовДерева.Получить(ИндексСмещения).КодСДР < ЭлементДерева.КодСДР Цикл
							ИндексСмещения = ИндексСмещения + 1;
						КонецЦикла;
						ИндексСмещения = ИндексСмещения - КонечныйИндекс;
						Если ИндексСмещения > 0 Тогда
							Для Каждого СтрокаМассива ИЗ МассивСтрокДляСдвига Цикл
								НаборЭлементовДерева.Сдвинуть(НаборЭлементовДерева.Индекс(СтрокаМассива), ИндексСмещения);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					Для Каждого СтрокаНовыйРодитель ИЗ ТаблицаПроектаКопия Цикл
						Если СтрокаНовыйРодитель.УИД = СтруктураПараметров.РодительЗадачиУИД Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если СтрокаНовыйРодитель.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
						ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаНовыйРодитель, "ВидЭлемента", ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач"));
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(СтруктураПараметров.РодительЗадачиУИД) ИЛИ РежимОтображенияСписок Тогда
				НовыйРодитель = ДеревоПроекта;
			Иначе
				Для Каждого СтрокаНовыйРодитель ИЗ ТаблицаПроектаКопия Цикл
					Если СтрокаНовыйРодитель.УИД = СтрокаТаблицыПроекта.Родитель Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаНовыйРодитель.Идентификатор < 0 Тогда
					НовыйРодитель = ВставитьГруппуРодителяВДеревоПроекта(СтрокаНовыйРодитель);
				Иначе
					НовыйРодитель = ДеревоПроекта.НайтиПоИдентификатору(СтрокаНовыйРодитель.Идентификатор);
				КонецЕсли;
			КонецЕсли;
			
			Если ЭлементДерева <> Неопределено Тогда
				МассивВыделенныхСтрок = Новый Массив;
				НовыйЭлемент = ПереместитьУзелДереваПроектаВНовогоРодителя(ЭлементДерева, НовыйРодитель, ЭтаФорма, МассивВыделенныхСтрок);
				СтрокаТаблицыПроекта.Идентификатор = НовыйЭлемент.ПолучитьИдентификатор();
				Если НовыйРодитель <> ДеревоПроекта Тогда
					Если НовыйРодитель.ВидЭлемента <> ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач") Тогда
						НовыйРодитель.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
						ОписаниеСобытия = Новый Структура;
						ОписаниеСобытия.Вставить("Событие", "ИзменениеРеквизита");
						ОписаниеСобытия.Вставить("ИдентификаторСтроки", НовыйРодитель.ПолучитьИдентификатор());
						ОписаниеСобытия.Вставить("Реквизит", "ВидЭлемента");
						ДобавитьСобытиеДерева(ОписаниеСобытия);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			ЭлементДерева = НовыйЭлемент;
		КонецЕсли;
		
		Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
			Элементы.ДеревоПроекта.ТекущаяСтрока = СтрокаТаблицыПроекта.Идентификатор;
			Элементы.ДеревоПроекта.Развернуть(СтрокаТаблицыПроекта.Идентификатор);
		КонецЕсли;
		
		ПоказатьКнопкиКоличествоУровней();
		ВыполнитьПолныйПересчет = Истина;
	КонецЕсли;
	
	СтрокиПлана = Новый Массив; // Строки текущие
	СтрокиПланаПроверка = Новый Массив;
	//Для Каждого СтрокаПлана ИЗ ТаблицаПредшественники Цикл
	Для Каждого СтрокаПлана ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
		СтрокиПлана.Добавить(СтрокаПлана);
		СтрокиПланаПроверка.Добавить(СтрокаПлана);
	КонецЦикла;
	
	КопияТаблицыСвязей = Новый Массив; // новая таблица связей
	Для Каждого СтрокаТаблицыСвязей ИЗ СтруктураПараметров.МассивПредшественники Цикл
		КопияТаблицыСвязей.Добавить(СтрокаТаблицыСвязей);
	КонецЦикла;
	
	К = 0;
	Пока К < СтрокиПлана.Количество() Цикл
		СтрокаКопияТаблицы = СтрокиПлана.Получить(К);
		СтрокаТаблицыСвязей = Неопределено;
		Для Каждого СтрокаКопии ИЗ КопияТаблицыСвязей Цикл
			Если СтрокаКопии.ПредшественникУИД = СтрокаКопияТаблицы.ПредшественникУИД Тогда
				СтрокаТаблицыСвязей = СтрокаКопии;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если СтрокаТаблицыСвязей = Неопределено Тогда 
			К = К + 1;
			Продолжить;
		КонецЕсли;
		Если СтрокаКопияТаблицы.ТипСвязи <> СтрокаТаблицыСвязей.ТипСвязи
			ИЛИ СтрокаКопияТаблицы.Задержка <> СтрокаТаблицыСвязей.Задержка
			ИЛИ СтрокаКопияТаблицы.ЕдиницаВремени <> СтрокаТаблицыСвязей.ЕдиницаВремени Тогда
			К = К + 1;
			Продолжить;
		КонецЕсли;
		КопияТаблицыСвязей.Удалить(КопияТаблицыСвязей.Найти(СтрокаТаблицыСвязей));
		СтрокиПлана.Удалить(К);
	КонецЦикла;
	
	Если СтрокиПлана.Количество() > 0 ИЛИ КопияТаблицыСвязей.Количество() > 0 Тогда
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ИзменениеПлана");
		ОписаниеСобытия.Вставить("ИмяТаблицы", "ТаблицаПредшественники");
		ОписаниеСобытия.Вставить("СтрокаТаблицы", СтрокаТаблицыПроекта);
		ДобавитьСобытиеТаблицы(ОписаниеСобытия);
		
		Для Каждого СтрокаПлана ИЗ СтрокиПлана Цикл
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "УдалитьПредшественника");
			//СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", СтрокаПлана.УИД, СтрокаПлана.ПредшественникУИД));
			СообщениеСерверу.Вставить("ДанныеЗадачи", Новый Структура("УИД, ПредшественникУИД", СтрокаТаблицыПроекта.УИД, СтрокаПлана.ПредшественникУИД));
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
			Для Каждого СтрокаПредшественник ИЗ ТаблицаПредшественники Цикл
				Если СтрокаПредшественник.УИД = СтрокаТаблицыПроекта.УИД И СтрокаПредшественник.ПредшественникУИД = СтрокаПлана.ПредшественникУИД Тогда
					
					// ((( grznt.Solntsev 29.08.2016
					МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПредшественник.УИД);
					Если МассивПредшественники <> Неопределено Тогда
						Если МассивПредшественники.Найти(СтрокаПредшественник) <> Неопределено Тогда
							МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПредшественник));
						КонецЕсли;
					КонецЕсли;
					тСоответствиеПредшественникиУИД.Вставить(СтрокаПредшественник.УИД, МассивПредшественники);
					
					МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПредшественник.ПредшественникУИД);
					Если МассивПредшественники <> Неопределено Тогда
						Если МассивПредшественники.Найти(СтрокаПредшественник) <> Неопределено Тогда
							МассивПредшественники.Удалить(МассивПредшественники.Найти(СтрокаПредшественник));
						КонецЕсли;
					КонецЕсли;
					тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПредшественник.ПредшественникУИД, МассивПредшественники);
					// ))) grznt.Solntsev 29.08.2016
					
					ТаблицаПредшественники.Удалить(СтрокаПредшественник);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для Каждого СтрокаПредшественник ИЗ СтрокаТаблицыПроекта.ТаблицаПредшественники Цикл
				Если СтрокаПредшественник.ПредшественникУИД = СтрокаПлана.ПредшественникУИД Тогда
					СтрокаТаблицыПроекта.ТаблицаПредшественники.Удалить(СтрокаПредшественник);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Для К = 0 ПО СтрокиПланаПроверка.Количество() - 1 Цикл
				Если СтрокиПланаПроверка.Получить(К) = СтрокаПлана Тогда
					СтрокиПланаПроверка.Удалить(К);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	    ЕстьВнешний = Ложь;
		
		Для Каждого СтрокаТаблицы ИЗ КопияТаблицыСвязей Цикл
			СтрокаПлана = СтрокаТаблицыПроекта.ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаТаблицы);
			
			СтрокаПлана = ТаблицаПредшественники.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаТаблицы);
			СтрокаПлана.УИД = СтрокаТаблицыПроекта.УИД;
			СтрокаПлана.Задача = СтрокаТаблицыПроекта.Задача;
			СтрокаПлана.КодСДР = СтрокаТаблицыПроекта.КодСДР;
			
			// ((( grznt.Solntsev 29.08.2016
			МассивПредшественники = тСоответствиеПредшественникиУИД.Получить(СтрокаПлана.УИД);
			Если МассивПредшественники = Неопределено Тогда
				МассивПредшественники = Новый Массив;
			КонецЕсли;
			МассивПредшественники.Добавить(СтрокаПлана);
			тСоответствиеПредшественникиУИД.Вставить(СтрокаПлана.УИД, МассивПредшественники);
			
			МассивПредшественники = тСоответствиеПредшественникиПредшественникУИД.Получить(СтрокаПлана.ПредшественникУИД);
			Если МассивПредшественники = Неопределено Тогда
				МассивПредшественники = Новый Массив;
			КонецЕсли;
			МассивПредшественники.Добавить(СтрокаПлана);
			тСоответствиеПредшественникиПредшественникУИД.Вставить(СтрокаПлана.ПредшественникУИД, МассивПредшественники);
			// ))) grznt.Solntsev 29.08.2016
		
			Если СтрокаПлана.Внешний Тогда
				ЕстьВнешний = Истина;
				Нашли = Ложь;
				Для Каждого СтрокаТаблицыПроектаВнешний ИЗ ТаблицаПроектаКопия Цикл
					Если СтрокаТаблицыПроектаВнешний.УИД = СтрокаТаблицы.ПредшественникУИД Тогда
						Нашли = Истина;
					КонецЕсли;
				КонецЦикла;
				Если НЕ Нашли Тогда
					СтрокаТаблицыПроектаВнешний = ТаблицаПроектаКопия.Добавить();
					СтрокаТаблицыПроектаВнешний.НаименованиеЗадачи = СтрокаТаблицы.НаименованиеЗадачи;
					СтрокаТаблицыПроектаВнешний.ДатаНачала = СтрокаТаблицы.ДатаНачала;
					СтрокаТаблицыПроектаВнешний.ДатаОкончания = СтрокаТаблицы.ДатаОкончания;
					СтрокаТаблицыПроектаВнешний.РучнойВвод = Истина;
					СтрокаТаблицыПроектаВнешний.КодСДР = СтрокаТаблицы.КодСДР;
					СтрокаТаблицыПроектаВнешний.ЕдиницаВремени = ПредопределенноеЗначение("Справочник.грзнтЕдиницыВремени.РабочийДень");
					СтрокаТаблицыПроектаВнешний.Длительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаТаблицыПроектаВнешний.ДатаНачала, СтрокаТаблицыПроектаВнешний.ДатаОкончания, КалендарьПроекта, СтрокаТаблицыПроектаВнешний.ЕдиницаВремени);
					СтрокаТаблицыПроектаВнешний.Картинка = 3;
					СтрокаТаблицыПроектаВнешний.УИД = СтрокаТаблицы.ПредшественникУИД;
					СтрокаТаблицыПроектаВнешний.РДН = СтрокаТаблицы.ДатаНачала;
					СтрокаТаблицыПроектаВнешний.РДО = СтрокаТаблицы.ДатаОкончания;
					СтрокаТаблицыПроектаВнешний.ПДН = СтрокаТаблицы.ДатаНачала;
					СтрокаТаблицыПроектаВнешний.ПДО = СтрокаТаблицы.ДатаОкончания;
					СтрокаТаблицыПроектаВнешний.ТипОграничения = ПредопределенноеЗначение("Перечисление.грзнтОграничениеСроковЗадачи.ФиксированноеНачало");
					СтрокаТаблицыПроектаВнешний.ДатаОграничения = СтрокаТаблицы.ДатаНачала;
					СтрокаТаблицыПроектаВнешний.Внешний = Истина;
					
					// ((( grznt.Solntsev 29.08.2016
					тСоответствиеТаблицыУИД.Вставить(СтрокаТаблицыПроектаВнешний.УИД, СтрокаТаблицыПроектаВнешний);
					// ))) grznt.Solntsev 29.08.2016
					
					СообщениеСерверу = Новый Структура;
					СообщениеСерверу.Вставить("ИмяСобытия", "ДобавлениеЗадачи");
					СтруктураДанныхЗадачи = Новый Структура("Идентификатор, УИД, ДатаНачала, ДатаОкончания, РучнойВвод, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель, ТипОграничения, ДатаОграничения");
					ЗаполнитьЗначенияСвойств(СтруктураДанныхЗадачи, СтрокаТаблицыПроектаВнешний);
					СтруктураДанныхЗадачи.Вставить("Родитель", "");
					СтруктураДанныхЗадачи.Вставить("Идентификатор", 0);
					СообщениеСерверу.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
					МассивСообщенийСерверу.Добавить(СообщениеСерверу)
				КонецЕсли;
			КонецЕсли;
			
			СообщениеСерверу = Новый Структура;
			СообщениеСерверу.Вставить("ИмяСобытия", "ДобавитьПредшественника");
			ДанныеЗадачи = Новый Структура("УИД, ПредшественникУИД, Задержка, ЕдиницаВремени, ТипСвязи");
			ЗаполнитьЗначенияСвойств(ДанныеЗадачи, СтрокаПлана);
			СообщениеСерверу.Вставить("ДанныеЗадачи", ДанныеЗадачи);
			МассивСообщенийСерверу.Добавить(СообщениеСерверу);
		КонецЦикла;
		//НадписьПредшественники = СформироватьНадписьПредшественники(СтрокаТаблицыПроекта.УИД, ЭтаФорма);
		//НадписьПредшественники = СформироватьНадписьПредшественники(СтрокаТаблицыПроекта, ЭтаФорма);
		//ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественники", НадписьПредшественники, ЭтаФорма);
		СтруктураНадписей = СформироватьНадписьПредшественники(СтрокаТаблицыПроекта);
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественники", СтруктураНадписей.Надпись);
		ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "НадписьПредшественникиПоНомеруСтроки", СтруктураНадписей.НадписьПоНомеруСтроки);
		
		ВыполнитьПолныйПересчет = Истина;
		
		Для Каждого СтрокаПланаПроверка ИЗ СтрокиПланаПроверка Цикл
			Если СтрокаПланаПроверка.Внешний Тогда
				ЕстьВнешний = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьВнешний Тогда
			Если СтрокаТаблицыПроекта.КартинкаПредшественники <> 2 Тогда
				ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "КартинкаПредшественники", 1);
			КонецЕсли;
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "КартинкаПредшественники", 0);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьПолныйПересчет Тогда
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);
	ИначеЕсли МассивСообщенийСерверу.Количество() > 0 Тогда
		МассивВозврата = Новый Массив;
		АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииСроков(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивВозврата, РежимУчитыватьФакт);
		ОбновитьТаблицуПроектаПоМассивуИзменений(МассивВозврата, Истина);
	КонецЕсли;
	
	КолонкиПересчетаИтогов = "";
	КолонкиПересчетаИтоговВалюты = "";
	
	Добавлено = Ложь;
	Если СтрокаТаблицыПроекта.ПланДвиженияДенежныхСредств.Количество() > 0 Тогда
		СтрокаТаблицыПроекта.ПланДвиженияДенежныхСредств.Очистить();
		КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаПоступление, СуммаВыплата, СуммаПоступлениеУпр, СуммаВыплатаУпр";
		КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", ВалютаПоступлений, ВалютаВыплат";
		Добавлено = Истина;
	КонецЕсли;
	Для Каждого СтрокаТаблицы ИЗ СтруктураПараметров.МассивДДС Цикл
		СтрокаПлана = СтрокаТаблицыПроекта.ПланДвиженияДенежныхСредств.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаТаблицы);
		Если НЕ Добавлено Тогда
			КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаПоступление, СуммаВыплата, СуммаПоступлениеУпр, СуммаВыплатаУпр";
			КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", ВалютаПоступлений, ВалютаВыплат";
			Добавлено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Добавлено = Ложь;
	Если СтрокаТаблицыПроекта.ПланДоходов.Количество() > 0 Тогда
		СтрокаТаблицыПроекта.ПланДоходов.Очистить();
		КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаДоход, СуммаДоходУпр";
		КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", ВалютаДоходов";
		Добавлено = Истина;
	КонецЕсли;
	Для Каждого СтрокаТаблицы ИЗ СтруктураПараметров.МассивД Цикл
		СтрокаПлана = СтрокаТаблицыПроекта.ПланДоходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаТаблицы);
		Если НЕ Добавлено Тогда
			КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаДоход, СуммаДоходУпр";
			КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", ВалютаДоходов";
			Добавлено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Добавлено = Ложь;
	Если СтрокаТаблицыПроекта.ПланРасходов.Количество() > 0 Тогда
		СтрокаТаблицыПроекта.ПланРасходов.Очистить();
		КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаРасход, СуммаРасходУпр";
		КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", ВалютаРасходов";
		Добавлено = Истина;
	КонецЕсли;
	Для Каждого СтрокаТаблицы ИЗ СтруктураПараметров.МассивР Цикл
		СтрокаПлана = СтрокаТаблицыПроекта.ПланРасходов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаТаблицы);
		Если НЕ Добавлено Тогда
			КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаРасход, СуммаРасходУпр";
			КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", ВалютаРасходов";
			Добавлено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Добавлено = Ложь;
	Если СтрокаТаблицыПроекта.ПланМатериаловОбщая.Количество() > 0 Тогда
		СтрокаТаблицыПроекта.ПланМатериаловОбщая.Очистить();
		КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаМатериалы";
		Добавлено = Истина;
	КонецЕсли;
	Для Каждого СтрокаТаблицы ИЗ СтруктураПараметров.МассивМатериалы Цикл
		СтрокаПлана = СтрокаТаблицыПроекта.ПланМатериаловОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаТаблицы);
		Если НЕ Добавлено Тогда
			КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаМатериалы";
			Добавлено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Добавлено = Ложь;
	Если СтрокаТаблицыПроекта.ПланРесурсовОбщая.Количество() > 0 Тогда
		СтрокаТаблицыПроекта.ПланРесурсовОбщая.Очистить();
		КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаРесурсы, КоличествоРесурсы";
		КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", НадписьРесурсы";
		Добавлено = Истина;
	КонецЕсли;
	Для Каждого СтрокаТаблицы ИЗ СтруктураПараметров.МассивРесурсы Цикл
		СтрокаПлана = СтрокаТаблицыПроекта.ПланРесурсовОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаТаблицы);
		Если НЕ Добавлено Тогда
			КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаРесурсы, КоличествоРесурсы";
			КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", НадписьРесурсы";
			Добавлено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Добавлено = Ложь;
	Если СтрокаТаблицыПроекта.ПланРесурсовОперативный.Количество() > 0 Тогда
		КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаРесурсыОперативный, КоличествоРесурсыОперативный";
		КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", НадписьРесурсыОперативный";
		Добавлено = Истина;
	КонецЕсли;

	Если СтрокаТаблицыПроекта.ПланРолейОбщая.Количество() > 0 Тогда
		СтрокаТаблицыПроекта.ПланРолейОбщая.Очистить();
		КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаРоли, КоличествоРоли";
		КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", НадписьРоли";
		Добавлено = Истина;
	КонецЕсли;
	Для Каждого СтрокаТаблицы ИЗ СтруктураПараметров.МассивРоли Цикл
		СтрокаПлана = СтрокаТаблицыПроекта.ПланРолейОбщая.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаТаблицы);
		Если НЕ Добавлено Тогда
			КолонкиПересчетаИтогов = "" + КолонкиПересчетаИтогов + ", СуммаРоли, КоличествоРоли";
			КолонкиПересчетаИтоговВалюты = "" + КолонкиПересчетаИтоговВалюты + ", НадписьРоли";
			Добавлено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(КолонкиПересчетаИтогов) И НЕ ИзмененаСтруктураДерева Тогда
		ПосчитатьИтогиПоКолонкам(КолонкиПересчетаИтогов, СтрокаТаблицыПроекта.УИД);
		//ПосчитатьИтогиПроцентовПоКолонкам("", СтрокаТаблицыПроекта.УИД)
		ПосчитатьИтогиПроцентовПоКолонкам("", )
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КолонкиПересчетаИтоговВалюты) И НЕ ИзмененаСтруктураДерева Тогда
		ПосчитатьИтогиВалютыПоКолонкам(КолонкиПересчетаИтоговВалюты, СтрокаТаблицыПроекта.УИД);
	КонецЕсли;
	
	Если ИзмененаСтруктураДерева Тогда
		Если НЕ ПустаяСтрока(СтарыйРодительУИД) Тогда
			ПосчитатьИтогиПоКолонкам("", СтарыйРодительУИД);
			ПосчитатьИтогиВалютыПоКолонкам("", СтарыйРодительУИД);
			//ПосчитатьИтогиПроцентовПоКолонкам("", СтарыйРодительУИД);
			ПосчитатьИтогиПроцентовПоКолонкам("", );
			ПосчитатьФактическуюДлительностьПоКолонкам("", СтарыйРодительУИД);
		КонецЕсли;
		Если НЕ ПустаяСтрока(НовыйРодительУИД) Тогда
			ПосчитатьИтогиПоКолонкам("", НовыйРодительУИД);
			ПосчитатьИтогиВалютыПоКолонкам("", НовыйРодительУИД);
			//ПосчитатьИтогиПроцентовПоКолонкам("", НовыйРодительУИД);
			ПосчитатьИтогиПроцентовПоКолонкам("", );
			ПосчитатьФактическуюДлительностьПоКолонкам("", НовыйРодительУИД);
		КонецЕсли;
	КонецЕсли;
	
	СкопироватьВсеПланыИзСтрокиТаблицыВУзелДерева(ЭлементДерева, СтрокаТаблицыПроекта, ЭтаФорма);
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивПодчиненныхУИД(УИД)
	МассивУИД = Новый Массив;
	Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия ЦИкл
		Если СтрокаПроекта.УИД = УИД Тогда
			ПолучитьМассивПодчиненныхУИДРекурсивно(ДеревоСДР.НайтиПоИдентификатору(СтрокаПроекта.ИдентификаторСДР), МассивУИД);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивУИД;
КонецФункции

&НаКлиенте
Функция ПолучитьМассивПодчиненныхУИДРекурсивно(СтрокаДереваУИД, МассивУИД)
	Для Каждого ЭлементДерева ИЗ СтрокаДереваУИД.ПолучитьЭлементы() Цикл
		МассивУИД.Добавить(ЭлементДерева.УИД);
		ПолучитьМассивПодчиненныхУИДРекурсивно(ЭлементДерева, МассивУИД);
	КонецЦикла;
КонецФункции

&НаСервереБезКонтекста
Функция КартинкаЗадачаОпубликована(Задача)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОпубликованныеСрезПоследних.Задача КАК Задача,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ОпубликованныеСрезПоследних.СтатусПубликации = ЗНАЧЕНИЕ(Перечисление.грзнтСтатусПубликацииЗадачи.Опубликована)
	|					И ВнешниеСвязиЗадач.Предшественник ЕСТЬ NULL 
	|				ТОГДА 1
	|			КОГДА ОпубликованныеСрезПоследних.СтатусПубликации = ЗНАЧЕНИЕ(Перечисление.грзнтСтатусПубликацииЗадачи.Опубликована)
	|					И НЕ ВнешниеСвязиЗадач.Предшественник ЕСТЬ NULL 
	|				ТОГДА 2
	|			КОГДА ОпубликованныеСрезПоследних.СтатусПубликации = ЗНАЧЕНИЕ(Перечисление.грзнтСтатусПубликацииЗадачи.СнятаСПубликации)
	|					И НЕ ВнешниеСвязиЗадач.Предшественник ЕСТЬ NULL 
	|				ТОГДА 3
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Публикация
	|ИЗ
	|	РегистрСведений.грзнтОпубликованныеЗадачи.СрезПоследних(&ДатаСреза, Задача = &Задача) КАК ОпубликованныеСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.грзнтВнешниеСвязиЗадачПроекта КАК ВнешниеСвязиЗадач
	|		ПО ОпубликованныеСрезПоследних.Задача = ВнешниеСвязиЗадач.Предшественник
	|
	|СГРУППИРОВАТЬ ПО
	|	ОпубликованныеСрезПоследних.Задача";
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Публикация;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ПроверитьНеобходимостьПересчетаСроков()
	Если ЭкземплярВерсии.Пустая() Тогда
		Элементы.КомандаПересчетВсехСроков.Картинка = Новый Картинка;
	КонецЕсли;
	ИмяПрва = "РегистрСведений.грзнтВнешниеСвязиЗадачПроекта";
	ЧтениеВнешние = ЕстьПраво(ИмяПрва, "Чтение");
	Если НЕ ЧтениеВнешние Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	грзнтВнешниеСвязиЗадачПроекта.ЭкземплярВерсии
	|ИЗ
	|	РегистрСведений.грзнтВнешниеСвязиЗадачПроекта КАК грзнтВнешниеСвязиЗадачПроекта
	|ГДЕ
	|	грзнтВнешниеСвязиЗадачПроекта.ЭкземплярВерсии = &Экземпляр
	|	И грзнтВнешниеСвязиЗадачПроекта.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.грзнтТипСвязи.НачалоНачало)
	|	И грзнтВнешниеСвязиЗадачПроекта.ДатаНачалаЗадачи1 <> грзнтВнешниеСвязиЗадачПроекта.ДатаНачалаЗадачи3
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	грзнтВнешниеСвязиЗадачПроекта.ЭкземплярВерсии
	|ИЗ
	|	РегистрСведений.грзнтВнешниеСвязиЗадачПроекта КАК грзнтВнешниеСвязиЗадачПроекта
	|ГДЕ
	|	грзнтВнешниеСвязиЗадачПроекта.ЭкземплярВерсии = &Экземпляр
	|	И грзнтВнешниеСвязиЗадачПроекта.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.грзнтТипСвязи.НачалоОкончание)
	|	И грзнтВнешниеСвязиЗадачПроекта.ДатаНачалаЗадачи1 <> грзнтВнешниеСвязиЗадачПроекта.ДатаНачалаЗадачи3
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	грзнтВнешниеСвязиЗадачПроекта.ЭкземплярВерсии
	|ИЗ
	|	РегистрСведений.грзнтВнешниеСвязиЗадачПроекта КАК грзнтВнешниеСвязиЗадачПроекта
	|ГДЕ
	|	грзнтВнешниеСвязиЗадачПроекта.ЭкземплярВерсии = &Экземпляр
	|	И грзнтВнешниеСвязиЗадачПроекта.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.грзнтТипСвязи.ОкончаниеНачало)
	|	И грзнтВнешниеСвязиЗадачПроекта.ДатаОкончанияЗадачи2 <> грзнтВнешниеСвязиЗадачПроекта.ДатаОкончанияЗадачи4
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	грзнтВнешниеСвязиЗадачПроекта.ЭкземплярВерсии
	|ИЗ
	|	РегистрСведений.грзнтВнешниеСвязиЗадачПроекта КАК грзнтВнешниеСвязиЗадачПроекта
	|ГДЕ
	|	грзнтВнешниеСвязиЗадачПроекта.ЭкземплярВерсии = &Экземпляр
	|	И грзнтВнешниеСвязиЗадачПроекта.ТипСвязи = ЗНАЧЕНИЕ(Перечисление.грзнтТипСвязи.ОкончаниеОкончание)
	|	И грзнтВнешниеСвязиЗадачПроекта.ДатаОкончанияЗадачи2 <> грзнтВнешниеСвязиЗадачПроекта.ДатаОкончанияЗадачи4
	|";
	Запрос.УстановитьПараметр("Экземпляр", ЭкземплярВерсии);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Элементы.КомандаПересчетВсехСроков.Картинка = БиблиотекаКартинок.Внимание16;
	Иначе
		Элементы.КомандаПересчетВсехСроков.Картинка = Новый Картинка;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроцентГотовностиОткрытьДокумент(Задача, Проект)
	#Если НЕ Сервер Тогда
	Документ = грзнтДокументыСервер.НайтиАвтоматическийДокумент("грзнтФактическийПроцентГотовности.ФактическиеПроценты", Проект);
	ОткрытьФорму("Документ.грзнтФактическийПроцентГотовности.ФормаОбъекта", Новый Структура("Ключ, Задача", Документ, Задача));
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьИтогиПоКолонкам(СписокКолонок, НачальныйУзел)
	СоответствиеКолонок = Новый Соответствие;
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеРеквизитов = Новый Соответствие;
	Если СписокКолонок = Неопределено ИЛИ ПустаяСтрока(СписокКолонок) Тогда
		СписокКолонок = "СуммаПоступление, СуммаПоступлениеУпр, СуммаВыплата, СуммаВыплатаУпр, СуммаДоход, СуммаДоходУпр, СуммаРасход, СуммаРасходУпр, СуммаРоли, КоличествоРоли, СуммаРесурсы, КоличествоРесурсы, СуммаРесурсыОперативный, КоличествоРесурсыОперативный, СуммаМатериалы";
	КонецЕсли;
	
	ЗаполненаНастройка = Ложь;
	Для Каждого СтрокаНастройки ИЗ ЭтаФорма.НастройкаКолонок Цикл
		Если НЕ ПустаяСтрока(СтрокаНастройки.ИмяРеквизитаТаблицы) Тогда
			ЗаполненаНастройка = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗаполненаНастройка Тогда
		ЭтаФорма.УстановитьНастройкуКолонок();
	КонецЕсли;
	
	СписокКолонокСтрока = СтрЗаменить(СписокКолонок, ",", Символы.ПС);
	Для К = 1 ПО СтрЧислоСтрок(СписокКолонокСтрока) Цикл
		СтрокаКолонка = СокрЛП(СтрПолучитьСтроку(СписокКолонокСтрока, К));
		СтрокаКолонкаДерева = "ДеревоПроекта" + СтрокаКолонка;
		Если НЕ ПустаяСтрока(СтрокаКолонка) Тогда
			Для Каждого СтрокаНастройка ИЗ ЭтаФорма.НастройкаКолонок Цикл
				Если СтрокаНастройка.ИмяКолонки = СтрокаКолонкаДерева И СтрокаНастройка.Видимость И СтрокаНастройка.Функция <> "----" Тогда
					СоответствиеКолонок.Вставить(СтрокаКолонка, СтрокаНастройка.Функция);
					СоответствиеТаблиц.Вставить(СтрокаКолонка, СтрокаНастройка.ИмяТаблицыФормы);
					СоответствиеРеквизитов.Вставить(СтрокаКолонка, СтрокаНастройка.ИмяРеквизитаТаблицы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если СоответствиеКолонок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеФункций = Новый Соответствие;
	СоответствиеФункций.Вставить("СуммаПоступление", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"") Тогда ЗначениеКолонки = СтрокаТаблицы.Сумма; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаПоступлениеУпр", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"") Тогда ЗначениеКолонки = СтрокаТаблицы.СуммаУпр; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаВыплата", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата"") Тогда ЗначениеКолонки = СтрокаТаблицы.Сумма; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаВыплатаУпр", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата"") Тогда ЗначениеКолонки = СтрокаТаблицы.СуммаУпр; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаДоход", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("СуммаДоходУпр", "ЗначениеКолонки = СтрокаТаблицы.СуммаУпр;");
	СоответствиеФункций.Вставить("СуммаРасход", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("СуммаРасходУпр", "ЗначениеКолонки = СтрокаТаблицы.СуммаУпр;");
	СоответствиеФункций.Вставить("СуммаРоли", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРоли", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаРесурсы", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРесурсы", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаРесурсыОперативный", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРесурсыОперативный", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаМатериалы", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	Если НачальныйУзел = Неопределено Тогда
		ПосчитатьИтогиПоКолонкамРекурсивно("", СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций);
	Иначе
		ПосчитатьИтогиПоКолонкамОбратноРекурсивно(НачальныйУзел, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций, );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПосчитатьИтогиПоКолонкамРекурсивно(УИДРодителя, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций)
	МассивЗначений = Новый Массив;
	
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
		МассивЗначений.Добавить(ПосчитатьИтогиПоКолонкамРекурсивно(СтрокаПроекта.УИД, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций));
	КонецЦикла;
	
	СоответствиеЗначений = Новый Соответствие;
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		ЗначениеФункции = 0;
		Если НЕ ПустаяСтрока(УИДРодителя) Тогда
			Для Каждого СтрокаТаблицы ИЗ СтрокаПроектаРодитель[СоответствиеТаблиц[ЭлементСоответсвия.Ключ]] Цикл
				ЗначениеКолонки = 0;
				Попытка
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				Исключение
					СформироватьСоответствиеФункцийПоКолонкам(СоответствиеФункций);
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				КонецПопытки;
				ЗначениеФункции = ЗначениеФункции + ЗначениеКолонки;
			КонецЦикла;
		КонецЕсли;
		СоответствиеЗначений.Вставить(ЭлементСоответсвия.Ключ, ЗначениеФункции);
	КонецЦикла;
	МассивЗначений.Добавить(СоответствиеЗначений);
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		ИтоговоеЗначение = 0;
		Если ЭлементСоответсвия.Значение = "СУММА" Тогда
			Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
				ИтоговоеЗначение = ИтоговоеЗначение + ЭлементМассива[ЭлементСоответсвия.Ключ];
			КонецЦикла;
		ИначеЕсли ЭлементСоответсвия.Значение = "СРЕДНЕЕ" Тогда
			Для Каждого ЭлементМассива ИЗ МассивЗначений Цикл
				ИтоговоеЗначение = ИтоговоеЗначение + ЭлементМассива[ЭлементСоответсвия.Ключ];
			КонецЦикла;
			ИтоговоеЗначение = ?(МассивЗначений.Количество() > 0, ИтоговоеЗначение / МассивЗначений.Количество(), 0);
		ИначеЕсли ЭлементСоответсвия.Значение = "МИНИМУМ" Тогда
			ИтоговоеЗначение = ?(МассивЗначений.Количество() > 0, МассивЗначений.Получить(0)[ЭлементСоответсвия.Ключ], 0);
			Для К = 1 По МассивЗначений.Количество() - 1 Цикл
				Если ИтоговоеЗначение > МассивЗначений.Получить(К)[ЭлементСоответсвия.Ключ] Тогда
					ИтоговоеЗначение = МассивЗначений.Получить(К)[ЭлементСоответсвия.Ключ];
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЭлементСоответсвия.Значение = "МАКСИМУМ" Тогда
			ИтоговоеЗначение = ?(МассивЗначений.Количество() > 0, МассивЗначений.Получить(0)[ЭлементСоответсвия.Ключ], 0);
			Для К = 1 По МассивЗначений.Количество() - 1 Цикл
				Если ИтоговоеЗначение < МассивЗначений.Получить(К)[ЭлементСоответсвия.Ключ] Тогда
					ИтоговоеЗначение = МассивЗначений.Получить(К)[ЭлементСоответсвия.Ключ];
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СоответствиеЗначений.Вставить(ЭлементСоответсвия.Ключ, ИтоговоеЗначение);
		Если Пустаястрока(УИДРодителя) Тогда
			ЭтаФорма["ДеревоПроекта" + ЭлементСоответсвия.Ключ + "Подвал"] = ИтоговоеЗначение;
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, ЭлементСоответсвия.Ключ, ИтоговоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Возврат СоответствиеЗначений;
КонецФункции

&НаКлиенте
Функция ПосчитатьИтогиПоКолонкамОбратноРекурсивно(УИДРодителя, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций, СоответствиеРезультат)
	Если СоответствиеРезультат = Неопределено Тогда
		СоответствиеРезультат = Новый Соответствие;
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = Новый Массив;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			МассивЗначения.Добавить(СтрокаПроекта[ЭлементСоответсвия.Ключ]);
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
		ЗначениеФункции = 0;
		Если НЕ ПустаяСтрока(УИДРодителя) Тогда
			Для Каждого СтрокаТаблицы ИЗ СтрокаПроектаРодитель[СоответствиеТаблиц[ЭлементСоответсвия.Ключ]] Цикл
				ЗначениеКолонки = 0;
				Попытка
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				Исключение
					СформироватьСоответствиеФункцийПоКолонкам(СоответствиеФункций);
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				КонецПопытки;
				ЗначениеФункции = ЗначениеФункции + ЗначениеКолонки;
			КонецЦикла;
			МассивЗначения.Добавить(ЗначениеФункции);
		КонецЕсли;
		СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
	КонецЦикла;
	
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		ИтоговоеЗначение = 0;
		МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
		Если ЭлементСоответсвия.Значение = "СУММА" Тогда
			Для Каждого ЭлементМассива ИЗ МассивЗначения Цикл
				ИтоговоеЗначение = ИтоговоеЗначение + ЭлементМассива;
			КонецЦикла;
		ИначеЕсли ЭлементСоответсвия.Значение = "СРЕДНЕЕ" Тогда
			Для Каждого ЭлементМассива ИЗ МассивЗначения Цикл
				ИтоговоеЗначение = ИтоговоеЗначение + ЭлементМассива;
			КонецЦикла;
			ИтоговоеЗначение = ?(МассивЗначения.Количество() > 0, ИтоговоеЗначение / МассивЗначения.Количество(), 0);
		ИначеЕсли ЭлементСоответсвия.Значение = "МИНИМУМ" Тогда
			ИтоговоеЗначение = ?(МассивЗначения.Количество() > 0, МассивЗначения.Получить(0), 0);
			Для К = 1 По МассивЗначения.Количество() - 1 Цикл
				Если ИтоговоеЗначение > МассивЗначения.Получить(К) Тогда
					ИтоговоеЗначение = МассивЗначения.Получить(К);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЭлементСоответсвия.Значение = "МАКСИМУМ" Тогда
			ИтоговоеЗначение = ?(МассивЗначения.Количество() > 0, МассивЗначения.Получить(0), 0);
			Для К = 1 По МассивЗначения.Количество() - 1 Цикл
				Если ИтоговоеЗначение < МассивЗначения.Получить(К) Тогда
					ИтоговоеЗначение = МассивЗначения.Получить(К);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Пустаястрока(УИДРодителя) Тогда
			ЭтаФорма["ДеревоПроекта" + ЭлементСоответсвия.Ключ + "Подвал"] = ИтоговоеЗначение;
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, ЭлементСоответсвия.Ключ, ИтоговоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		ПосчитатьИтогиПоКолонкамОбратноРекурсивно(СтрокаПроектаРодитель.Родитель, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций, );
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПосчитатьОбщиеИтогиПоКолонкам(СписокКолонок, НачальныйУзел)
	СоответствиеКолонок = Новый Соответствие;
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеРеквизитов = Новый Соответствие;
	Если СписокКолонок = Неопределено ИЛИ ПустаяСтрока(СписокКолонок) Тогда
		СписокКолонок = "СуммаПоступление, СуммаПоступлениеУпр, СуммаВыплата, СуммаВыплатаУпр, СуммаДоход, СуммаДоходУпр, СуммаРасход, СуммаРасходУпр, СуммаРоли, КоличествоРоли, СуммаРесурсы, КоличествоРесурсы, СуммаРесурсыОперативный, КоличествоРесурсыОперативный, СуммаМатериалы";
	КонецЕсли;
	
	ЗаполненаНастройка = Ложь;
	Для Каждого СтрокаНастройки ИЗ ЭтаФорма.НастройкаКолонок Цикл
		Если НЕ ПустаяСтрока(СтрокаНастройки.ИмяРеквизитаТаблицы) Тогда
			ЗаполненаНастройка = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗаполненаНастройка Тогда
		ЭтаФорма.УстановитьНастройкуКолонок();
	КонецЕсли;
	
	СписокКолонокСтрока = СтрЗаменить(СписокКолонок, ",", Символы.ПС);
	Для К = 1 ПО СтрЧислоСтрок(СписокКолонокСтрока) Цикл
		СтрокаКолонка = СокрЛП(СтрПолучитьСтроку(СписокКолонокСтрока, К));
		СтрокаКолонкаДерева = "ДеревоПроекта" + СтрокаКолонка;
		Если НЕ ПустаяСтрока(СтрокаКолонка) Тогда
			Для Каждого СтрокаНастройка ИЗ ЭтаФорма.НастройкаКолонок Цикл
				Если СтрокаНастройка.ИмяКолонки = СтрокаКолонкаДерева И СтрокаНастройка.Видимость И СтрокаНастройка.Функция <> "----" Тогда
					СоответствиеКолонок.Вставить(СтрокаКолонка, СтрокаНастройка.Функция);
					СоответствиеТаблиц.Вставить(СтрокаКолонка, СтрокаНастройка.ИмяТаблицыФормы);
					СоответствиеРеквизитов.Вставить(СтрокаКолонка, СтрокаНастройка.ИмяРеквизитаТаблицы);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Если СоответствиеКолонок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СоответствиеФункций = Новый Соответствие;
	СоответствиеФункций.Вставить("СуммаПоступление", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"") Тогда ЗначениеКолонки = СтрокаТаблицы.Сумма; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаПоступлениеУпр", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"") Тогда ЗначениеКолонки = СтрокаТаблицы.СуммаУпр; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаВыплата", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата"") Тогда ЗначениеКолонки = СтрокаТаблицы.Сумма; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаВыплатаУпр", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата"") Тогда ЗначениеКолонки = СтрокаТаблицы.СуммаУпр; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаДоход", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("СуммаДоходУпр", "ЗначениеКолонки = СтрокаТаблицы.СуммаУпр;");
	СоответствиеФункций.Вставить("СуммаРасход", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("СуммаРасходУпр", "ЗначениеКолонки = СтрокаТаблицы.СуммаУпр;");
	СоответствиеФункций.Вставить("СуммаРоли", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРоли", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаРесурсы", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРесурсы", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаРесурсыОперативный", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРесурсыОперативный", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаМатериалы", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	//Если НачальныйУзел = Неопределено Тогда
	//	ПосчитатьОбщиеИтогиПоКолонкамРекурсивно("", СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций);
	//Иначе
		ПосчитатьОбщиеИтогиПоКолонкамОбратноРекурсивно(НачальныйУзел, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций, );
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПосчитатьОбщиеИтогиПоКолонкамОбратноРекурсивно(УИДРодителя, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций, СоответствиеРезультат)
	Если СоответствиеРезультат = Неопределено Тогда
		СоответствиеРезультат = Новый Соответствие;
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = Новый Массив;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			МассивЗначения.Добавить(СтрокаПроекта[ЭлементСоответсвия.Ключ]);
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
		ЗначениеФункции = 0;
		Если НЕ ПустаяСтрока(УИДРодителя) Тогда
			Для Каждого СтрокаТаблицы ИЗ СтрокаПроектаРодитель[СоответствиеТаблиц[ЭлементСоответсвия.Ключ]] Цикл
				ЗначениеКолонки = 0;
				Попытка
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				Исключение
					СформироватьСоответствиеФункцийПоКолонкам(СоответствиеФункций);
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				КонецПопытки;
				ЗначениеФункции = ЗначениеФункции + ЗначениеКолонки;
			КонецЦикла;
			МассивЗначения.Добавить(ЗначениеФункции);
		КонецЕсли;
		СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
	КонецЦикла;
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		ИтоговоеЗначение = 0;
		МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
		Если ЭлементСоответсвия.Значение = "СУММА" Тогда
			Для Каждого ЭлементМассива ИЗ МассивЗначения Цикл
				ИтоговоеЗначение = ИтоговоеЗначение + ЭлементМассива;
			КонецЦикла;
		ИначеЕсли ЭлементСоответсвия.Значение = "СРЕДНЕЕ" Тогда
			Для Каждого ЭлементМассива ИЗ МассивЗначения Цикл
				ИтоговоеЗначение = ИтоговоеЗначение + ЭлементМассива;
			КонецЦикла;
			ИтоговоеЗначение = ?(МассивЗначения.Количество() > 0, ИтоговоеЗначение / МассивЗначения.Количество(), 0);
		ИначеЕсли ЭлементСоответсвия.Значение = "МИНИМУМ" Тогда
			ИтоговоеЗначение = ?(МассивЗначения.Количество() > 0, МассивЗначения.Получить(0), 0);
			Для К = 1 По МассивЗначения.Количество() - 1 Цикл
				Если ИтоговоеЗначение > МассивЗначения.Получить(К) Тогда
					ИтоговоеЗначение = МассивЗначения.Получить(К);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЭлементСоответсвия.Значение = "МАКСИМУМ" Тогда
			ИтоговоеЗначение = ?(МассивЗначения.Количество() > 0, МассивЗначения.Получить(0), 0);
			Для К = 1 По МассивЗначения.Количество() - 1 Цикл
				Если ИтоговоеЗначение < МассивЗначения.Получить(К) Тогда
					ИтоговоеЗначение = МассивЗначения.Получить(К);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Пустаястрока(УИДРодителя) Тогда
			ЭтаФорма["ДеревоПроекта" + ЭлементСоответсвия.Ключ + "Подвал"] = ИтоговоеЗначение;
		Иначе
			//ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, ЭлементСоответсвия.Ключ, ИтоговоеЗначение);
			СтрокаПроектаРодитель[ЭлементСоответсвия.Ключ] = ИтоговоеЗначение;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		ПосчитатьОбщиеИтогиПоКолонкамОбратноРекурсивно(СтрокаПроектаРодитель.Родитель, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеРеквизитов, СоответствиеФункций, );
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СформироватьСоответствиеФункцийПоКолонкам(СоответствиеФункций)
	СоответствиеФункций = Новый Соответствие;
	СоответствиеФункций.Вставить("СуммаПоступление", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"") Тогда ЗначениеКолонки = СтрокаТаблицы.Сумма; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаПоступлениеУпр", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"") Тогда ЗначениеКолонки = СтрокаТаблицы.СуммаУпр; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаВыплата", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата"") Тогда ЗначениеКолонки = СтрокаТаблицы.Сумма; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаВыплатаУпр", "ЕСЛИ СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата"") Тогда ЗначениеКолонки = СтрокаТаблицы.СуммаУпр; КонецЕсли;");
	СоответствиеФункций.Вставить("СуммаДоход", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("СуммаРасход", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("СуммаРоли", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРоли", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаРесурсы", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРесурсы", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаРесурсыОперативный", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
	СоответствиеФункций.Вставить("КоличествоРесурсыОперативный", "ЗначениеКолонки = СтрокаТаблицы.Количество * ПолучитьРеквизитОбъекта(СтрокаТаблицы.ЕдиницаВремени, ""Коэффициент"");");
	СоответствиеФункций.Вставить("СуммаМатериалы", "ЗначениеКолонки = СтрокаТаблицы.Сумма;");
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьИтогиВалютыПоКолонкам(СписокКолонок, НачальныйУзел)
	СоответствиеКолонок = Новый Соответствие;
	
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеТаблиц.Вставить("ВалютаПоступлений", "ПланДвиженияДенежныхСредств");
	СоответствиеТаблиц.Вставить("ВалютаВыплат", "ПланДвиженияДенежныхСредств");
	СоответствиеТаблиц.Вставить("ВалютаДоходов", "ПланДоходов");
	СоответствиеТаблиц.Вставить("ВалютаРасходов", "ПланРасходов");
	СоответствиеТаблиц.Вставить("НадписьРоли", "ПланРолейОбщая");
	СоответствиеТаблиц.Вставить("НадписьРесурсы", "ПланРесурсовОбщая");
	СоответствиеТаблиц.Вставить("НадписьРесурсыОперативный", "ПланРесурсовОперативный");
	
	СоответствиеФункций = Новый Соответствие;
	СформироватьСоответствиеФункцийВалюты(СоответствиеФункций);
	
	Если СписокКолонок = Неопределено ИЛИ ПустаяСтрока(СписокКолонок) Тогда
		СписокКолонок = "ВалютаПоступлений, ВалютаВыплат, ВалютаДоходов, ВалютаРасходов, НадписьРоли, НадписьРесурсы, НадписьРесурсыОперативный";
	КонецЕсли;
	
	ЗаполненаНастройка = Ложь;
	Для Каждого СтрокаНастройки ИЗ ЭтаФорма.НастройкаКолонок Цикл
		Если НЕ ПустаяСтрока(СтрокаНастройки.ИмяРеквизитаТаблицы) Тогда
			ЗаполненаНастройка = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗаполненаНастройка Тогда
		ЭтаФорма.УстановитьНастройкуКолонок();
	КонецЕсли;
	
	СписокКолонокСтрока = СтрЗаменить(СписокКолонок, ",", Символы.ПС);
	Для К = 1 ПО СтрЧислоСтрок(СписокКолонокСтрока) Цикл
		СтрокаКолонка = СокрЛП(СтрПолучитьСтроку(СписокКолонокСтрока, К));
		СтрокаКолонкаДерева = "ДеревоПроекта" + СтрокаКолонка;
		Для Каждого СтрокаНастройка ИЗ ЭтаФорма.НастройкаКолонок Цикл
			Если СтрокаНастройка.ИмяКолонки = СтрокаКолонкаДерева И СтрокаНастройка.Видимость Тогда
				СоответствиеКолонок.Вставить(СтрокаКолонка, СтрокаКолонкаДерева); // ДеревоПроектаВалютаПоступлений - ЭтаФорма.ТаблицаПланДвиженияДенежныхСредств
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СоответствиеКолонок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НачальныйУзел = Неопределено Тогда
		ПосчитатьИтогиВалютыПоКолонкамРекурсивно("", СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций);
	Иначе
		ПосчитатьИтогиВалютыПоКолонкамОбратноРекурсивно(НачальныйУзел, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций, );
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПосчитатьИтогиВалютыПоКолонкамРекурсивно(УИДРодителя, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций)
	СоответствиеРезультат = Новый Соответствие;
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		МассивЗначения = Новый Массив;
		СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
	КонецЦикла;
	// ((( grznt.Solntsev 30.08.2016
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	// ))) grznt.Solntsev 30.08.2016
	Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
		СоответствиеВременныйРезультат = ПосчитатьИтогиВалютыПоКолонкамРекурсивно(СтрокаПроекта.УИД, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций);
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			Для Каждого ЭлементМассиваВременныйРезультат ИЗ СоответствиеВременныйРезультат[ЭлементСоответсвия.Ключ] Цикл
				Если МассивЗначения.Найти(ЭлементМассиваВременныйРезультат) = Неопределено Тогда 
					МассивЗначения.Добавить(ЭлементМассиваВременныйРезультат);
				КонецЕсли;
			КонецЦикла;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ Пустаястрока(УИДРодителя) Тогда
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			Для Каждого СтрокаТаблицы ИЗ СтрокаПроектаРодитель[СоответствиеТаблиц[ЭлементСоответсвия.Ключ]] Цикл
				Валюта = ЭтаФорма.ВалютаПустая;
				Попытка
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]); // вот здесь мы отделим зёрна от плевел и поступления от выплаты
				Исключение
					СформироватьСоответствиеФункцийВалюты(СоответствиеФункций);
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				КонецПопытки;
				Если МассивЗначения.Найти(Валюта) = Неопределено И НЕ Валюта.Пустая() Тогда
					МассивЗначения.Добавить(Валюта);
				КонецЕсли;
			КонецЦикла;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		ИтоговоеЗначение = "";
		МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
		Для Каждого ЭлементМассива ИЗ МассивЗначения Цикл
			ИтоговоеЗначение = "" + ИтоговоеЗначение + ", " + ЭлементМассива;
		КонецЦикла;
		ИтоговоеЗначение = Сред(ИтоговоеЗначение, 3);
		Если Пустаястрока(УИДРодителя) Тогда
			ЭтаФорма["ДеревоПроекта" + ЭлементСоответсвия.Ключ + "Подвал"] = ИтоговоеЗначение;
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, ЭлементСоответсвия.Ключ, ИтоговоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Возврат СоответствиеРезультат;
КонецФункции

&НаКлиенте
Функция ПосчитатьИтогиВалютыПоКолонкамОбратноРекурсивно(УИДРодителя, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций, СоответствиеРезультат)
	Если СоответствиеРезультат = Неопределено Тогда
		СоответствиеРезультат = Новый Соответствие;
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = "";
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЕсли;
	
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			СтрокаВременныйРезультат = СтрокаПроекта[ЭлементСоответсвия.Ключ];
			Пока СтрДлина(СтрокаВременныйРезультат) > 0 Цикл
				п = Найти(СтрокаВременныйРезультат, ",");
				Если п > 0 Тогда
					стрВалюта = Лев(СтрокаВременныйРезультат, п - 1);
					СтрокаВременныйРезультат = СокрЛП(Сред(СтрокаВременныйРезультат, п + 1));
				Иначе
					стрВалюта = СтрокаВременныйРезультат;
					СтрокаВременныйРезультат = "";
				КонецЕсли;
				Если Найти(МассивЗначения, стрВалюта) = 0 Тогда
					МассивЗначения = МассивЗначения + ?(ПустаяСтрока(МассивЗначения), "", ", ") + стрВалюта;
				КонецЕсли;
			КонецЦикла;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ Пустаястрока(УИДРодителя) Тогда
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			МассивЗначения = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			Для Каждого СтрокаТаблицы ИЗ СтрокаПроектаРодитель[СоответствиеТаблиц[ЭлементСоответсвия.Ключ]] Цикл
				Валюта = ЭтаФорма.ВалютаПустая;
				Попытка
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]); // вот здесь мы отделим зёрна от плевел и поступления от выплаты
				Исключение
					СформироватьСоответствиеФункцийВалюты(СоответствиеФункций);
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				КонецПопытки;
				стрВалюта = СокрЛП(Валюта);
				Если Найти(МассивЗначения, стрВалюта) = 0 Тогда
					МассивЗначения = МассивЗначения + ?(ПустаяСтрока(МассивЗначения), "", ", ") + стрВалюта;
				КонецЕсли;
			КонецЦикла;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, МассивЗначения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		ИтоговоеЗначение = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
		Если Пустаястрока(УИДРодителя) Тогда
			ЭтаФорма["ДеревоПроекта" + ЭлементСоответсвия.Ключ + "Подвал"] = ИтоговоеЗначение;
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, ЭлементСоответсвия.Ключ, ИтоговоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		ПосчитатьИтогиВалютыПоКолонкамОбратноРекурсивно(СтрокаПроектаРодитель.Родитель, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций, );
	КонецЕсли;
	Возврат СоответствиеРезультат;
КонецФункции

&НаКлиенте
Процедура СформироватьСоответствиеФункцийВалюты(СоответствиеФункций)
	СоответствиеФункций = Новый Соответствие;
	СоответствиеФункций.Вставить("ВалютаПоступлений", "Если СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Поступление"") Тогда Валюта = СтрокаТаблицы.Валюта; Иначе Валюта = ПредопределенноеЗначение(""Справочник.Валюты.ПустаяСсылка"") КонецЕсли;");
	СоответствиеФункций.Вставить("ВалютаВыплат", "Если СтрокаТаблицы.Направление = ПредопределенноеЗначение(""Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата"") Тогда Валюта = СтрокаТаблицы.Валюта; Иначе Валюта = ПредопределенноеЗначение(""Справочник.Валюты.ПустаяСсылка"") КонецЕсли;");
	СоответствиеФункций.Вставить("ВалютаДоходов", "Валюта = СтрокаТаблицы.Валюта;");
	СоответствиеФункций.Вставить("ВалютаРасходов", "Валюта = СтрокаТаблицы.Валюта;");
	СоответствиеФункций.Вставить("НадписьРоли", "Валюта = СтрокаТаблицы.Роль;");
	СоответствиеФункций.Вставить("НадписьРесурсы", "Валюта = СтрокаТаблицы.ТрудовойРесурс;");
	СоответствиеФункций.Вставить("НадписьРесурсыОперативный", "Валюта = СтрокаТаблицы.ТрудовойРесурс;");
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьИтогиПроцентовПоКолонкам(СписокКолонок, НачальныйУзел)
	СоответствиеКолонок = Новый Соответствие;
	
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеТаблиц.Вставить("ПроцентПлановойДлительности", "");
	//СоответствиеТаблиц.Вставить("ПроцентПлановыхТрудозатрат", "ПланРолейОбщая");
	СоответствиеТаблиц.Вставить("ПроцентПлановыхТрудозатрат", "");
	
	СоответствиеФункций = Новый Соответствие;
	СоответствиеФункций.Вставить("ПроцентПлановойДлительности", "Результат = ?(СтрокаТаблицы.Длительность = 0, 1, СтрокаТаблицы.Длительность);");
	//СоответствиеФункций.Вставить("ПроцентПлановыхТрудозатрат", "Результат = СтрокаТаблицы.Количество;");
	СоответствиеФункций.Вставить("ПроцентПлановыхТрудозатрат", "Результат = СтрокаТаблицы.КоличествоРоли;");
	
	Если СписокКолонок = Неопределено ИЛИ ПустаяСтрока(СписокКолонок) Тогда
		СписокКолонок = "ПроцентПлановойДлительности, ПроцентПлановыхТрудозатрат";
	КонецЕсли;
	
	ЗаполненаНастройка = Ложь;
	Для Каждого СтрокаНастройки ИЗ НастройкаКолонок Цикл
		Если НЕ ПустаяСтрока(СтрокаНастройки.ИмяРеквизитаТаблицы) Тогда
			ЗаполненаНастройка = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗаполненаНастройка Тогда
		УстановитьНастройкуКолонок();
	КонецЕсли;
	
	СписокКолонокСтрока = СтрЗаменить(СписокКолонок, ",", Символы.ПС);
	Для К = 1 ПО СтрЧислоСтрок(СписокКолонокСтрока) Цикл
		СтрокаКолонка = СокрЛП(СтрПолучитьСтроку(СписокКолонокСтрока, К));
		СтрокаКолонкаДерева = "ДеревоПроекта" + СтрокаКолонка;
		Для Каждого СтрокаНастройка ИЗ НастройкаКолонок Цикл
			Если СтрокаНастройка.ИмяКолонки = СтрокаКолонкаДерева И СтрокаНастройка.Видимость Тогда
				СоответствиеКолонок.Вставить(СтрокаКолонка, СтрокаКолонкаДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СоответствиеКолонок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НачальныйУзел = Неопределено Тогда
		ПосчитатьИтогиПроцентовПоКолонкамРекурсивно("", СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций);
	Иначе
		ПосчитатьИтогиПроцентовПоКолонкамОбратноРекурсивно(НачальныйУзел, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПосчитатьИтогиПроцентовПоКолонкамРекурсивно(УИДРодителя, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций)
	СоответствиеРезультат = Новый Соответствие;
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		СоответствиеЗначение = Новый Соответствие;
		СоответствиеЗначение.Вставить("План", 0);
		СоответствиеЗначение.Вставить("Факт", 0);
		СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, СоответствиеЗначение);
	КонецЦикла;
	
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
		СоответствиеВременныйРезультат = ПосчитатьИтогиПроцентовПоКолонкамРекурсивно(СтрокаПроекта.УИД, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций);
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			СоответствиеЗначение = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			СоответствиеЗначение["План"] = СоответствиеЗначение["План"] + СоответствиеВременныйРезультат[ЭлементСоответсвия.Ключ]["План"];
			СоответствиеЗначение["Факт"] = СоответствиеЗначение["Факт"] + СоответствиеВременныйРезультат[ЭлементСоответсвия.Ключ]["Факт"];
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, СоответствиеЗначение);
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			СоответствиеЗначение = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			Если СоответствиеТаблиц[ЭлементСоответсвия.Ключ] = "" Тогда
				СтрокиРасчета = Новый Массив;
				СтрокиРасчета.Добавить(СтрокаПроектаРодитель);
			Иначе
				СтрокиРасчета = СтрокаПроектаРодитель[СоответствиеТаблиц[ЭлементСоответсвия.Ключ]];
			КонецЕсли;
			Для Каждого СтрокаТаблицы ИЗ СтрокиРасчета Цикл
				Результат = 0;
				Попытка
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]); // вот здесь мы отделим зёрна от плевел и длительность от количества
				Исключение
					СформироватьСоответствиеФункцийПроцентов(СоответствиеФункций);
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				КонецПопытки;
				СоответствиеЗначение["План"] = СоответствиеЗначение["План"] + Результат;
				СоответствиеЗначение["Факт"] = СоответствиеЗначение["Факт"] + Результат * СтрокаПроектаРодитель.ПроцентГотовности / 100;
			КонецЦикла;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, СоответствиеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		СоответствиеЗначение = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
		ИтоговоеЗначение = ?(СоответствиеЗначение["План"] = 0, 0, СоответствиеЗначение["Факт"] * 100 / СоответствиеЗначение["План"]);
		Если Пустаястрока(УИДРодителя) Тогда
			ЭтаФорма["ДеревоПроекта" + ЭлементСоответсвия.Ключ + "Подвал"] = ИтоговоеЗначение;
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, ЭлементСоответсвия.Ключ, ИтоговоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Возврат СоответствиеРезультат;
КонецФункции

&НаКлиенте
Функция ПосчитатьИтогиПроцентовПоКолонкамОбратноРекурсивно(УИДРодителя, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций)
	СоответствиеРезультат = Новый Соответствие;
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		СоответствиеЗначение = Новый Соответствие;
		СоответствиеЗначение.Вставить("План", 0);
		СоответствиеЗначение.Вставить("Факт", 0);
		СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, СоответствиеЗначение);
	КонецЦикла;
	
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			СоответствиеЗначение = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			//СоответствиеЗначение["План"] = СоответствиеЗначение["План"] + СтрокаПроекта[ЭлементСоответсвия.Ключ];
			//СоответствиеЗначение["Факт"] = СоответствиеЗначение["Факт"] + СтрокаПроекта[ЭлементСоответсвия.Ключ] * СтрокаПроекта.ПроцентГотовности / 100;
			Если СоответствиеТаблиц[ЭлементСоответсвия.Ключ] = "" Тогда
				СтрокиРасчета = Новый Массив;
				СтрокиРасчета.Добавить(СтрокаПроекта);
			Иначе
				СтрокиРасчета = СтрокаПроекта[СоответствиеТаблиц[ЭлементСоответсвия.Ключ]];
			КонецЕсли;
			Для Каждого СтрокаТаблицы ИЗ СтрокиРасчета Цикл
				Результат = 0;
				Попытка
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]); // вот здесь мы отделим зёрна от плевел и длительность от количества
				Исключение
					СформироватьСоответствиеФункцийПроцентов(СоответствиеФункций);
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				КонецПопытки;
				СоответствиеЗначение["План"] = СоответствиеЗначение["План"] + Результат;
				СоответствиеЗначение["Факт"] = СоответствиеЗначение["Факт"] + Результат * СтрокаПроекта.ПроцентГотовности / 100;
			КонецЦикла;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, СоответствиеЗначение);
		КонецЦикла;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			СоответствиеЗначение = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
			Если СоответствиеТаблиц[ЭлементСоответсвия.Ключ] = "" Тогда
				СтрокиРасчета = Новый Массив;
				СтрокиРасчета.Добавить(СтрокаПроектаРодитель);
			Иначе
				СтрокиРасчета = СтрокаПроектаРодитель[СоответствиеТаблиц[ЭлементСоответсвия.Ключ]];
			КонецЕсли;
			Для Каждого СтрокаТаблицы ИЗ СтрокиРасчета Цикл
				Результат = 0;
				Попытка
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]); // вот здесь мы отделим зёрна от плевел и длительность от количества
				Исключение
					СформироватьСоответствиеФункцийПроцентов(СоответствиеФункций);
					Выполнить(СоответствиеФункций[ЭлементСоответсвия.Ключ]);
				КонецПопытки;
				СоответствиеЗначение["План"] = СоответствиеЗначение["План"] + Результат;
				СоответствиеЗначение["Факт"] = СоответствиеЗначение["Факт"] + Результат * СтрокаПроектаРодитель.ПроцентГотовности / 100;
			КонецЦикла;
			СоответствиеРезультат.Вставить(ЭлементСоответсвия.Ключ, СоответствиеЗначение);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
		СоответствиеЗначение = СоответствиеРезультат[ЭлементСоответсвия.Ключ];
		ИтоговоеЗначение = ?(СоответствиеЗначение["План"] = 0, 0, СоответствиеЗначение["Факт"] * 100 / СоответствиеЗначение["План"]);
		Если Пустаястрока(УИДРодителя) Тогда
			ЭтаФорма["ДеревоПроекта" + ЭлементСоответсвия.Ключ + "Подвал"] = ИтоговоеЗначение;
		Иначе
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, ЭлементСоответсвия.Ключ, ИтоговоеЗначение);
		КонецЕсли;
	КонецЦикла;
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		ПосчитатьИтогиПроцентовПоКолонкамОбратноРекурсивно(СтрокаПроектаРодитель.Родитель, СоответствиеКолонок, СоответствиеТаблиц, СоответствиеФункций)
	КонецЕсли;
	Возврат СоответствиеРезультат;
КонецФункции

&НаКлиенте
Функция ПосчитатьФактическуюДлительностьПоКолонкамРекурсивно(УИДРодителя, СоответствиеКолонок)
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	
	Для Каждого СтрокаПроекта ИЗ СтрокиПроекта Цикл
		СоответствиеВременныйРезультат = ПосчитатьФактическуюДлительностьПоКолонкамРекурсивно(СтрокаПроекта.УИД, СоответствиеКолонок);
	КонецЦикла;
	
	ПустаяДата = Дата(1,1,1);
	
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			КалендарьЗадачи = ?(СтрокаПроектаРодитель.Календарь.Пустая(), КалендарьПроекта, СтрокаПроектаРодитель.Календарь);
			Если СтрокаПроектаРодитель.ФактическаяДатаНачала = ПустаяДата И СтрокаПроектаРодитель.ФактическаяДатаОкончания = ПустаяДата Тогда
				ФактическаяДлительность = 0;
			ИначеЕсли СтрокаПроектаРодитель.ФактическаяДатаОкончания = ПустаяДата Тогда
				ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаПроектаРодитель.ФактическаяДатаНачала, грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ТекущаяДата(), КалендарьЗадачи), КалендарьЗадачи, СтрокаПроектаРодитель.ЕдиницаВремени);
			ИначеЕсли СтрокаПроектаРодитель.ФактическаяДатаНачала = ПустаяДата Тогда
				ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаПроектаРодитель.ДатаНачала, СтрокаПроектаРодитель.ФактическаяДатаОкончания, КалендарьЗадачи, СтрокаПроектаРодитель.ЕдиницаВремени);
			Иначе
				ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаПроектаРодитель.ФактическаяДатаНачала, СтрокаПроектаРодитель.ФактическаяДатаОкончания, КалендарьЗадачи, СтрокаПроектаРодитель.ЕдиницаВремени);
			КонецЕсли;
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, "ФактическаяДлительность", ФактическаяДлительность);
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПосчитатьФактическуюДлительностьПоКолонкамОбратноРекурсивно(УИДРодителя, СоответствиеКолонок)
	СтрокаПроектаРодитель = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
	СтрокаСоответсвияРодитель = ?(ПустаяСтрока(УИДРодителя), " ", УИДРодителя);
	СтрокиПроекта = тСоответствиеТаблицыРодитель.Получить(СтрокаСоответсвияРодитель);
	Если СтрокиПроекта = Неопределено Тогда
		СтрокиПроекта = Новый Массив;
	КонецЕсли;
	
	ПустаяДата = Дата(1,1,1);
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		Для Каждого ЭлементСоответсвия ИЗ СоответствиеКолонок Цикл
			КалендарьЗадачи = ?(СтрокаПроектаРодитель.Календарь.Пустая(), КалендарьПроекта, СтрокаПроектаРодитель.Календарь);
			Если СтрокаПроектаРодитель.ФактическаяДатаНачала = ПустаяДата И СтрокаПроектаРодитель.ФактическаяДатаОкончания = ПустаяДата Тогда
				ФактическаяДлительность = 0;
			ИначеЕсли СтрокаПроектаРодитель.ФактическаяДатаОкончания = ПустаяДата Тогда
				ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаПроектаРодитель.ФактическаяДатаНачала, грзнтРасчетСроковПовторноеИспользование.ПолучитьКонецДня(ТекущаяДата(), КалендарьЗадачи), КалендарьЗадачи, СтрокаПроектаРодитель.ЕдиницаВремени);
			ИначеЕсли СтрокаПроектаРодитель.ФактическаяДатаНачала = ПустаяДата Тогда
				ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаПроектаРодитель.ДатаНачала, СтрокаПроектаРодитель.ФактическаяДатаОкончания, КалендарьЗадачи, СтрокаПроектаРодитель.ЕдиницаВремени);
			Иначе
				ФактическаяДлительность = грзнтРасчетСроковПовторноеИспользование.ПолучитьКоличествоМеждуДатамиКалендаря(СтрокаПроектаРодитель.ФактическаяДатаНачала, СтрокаПроектаРодитель.ФактическаяДатаОкончания, КалендарьЗадачи, СтрокаПроектаРодитель.ЕдиницаВремени);
			КонецЕсли;
			ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаПроектаРодитель, "ФактическаяДлительность", ФактическаяДлительность);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(УИДРодителя) Тогда
		ПосчитатьФактическуюДлительностьПоКолонкамОбратноРекурсивно(СтрокаПроектаРодитель.Родитель, СоответствиеКолонок)
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПосчитатьФактическуюДлительностьПоКолонкам(СписокКолонок, НачальныйУзел)
	СоответствиеКолонок = Новый Соответствие;
	
	СоответствиеТаблиц = Новый Соответствие;
	СоответствиеТаблиц.Вставить("ФактическаяДлительность", "");
	
	Если СписокКолонок = Неопределено ИЛИ ПустаяСтрока(СписокКолонок) Тогда
		СписокКолонок = "ФактическаяДлительность";
	КонецЕсли;
	
	ЗаполненаНастройка = Ложь;
	Для Каждого СтрокаНастройки ИЗ НастройкаКолонок Цикл
		Если НЕ ПустаяСтрока(СтрокаНастройки.ИмяРеквизитаТаблицы) Тогда
			ЗаполненаНастройка = Истина;
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗаполненаНастройка Тогда
		УстановитьНастройкуКолонок();
	КонецЕсли;
	
	СписокКолонокСтрока = СтрЗаменить(СписокКолонок, ",", Символы.ПС);
	Для К = 1 ПО СтрЧислоСтрок(СписокКолонокСтрока) Цикл
		СтрокаКолонка = СокрЛП(СтрПолучитьСтроку(СписокКолонокСтрока, К));
		СтрокаКолонкаДерева = "ДеревоПроекта" + СтрокаКолонка;
		Для Каждого СтрокаНастройка ИЗ НастройкаКолонок Цикл
			Если СтрокаНастройка.ИмяКолонки = СтрокаКолонкаДерева И СтрокаНастройка.Видимость Тогда
				СоответствиеКолонок.Вставить(СтрокаКолонка, СтрокаКолонкаДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Если СоответствиеКолонок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если НачальныйУзел = Неопределено Тогда
		ПосчитатьФактическуюДлительностьПоКолонкамРекурсивно("", СоответствиеКолонок);
	Иначе
		ПосчитатьФактическуюДлительностьПоКолонкамОбратноРекурсивно(НачальныйУзел, СоответствиеКолонок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьСоответствиеФункцийПроцентов(СоответствиеФункций)
	СоответствиеФункций = Новый Соответствие;
	СоответствиеФункций.Вставить("ПроцентПлановойДлительности", "Результат = ?(СтрокаТаблицы.Длительность = 0, 1, СтрокаТаблицы.Длительность);");
	СоответствиеФункций.Вставить("ПроцентПлановыхТрудозатрат", "Результат = СтрокаТаблицы.Количество;");
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяОбъектаНаКлиенте() Экспорт
	ИмяФормыРедактирования = "Обработка.грзнтРедакторПроекта";
	ИмяФормыРедактирования = "ВнешняяОбработка.грзнтРедакторПроекта";
	Сообщить("Не забудь переделать получение имя объекта на клиенте!");
	Возврат ИмяФормыРедактирования;
КонецФункции

&НаКлиенте
Процедура яКомандаПроверка(Команда)
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораЕдиницыИзмерения(Номенклатура)
	ЗапросЕдиниц = Новый Запрос;
	ЗапросЕдиниц.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка,
	|	ЕдиницыИзмерения.Наименование
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Владелец = &Владелец";
	ЗапросЕдиниц.УстановитьПараметр("Владелец", Номенклатура);
	СписокВыбора = Новый СписокЗначений;
	Выборка = ЗапросЕдиниц.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	Возврат СписокВыбора;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДокументСсылкуОтраженияОперативногоПлана(Проект, ЭкземплярВерсии)
	ЗапросДокумент = Новый Запрос;
	ЗапросДокумент.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	грзнтПланТрудозатратРесурсовОперативный.Ссылка
	|ИЗ
	|	Документ.грзнтПланТрудозатратРесурсовОперативный КАК грзнтПланТрудозатратРесурсовОперативный
	|ГДЕ
	|	грзнтПланТрудозатратРесурсовОперативный.ЭкземплярВерсии = &ЭкземплярВерсии
	|	И грзнтПланТрудозатратРесурсовОперативный.Проект = &Проект";
	ЗапросДокумент.УстановитьПараметр("Проект", Проект);
	ЗапросДокумент.УстановитьПараметр("ЭкземплярВерсии", ЭкземплярВерсии);
	Выборка = ЗапросДокумент.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат ПредопределенноеЗначение("Документ.грзнтПланТрудозатратРесурсовОперативный.ПустаяСсылка");
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура КомандаЗаписыватьДоПосинения(Команда)
	Пока Истина Цикл
		КомандаЗаписатьСтруктуруПроекта(Команда);
		ОбработкаПрерыванияПользователя();
		СчетчикЗаписей = СчетчикЗаписей + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуПоВидуСтавки(ТекущиеДанные, Роль, Ресурс, ЕдиницаИзмерения)
	ТекущаяСтрокаДерева = Элементы.ДеревоПроекта.ТекущиеДанные;
	ТекущаяСтрокаПроект = тСоответствиеТаблицыУИД.Получить(ТекущаяСтрокаДерева.УИД);
	Календарь = ?(ТекущаяСтрокаПроект.Календарь.Пустая(), КалендарьПроекта, ТекущаяСтрокаПроект.Календарь);
	СтруктураДанные = Новый Структура;
	СтруктураДанные.Вставить("ПрофильРаспределения", ТекущиеДанные.ПрофильРаспределения);
	СтруктураДанные.Вставить("СпособПривязки", ТекущиеДанные.СпособПривязки);
	СтруктураДанные.Вставить("ДатаПривязки", ТекущиеДанные.ДатаПривязки);
	СтруктураДанные.Вставить("Количество", ТекущиеДанные.Количество);
	СтруктураДанные.Вставить("СуммаВалютная", ТекущиеДанные.Сумма);
	СтруктураДанные.Вставить("ВидСтавки", ТекущиеДанные.ВидСтавки);
	СтруктураДанные.Вставить("Проект", Проект);
	СтруктураДанные.Вставить("Валюта", ТекущиеДанные.Валюта);
	СтруктураДанные.Вставить("ДатаНачала", ТекущаяСтрокаПроект.ДатаНачала);
	СтруктураДанные.Вставить("ДатаОкончания", ТекущаяСтрокаПроект.ДатаОкончания);
	СтруктураДанные.Вставить("Роль", Роль);
	СтруктураДанные.Вставить("Ресурс", Ресурс);
	СтруктураДанные.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	СтруктураДанные.Вставить("Календарь", Календарь);
	Если СтруктураДанные.ВидСтавки.Пустая() Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.Сумма = грзнтНормыСтоимостиРесурсов.РассчитатьСтоимостьРесурса(СтруктураДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСтрокиПланаПоВалюте(СтрокаТаблицыПроекта, СтрокаПлана)
	СтруктураПлана = Новый Структура;
	СтруктураПлана.Вставить("Проект", Проект);
	СтруктураПлана.Вставить("ЭкземплярВерсии", ЭкземплярВерсии);
	СтруктураПлана.Вставить("УИД", Новый Массив);
	СтруктураПлана.Вставить("ГУИД", Новый Массив);
	СтруктураПлана.Вставить("СуммаВалютная", Новый Массив);
	СтруктураПлана.Вставить("Валюта", Новый Массив);
	СтруктураПлана.Вставить("ПрофильРаспределения", Новый Массив);
	СтруктураПлана.Вставить("СпособПривязки", Новый Массив);
	СтруктураПлана.Вставить("ДатаПривязки", Новый Массив);
	СтруктураПлана.Вставить("ДатаНачала", Новый Массив);
	СтруктураПлана.Вставить("ДатаОкончания", Новый Массив);
	СтруктураПлана.Вставить("Календарь", Новый Массив);
	
	Календарь = ?(СтрокаТаблицыПроекта.Календарь.Пустая(), КалендарьПроекта, СтрокаТаблицыПроекта.Календарь);
	
	СтруктураПлана.УИД.Добавить(СтрокаТаблицыПроекта.УИД);
	СтруктураПлана.ГУИД.Добавить(СтрокаПлана.ГУИД);
	СтруктураПлана.СуммаВалютная.Добавить(СтрокаПлана.Сумма);
	СтруктураПлана.Валюта.Добавить(СтрокаПлана.Валюта);
	СтруктураПлана.ПрофильРаспределения.Добавить(СтрокаПлана.ПрофильРаспределения);
	СтруктураПлана.СпособПривязки.Добавить(СтрокаПлана.СпособПривязки);
	СтруктураПлана.ДатаПривязки.Добавить(СтрокаПлана.ДатаПривязки);
	СтруктураПлана.ДатаНачала.Добавить(СтрокаТаблицыПроекта.ДатаНачала);
	СтруктураПлана.ДатаОкончания.Добавить(СтрокаТаблицыПроекта.ДатаОкончания);
	СтруктураПлана.Календарь.Добавить(Календарь);
	
	СтруктураВозврата = грзнтНормыСтоимостиРесурсов.РассчитатьСуммуСтрокПланаПоВалюте(СтруктураПлана);
	Если СтруктураВозврата.Свойство("Сумма") И СтруктураВозврата.Сумма.Количество() > 0 Тогда
		СтрокаПлана.СуммаУпр = СтруктураВозврата.Сумма.Получить(0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьСуммуСтрокПланаПоВалюте(СтрокаТаблицыПроекта, ИмяТаблицы)
	СтруктураПлана = Новый Структура;
	СтруктураПлана.Вставить("Проект", Проект);
	СтруктураПлана.Вставить("ЭкземплярВерсии", ЭкземплярВерсии);
	СтруктураПлана.Вставить("УИД", Новый Массив);
	СтруктураПлана.Вставить("ГУИД", Новый Массив);
	СтруктураПлана.Вставить("СуммаВалютная", Новый Массив);
	СтруктураПлана.Вставить("Валюта", Новый Массив);
	СтруктураПлана.Вставить("ПрофильРаспределения", Новый Массив);
	СтруктураПлана.Вставить("СпособПривязки", Новый Массив);
	СтруктураПлана.Вставить("ДатаПривязки", Новый Массив);
	СтруктураПлана.Вставить("ДатаНачала", Новый Массив);
	СтруктураПлана.Вставить("ДатаОкончания", Новый Массив);
	СтруктураПлана.Вставить("Календарь", Новый Массив);
	
	Календарь = ?(СтрокаТаблицыПроекта.Календарь.Пустая(), КалендарьПроекта, СтрокаТаблицыПроекта.Календарь);
	
	Для Каждого СтрокаПлана ИЗ СтрокаТаблицыПроекта[ИмяТаблицы] Цикл
		СтруктураПлана.УИД.Добавить(СтрокаТаблицыПроекта.УИД);
		СтруктураПлана.ГУИД.Добавить(СтрокаПлана.ГУИД);
		СтруктураПлана.СуммаВалютная.Добавить(СтрокаПлана.Сумма);
		СтруктураПлана.Валюта.Добавить(СтрокаПлана.Валюта);
		СтруктураПлана.ПрофильРаспределения.Добавить(СтрокаПлана.ПрофильРаспределения);
		СтруктураПлана.СпособПривязки.Добавить(СтрокаПлана.СпособПривязки);
		СтруктураПлана.ДатаПривязки.Добавить(СтрокаПлана.ДатаПривязки);
		СтруктураПлана.ДатаНачала.Добавить(СтрокаТаблицыПроекта.ДатаНачала);
		СтруктураПлана.ДатаОкончания.Добавить(СтрокаТаблицыПроекта.ДатаОкончания);
		СтруктураПлана.Календарь.Добавить(Календарь);
	КонецЦикла;
	
	СтруктураВозврата = грзнтНормыСтоимостиРесурсов.РассчитатьСуммуСтрокПланаПоВалюте(СтруктураПлана);
	Если СтруктураВозврата.Свойство("Сумма") Тогда
		Для Каждого СтрокаПлана ИЗ СтрокаТаблицыПроекта[ИмяТаблицы] Цикл
			ИндексПлана = СтруктураВозврата.ГУИД.Найти(СтрокаПлана.ГУИД);
			Если ИндексПлана <> Неопределено Тогда
				СтрокаПлана.СуммаУпр = СтруктураВозврата.Сумма.Получить(ИндексПлана);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗадачиДругогоПроекта(СтруктураВыбора)
	ЭтаФорма.Модифицированность = Истина;
	
	ДополнитьСтруктуруВыбораДаннымиПереносаЗадачиДругогоПроекта(СтруктураВыбора);
	
	НачатьДействие();
	МассивСообщенийСерверу = Новый Массив;
	
	УИДДобавляемой = "";
	
	СоответствиеНовыеУИД = Новый Соответствие;
	Для Каждого ЭлементСпискаЗадач ИЗ СтруктураВыбора.СписокЗадач Цикл
		СтруктураЗадачи = ЭлементСпискаЗадач.Значение;
		
		Если СтруктураЗадачи.Родитель.Пустая() Тогда
			УИДРодителя = СтруктураВыбора.УИД;
		Иначе
			УИДРодителя = СоответствиеНовыеУИД.Получить(СтруктураЗадачи.Родитель);
		КонецЕсли;
		
		ЭлементРодитель = ДеревоПроекта;
		Если НЕ ПустаяСтрока(УИДРодителя) Тогда
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
			Если СтрокаТаблицыПроекта <> Неопределено И СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				ЭлементРодитель = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭлемент = ЭлементРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьНачальныеЗначенияСтроки(НовыйЭлемент);
		ЗаполнитьЗначенияСвойств(НовыйЭлемент, СтруктураЗадачи, "НаименованиеЗадачи, ВидЭлемента, ВидОперации");
		НовыйЭлемент.Родитель = УИДРодителя;
		
		Если СтруктураЗадачи.Задача = СтруктураВыбора.Задача Тогда
			УИДДобавляемой = НовыйЭлемент.УИД;
		КонецЕсли;
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ДобавлениеЗадачи");
		ОписаниеСобытия.Вставить("ИдентификаторСтроки", НовыйЭлемент.ПолучитьИдентификатор());
		ДобавитьСобытиеДерева(ОписаниеСобытия);
		
		СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(НовыйЭлемент.УИД);
		
		Если СтруктураВыбора.ПереноситьСрокиИДлительность Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПлановыеСроки Цикл
				Если СтруктураПлана.Задача = СтруктураЗадачи.Задача Тогда
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ДатаНачала", СтруктураПлана.ДатаНачала);
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ДатаОкончания", СтруктураПлана.ДатаОкончания);
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Длительность", СтруктураПлана.Длительность);
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ЕдиницаВремени", СтруктураПлана.ЕдиницаВремени);
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Календарь", СтруктураПлана.Календарь);
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "РучнойВвод", СтруктураПлана.РучнойВвод);
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ТипОграничения", СтруктураПлана.ОграничениеСроковЗадачи);
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ДатаОграничения", СтруктураПлана.ДатаОграниченияСроковЗадачи);
					СтруктураПлана.Вставить("УИД", СтрокаТаблицыПроекта.УИД);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтруктураСообщенияНаСервер = Новый Структура;
		СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "ДобавлениеЗадачи");
		СтруктураДанныхЗадачи = Новый Структура("Идентификатор, УИД, ДатаНачала, ДатаОкончания, РучнойВвод, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель, ТипОграничения, ДатаОграничения");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхЗадачи, НовыйЭлемент);
		СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
		МассивСообщенийСерверу.Вставить(0, СтруктураСообщенияНаСервер);
	
		СоответствиеНовыеУИД.Вставить(СтруктураЗадачи.Задача, НовыйЭлемент.УИД);
	КонецЦикла;
	
	Если СтруктураВыбора.ПереноситьДДС Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланДДС Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланДвиженияДенежныхСредств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьДоходы Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланДоходы Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланДоходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьРасходы Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланРасходы Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьТрудозатратыПоРолям Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланТрудозатратыРолей Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланРолейОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланРолейОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьТрудозатратыПоРесурсам Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланТрудозатратРесурсов Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланРесурсовОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланРесурсовОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьМатериалы Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланМатериалы Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланМатериаловОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланМатериаловОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьКомментарии Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.Комментарии Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.КомментарииКЗадаче.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.КомментарииКЗадаче.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
			СтрокаДерева.ЕстьКомментарий = ?(СтрокаДерева.КомментарииКЗадаче.Количество() = 0, 0, 1);
		КонецЦикла;
	КонецЕсли;
	
	// из-за логики отображения переключателя, из-за поздней переделки формы выбора у нас логика перевёрнута на этом флаге
	Если НЕ СтруктураВыбора.ПереноситьВЭкземпляры Тогда
		//СтруктураВыбора.Вставить("ПереноситьВЭкземпляры", ПереноситьВЭкземпляры);
		//СтруктураВыбора.Вставить("МассивЭкземпляров", МассивЭкземпляров);
		ТекстСообщения = "";
		Если СоздатьНедостающиеПроекты(ТекстСообщения) Тогда
			ВыполнитьОтражениеЗадачиВЭкземплярахВерсийНаСервере(УИДДобавляемой, СтруктураВыбора);
		Иначе
			 ПоказатьПредупреждение(, "Ошибка записи структуры проекта." + Символы.ПС + ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьСДРДерева(ДеревоСДР, Истина);
	
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ПоказатьКнопкиКоличествоУровней();
	Если СтруктураВыбора.ПереноситьЗадачаВместеСПодчиненными Тогда
		ПосчитатьИтогиПоКолонкам("", );
		ПосчитатьИтогиВалютыПоКолонкам("", );
		ПосчитатьИтогиПроцентовПоКолонкам("", );
		ПосчитатьФактическуюДлительностьПоКолонкам("", );
	Иначе
		ПосчитатьИтогиПоКолонкам("", НовыйЭлемент.УИД);
		ПосчитатьИтогиВалютыПоКолонкам("", НовыйЭлемент.УИД);
		//ПосчитатьИтогиПроцентовПоКолонкам("", НовыйЭлемент.УИД);
		ПосчитатьИтогиПроцентовПоКолонкам("", );
		ПосчитатьФактическуюДлительностьПоКолонкам("", НовыйЭлемент.УИД);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементыСтруктурыПроекта(СтруктураВыбора)
	ЭтаФорма.Модифицированность = Истина;
	
	ДополнитьСтруктуруВыбораДаннымиПереносаЭлементаСтруктурыПроекта(СтруктураВыбора);
	
	НачатьДействие();
	МассивСообщенийСерверу = Новый Массив;
	
	УИДДобавляемой = "";
	
	СоответствиеНовыеУИД = Новый Соответствие;
	Для Каждого ЭлементСпискаЗадач ИЗ СтруктураВыбора.СписокЗадач Цикл
		СтруктураЗадачи = ЭлементСпискаЗадач.Значение;
		
		Если СтруктураЗадачи.Родитель.Пустая() Тогда
			УИДРодителя = СтруктураВыбора.УИД;
		Иначе
			УИДРодителя = СоответствиеНовыеУИД.Получить(СтруктураЗадачи.Родитель);
		КонецЕсли;
		
		ЭлементРодитель = ДеревоПроекта;
		Если НЕ ПустаяСтрока(УИДРодителя) Тогда
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(УИДРодителя);
			Если СтрокаТаблицыПроекта <> Неопределено И СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				ЭлементРодитель = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
			КонецЕсли;
		КонецЕсли;
		
		НовыйЭлемент = ЭлементРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьНачальныеЗначенияСтроки(НовыйЭлемент);
		НовыйЭлемент.НаименованиеЗадачи = СтруктураЗадачи.ПолноеНаименование;
		НовыйЭлемент.ВидЭлемента = СтруктураЗадачи.ВидЭлемента;
		НовыйЭлемент.Родитель = УИДРодителя;
		
		Если СтруктураЗадачи.Элемент = СтруктураВыбора.Элемент Тогда
			УИДДобавляемой = НовыйЭлемент.УИД;
		КонецЕсли;
		
		ОписаниеСобытия = Новый Структура;
		ОписаниеСобытия.Вставить("Событие", "ДобавлениеЗадачи");
		ОписаниеСобытия.Вставить("ИдентификаторСтроки", НовыйЭлемент.ПолучитьИдентификатор());
		ДобавитьСобытиеДерева(ОписаниеСобытия);
		
		СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(НовыйЭлемент.УИД);
		
		Если СтруктураВыбора.ПереноситьСрокиИДлительность Тогда
			Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПлановыеСроки Цикл
				Если СтруктураПлана.Элемент = СтруктураЗадачи.Элемент Тогда
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "Длительность", СтруктураПлана.Длительность);
					ДобавитьСобытиеИзменениеРеквизитаЗадачиИзТаблицы(СтрокаТаблицыПроекта, "ЕдиницаВремени", СтруктураПлана.ЕдиницаВремени);
					СтруктураПлана.Вставить("УИД", СтрокаТаблицыПроекта.УИД);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		СтруктураСообщенияНаСервер = Новый Структура;
		СтруктураСообщенияНаСервер.Вставить("ИмяСобытия", "ДобавлениеЗадачи");
		СтруктураДанныхЗадачи = Новый Структура("Идентификатор, УИД, ДатаНачала, ДатаОкончания, РучнойВвод, Длительность, ЕдиницаВремени, Календарь, РДН, РДО, ПДН, ПДО, Родитель, ТипОграничения, ДатаОграничения");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхЗадачи, НовыйЭлемент);
		СтруктураСообщенияНаСервер.Вставить("ДанныеЗадачи", СтруктураДанныхЗадачи);
		МассивСообщенийСерверу.Вставить(0, СтруктураСообщенияНаСервер);
	
		СоответствиеНовыеУИД.Вставить(СтруктураЗадачи.Элемент, НовыйЭлемент.УИД);
	КонецЦикла;
	
	Если СтруктураВыбора.ПереноситьДДС Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланДДС Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Элемент));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланДвиженияДенежныхСредств.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланДвиженияДенежныхСредств.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьДоходы Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланДоходы Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланДоходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланДоходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьРасходы Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланРасходы Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланРасходов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланРасходов.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьТрудозатратыПоРолям Тогда
		Для Каждого СтруктураПлана ИЗ СтруктураВыбора.ПланТрудозатратыРолей Цикл
			СтрокаТаблицыПроекта = тСоответствиеТаблицыУИД.Получить(СоответствиеНовыеУИД.Получить(СтруктураПлана.Задача));
			СтрокаПланаТаблицы = СтрокаТаблицыПроекта.ПланРолейОбщая.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПланаТаблицы, СтруктураПлана);
			СтрокаПланаТаблицы.ГУИД = Новый УникальныйИдентификатор;
			
			Если СтрокаТаблицыПроекта.Идентификатор >= 0 Тогда
				СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицыПроекта.Идентификатор);
				СтрокаПланаДерева = СтрокаДерева.ПланРолейОбщая.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПланаДерева, СтрокаПланаТаблицы); // гуид сразу заполнен
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// из-за логики отображения переключателя, из-за поздней переделки формы выбора у нас логика перевёрнута на этом флаге
	Если НЕ СтруктураВыбора.ПереноситьВЭкземпляры Тогда
		//СтруктураВыбора.Вставить("ПереноситьВЭкземпляры", ПереноситьВЭкземпляры);
		//СтруктураВыбора.Вставить("МассивЭкземпляров", МассивЭкземпляров);
		ТекстСообщения = "";
		Если СоздатьНедостающиеПроекты(ТекстСообщения) Тогда
			ВыполнитьОтражениеЗадачиВЭкземплярахВерсийНаСервере(УИДДобавляемой, СтруктураВыбора);
		Иначе
			 ПоказатьПредупреждение(, "Ошибка записи структуры проекта." + Символы.ПС + ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	ПересчитатьСДРДерева(ДеревоСДР, Истина);
	
	МассивИзменений = Новый Массив;
	АдресВременногоХранилищаДанныхНаСервере = РекурсивныйПересчетПриИзмененииДерева(АдресВременногоХранилищаДанныхНаСервере, ЭтаФорма.УникальныйИдентификатор, МассивСообщенийСерверу, МассивИзменений, РежимУчитыватьФакт);
	ОбновитьТаблицуПроектаПоМассивуИзменений(МассивИзменений, Ложь);
	
	ПоказатьКнопкиКоличествоУровней();
	Если СтруктураВыбора.ПереноситьЗадачаВместеСПодчиненными Тогда
		ПосчитатьИтогиПоКолонкам("", );
		ПосчитатьИтогиВалютыПоКолонкам("", );
		ПосчитатьИтогиПроцентовПоКолонкам("", );
		ПосчитатьФактическуюДлительностьПоКолонкам("", );
	Иначе
		ПосчитатьИтогиПоКолонкам("", НовыйЭлемент.УИД);
		ПосчитатьИтогиВалютыПоКолонкам("", НовыйЭлемент.УИД);
		//ПосчитатьИтогиПроцентовПоКолонкам("", НовыйЭлемент.УИД);
		ПосчитатьИтогиПроцентовПоКолонкам("", );
		ПосчитатьФактическуюДлительностьПоКолонкам("", НовыйЭлемент.УИД);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ВыполнитьОтражениеЗадачиВЭкземплярахВерсийНаСервере(УИДДобавляемой, СтруктураПараметров)
	Для Каждого ЭкземплярПриемник ИЗ СтруктураПараметров.МассивЭкземпляров Цикл
		Если ЭкземплярПриемник <> СтруктураПараметров.ЭкземплярВерсии Тогда
			ВыполнитьОтражениеЗадачиВЭкземпляреВерсииНаСервере(ЭкземплярПриемник, УИДДобавляемой, СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Функция ДополнитьСтруктуруВыбораДаннымиПереносаЗадачиДругогоПроекта(СтруктураВыбора)
	ЗапросЗадачи = Новый Запрос;
	ЗапросЗадачи.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	грзнтСДРПроектов.Задача,
	|	СпрПроекты.грзнтПолноеНаименование КАК НаименованиеЗадачи,
	|	СпрПроекты.грзнтВидОперации КАК ВидОперации,
	|	СпрПроекты.грзнтВидЭлемента КАК ВидЭлемента,
	|	грзнтСДРПроектов.НомерСтрокиПроекта,
	|	грзнтСДРПроектов.Родитель
	|ИЗ
	|	РегистрСведений.грзнтСДРПроектов КАК грзнтСДРПроектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты КАК СпрПроекты
	|		ПО грзнтСДРПроектов.Задача = СпрПроекты.Ссылка
	|ГДЕ
	|	грзнтСДРПроектов.ЭкземплярВерсии = &ЭкземплярВерсии
	|
	|УПОРЯДОЧИТЬ ПО
	|	грзнтСДРПроектов.НомерСтрокиПроекта";
	ЗапросЗадачи.УстановитьПараметр("ЭкземплярВерсии", СтруктураВыбора.ЭкземплярВерсии);
	ТаблицаПроектаИсточник = ЗапросЗадачи.Выполнить().Выгрузить();
	
	ЗапросПланы = Новый Запрос;
	ЗапросПланы.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПлановыеСрокиПроекта.СрокиПроекта КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланДвиженияДенежныхСредствПроекта.ДвиженияДенежныхСредств КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланДоходовРасходовПроекта.ПланДоходов КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланДоходовРасходовПроекта.ПланРасходов КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланТрудозатратРолейЧасы.Роли КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланТрудозатратРолейФинансы.Роли КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланТрудозатратРесурсовЧасы.ТрудовыеРесурсы КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланТрудозатратРесурсовФинансы.ТрудовыеРесурсы КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланЗатратМатериаловКоличество.Материалы КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии;
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ДокументПлан.* ИЗ Документ.грзнтПланЗатратМатериаловСумма.Материалы КАК ДокументПлан ГДЕ ДокументПлан.Ссылка.ЭкземплярВерсии = &ЭкземплярВерсии
	|";
	ЗапросПланы.УстановитьПараметр("ЭкземплярВерсии", СтруктураВыбора.ЭкземплярВерсии);
	МассивРезультатыПланы = ЗапросПланы.ВыполнитьПакет();
	// Сформируем просто список задач с наименованиями и видами операций
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("Задача");
	ТаблицаЗадач.Колонки.Добавить("НаименованиеЗадачи");
	ТаблицаЗадач.Колонки.Добавить("ВидОперации");
	ТаблицаЗадач.Колонки.Добавить("ВидЭлемента");
	ТаблицаЗадач.Колонки.Добавить("Родитель");
	ТаблицаЗадач.Колонки.Добавить("НомерСтрокиПроекта");
	
	МассивЗадачДобавить = Новый Массив;
	// Найдём выбранную
	СтрокаТаблицы = ТаблицаПроектаИсточник.Найти(СтруктураВыбора.Задача, "Задача");
	// Принудительно очистим ей родителя (чтобы знать корень, какую мы импортировали)
	СтрокаТаблицы.Родитель = ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка");
	МассивЗадачДобавить.Добавить(СтрокаТаблицы);
	Пока МассивЗадачДобавить.Количество() > 0 Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЗадач.Добавить(), МассивЗадачДобавить.Получить(0));
		Если СтруктураВыбора.ПереноситьЗадачаВместеСПодчиненными Тогда
			СтрокиПодчиненные = ТаблицаПроектаИсточник.НайтиСтроки(Новый Структура("Родитель", МассивЗадачДобавить.Получить(0).Задача));
			Для Каждого ПодчиненнаяСтрока ИЗ СтрокиПодчиненные Цикл
				МассивЗадачДобавить.Добавить(ПодчиненнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		МассивЗадачДобавить.Удалить(0);
	КонецЦикла;
	ТаблицаЗадач.Сортировать("НомерСтрокиПроекта");
	СписокЗадач = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗадач Цикл
		СтруктураЗадачи = Новый Структура("Задача, НаименованиеЗадачи, ВидОперации, ВидЭлемента, Родитель, НомерСтрокиПроекта");
		ЗаполнитьЗначенияСвойств(СтруктураЗадачи, СтрокаТаблицы);
		СписокЗадач.Добавить(СтруктураЗадачи);
	КонецЦикла;
	СтруктураВыбора.Вставить("СписокЗадач", СписокЗадач);
	
	// По одному будем переносить планы
	
	Если СтруктураВыбора.ПереноситьСрокиИДлительность Тогда
		МассивПлана = Новый Массив;
		// Шаблон структуры, всего раз определим
		СтруктураПереноса = Новый Структура("Задача, ДатаНачала, ДатаОкончания, Длительность, ЕдиницаВремени, Календарь, РучнойВвод, ОграничениеСроковЗадачи, ДатаОграниченияСроковЗадачи");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(0).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Задача", ЭлементСпискаПроекта.Значение.Задача));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПлановыеСроки", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьДДС Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланДДС));
		СтруктураПереноса.Удалить("ГУИД");
		СтруктураПереноса.Вставить("Задача");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(1).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Задача", ЭлементСпискаПроекта.Значение.Задача));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланДДС", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьДоходы Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланДоходы));
		СтруктураПереноса.Удалить("ГУИД");
		СтруктураПереноса.Вставить("Задача");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(2).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Задача", ЭлементСпискаПроекта.Значение.Задача));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланДоходы", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьРасходы Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПланРасходы));
		СтруктураПереноса.Удалить("ГУИД");
		СтруктураПереноса.Вставить("Задача");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(3).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Задача", ЭлементСпискаПроекта.Значение.Задача));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланРасходы", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьТрудозатратыПоРолям Тогда
		МассивПлана = Новый Массив;
		ТаблицаПереносаКоличество = МассивРезультатыПланы.Получить(4).Выгрузить();
		ТаблицаПереносаСумма = МассивРезультатыПланы.Получить(5).Выгрузить();
		СтруктураПереноса = Новый Структура("Задача, Роль, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета, Задача");
		МассивПлана = СформироватьМассивПлана(ТаблицаПереносаКоличество, ТаблицаПереносаСумма, СписокЗадач, СтруктураПереноса);
		СтруктураВыбора.Вставить("ПланТрудозатратыРолей", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьТрудозатратыПоРесурсам Тогда
		МассивПлана = Новый Массив;
		ТаблицаПереносаКоличество = МассивРезультатыПланы.Получить(6).Выгрузить();
		ТаблицаПереносаСумма = МассивРезультатыПланы.Получить(7).Выгрузить();
		СтруктураПереноса = Новый Структура("Задача, Роль, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаВремени, Организация, Подразделение, Номенклатура, ЗонаРасчета, ТрудовойРесурс");
		МассивПлана = СформироватьМассивПлана(ТаблицаПереносаКоличество, ТаблицаПереносаСумма, СписокЗадач, СтруктураПереноса);
		СтруктураВыбора.Вставить("ПланТрудозатратРесурсов", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьМатериалы Тогда
		МассивПлана = Новый Массив;
		ТаблицаПереносаКоличество = МассивРезультатыПланы.Получить(8).Выгрузить();
		ТаблицаПереносаСумма = МассивРезультатыПланы.Получить(9).Выгрузить();
		СтруктураПереноса = Новый Структура("Задача, Валюта, ПрофильРаспределения, ОтражатьВРасходах, Контрагент, ДоговорКонтрагента, Статья, СпособПривязки, ДатаПривязки, ВидСтавки, ЕдиницаИзмерения, Организация, Подразделение, Номенклатура, ЗонаРасчета");
		МассивПлана = СформироватьМассивПлана(ТаблицаПереносаКоличество, ТаблицаПереносаСумма, СписокЗадач, СтруктураПереноса);
		СтруктураВыбора.Вставить("ПланМатериалы", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьКомментарии Тогда
		МассивПлана = Новый Массив;
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтруктураПереноса= Новый Структура("ДатаВремя, Пользователь, Комментарий, Собственный, Задача", 
				ТекущаяДата(), ПараметрыСеанса.ТекущийПользователь, "Добавлено копированием из проекта """ + СтруктураВыбора.Проект + """", Истина, ЭлементСпискаПроекта.Значение.Задача);
			МассивПлана.Добавить(СтруктураПереноса);
		КонецЦикла;
		СтруктураВыбора.Вставить("Комментарии", МассивПлана);
	КонецЕсли;
КонецФункции

&НаСервере
Функция ДополнитьСтруктуруВыбораДаннымиПереносаЭлементаСтруктурыПроекта(СтруктураВыбора)
	ЗапросЗадачи = Новый Запрос;
	ИмяСправочника = СтруктураВыбора.Справочник;
	Если ИмяСправочника = "грзнтПродукты" Тогда
		ИмяПредшественники = "СвязиПродуктов";
		ИмяПредшественник = "Предшественник";
		ИмяРегистра = "грзнтЗначенияРеквизитовЭлементовПродуктов";
	ИначеЕсли ИмяСправочника = "грзнтТехнологическиеПроцессы" Тогда
		ИмяПредшественники = "Предшественники";
		ИмяПредшественник = "ТехнологическийПроцесс";
		ИмяРегистра = "грзнтЗначенияРеквизитовЭлементовТехнологическихПроцессов";
	ИначеЕсли ИмяСправочника = "грзнтУправленческиеРаботы" Тогда
		ИмяПредшественники = "Предшественники";
		ИмяПредшественник = "УправленческаяРабота";
		ИмяРегистра = "грзнтЗначенияРеквизитовЭлементовУправленческихРабот";
	ИначеЕсли ИмяСправочника = "грзнтЮридическиеДоговоры" Тогда
		ИмяРегистра = "грзнтЗначенияРеквизитовЭлементовЮридическихДоговоров";
	КонецЕсли;
	
	ЗапросЗадачи.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрВыбора.Ссылка КАК Элемент,
	|	СпрВыбора.ПолноеНаименование,
	//|	ЗНАЧЕНИЕ(Справочник.грзнтВидыЭлементовПроекта.Задача) КАК ВидЭлемента,
	|	СпрВыбора.Родитель
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК СпрВыбора
	|ГДЕ
	|	СпрВыбора.Ссылка В ИЕРАРХИИ(&ЭлементСправочника)";
	ЗапросЗадачи.УстановитьПараметр("ЭлементСправочника", СтруктураВыбора.Элемент);
	ТаблицаПроектаИсточник = ЗапросЗадачи.Выполнить().Выгрузить();
	
	//?(СтруктураВыбора.ПереноситьИерархию
	ЗапросПланы = Новый Запрос;
	ЗапросПланы.Текст =
	"
	|" + ?(СтруктураВыбора.ПереноситьСрокиИДлительность, "ВЫБРАТЬ РАЗРЕШЕННЫЕ РегстрДлительность." + ИмяПредшественник + " КАК Элемент, РегистрДлительность.Длительность, РегистрДлительность.ЕдиницаВремени ИЗ РегистрСведений." + ИмяРегистра + ".СрезПоследних КАК РегистрДлительность ГДЕ РегистрДлительность." + ИмяПредшественник + " В ИЕРАРХИИ(&ЭлементСправочник)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьСвязи, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланПредшественник.Ссылка КАК Элемент, СправочникПланПредшественник.* ИЗ Справочник." + ИмяСправочника + "." + ИмяПредшественники + " КАК СправочникПланПредшественники ГДЕ СправочникПланПредшественники.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьТрудозатратыПоРолям, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланРолей.Ссылка КАК Элемент, СправочникПланРолей.* ИЗ Справочник." + ИмяСправочника + ".ПланТрудозатрат КАК СправочникПланРолей ГДЕ СправочникПланРолей.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьДДС, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланДДС.Ссылка КАК Элемент, СправочникПланДДС.* ИЗ Справочник." + ИмяСправочника + ".ПланДДС КАК СправочникПланДДС ГДЕ СправочникПланДДС.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьДоходы, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланДоходы.Ссылка КАК Элемент, СправочникПланДоходы.* ИЗ Справочник." + ИмяСправочника + ".ПланДоходы КАК СправочникПланДоходы ГДЕ СправочникПланДоходы.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьРасходы, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланРасходы.Ссылка КАК Элемент, СправочникПланРасходы.* ИЗ Справочник." + ИмяСправочника + ".ПланРасходы КАК СправочникПланРасходы ГДЕ СправочникПланРасходы.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + "
	|";
	ЗапросПланы.УстановитьПараметр("ЭлементСправочника", СтруктураВыбора.Элемент);
	МассивРезультатыПланы = ЗапросПланы.ВыполнитьПакет();
	// Сформируем просто список задач с наименованиями и видами операций
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("Элемент");
	ТаблицаЗадач.Колонки.Добавить("ПолноеНаименование");
	ТаблицаЗадач.Колонки.Добавить("Родитель");
	ТаблицаЗадач.Колонки.Добавить("ВидЭлемента");
	ТаблицаЗадач.Колонки.Добавить("НомерСтрокиПроекта");
	
	МассивЗадачДобавить = Новый Массив;
	// Найдём выбранную
	СтрокаТаблицы = ТаблицаПроектаИсточник.Найти(СтруктураВыбора.Элемент, "Элемент");
	НомерСтрокиПроекта = 1;
	
	МассивЗадачДобавить.Добавить(СтрокаТаблицы);
	Пока МассивЗадачДобавить.Количество() > 0 Цикл
		СтрокаТаблицы = ТаблицаЗадач.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МассивЗадачДобавить.Получить(0), "Элемент, ПолноеНаименование");
		// Принудительно очистим выбранному родителя (чтобы знать корень, какую мы импортировали)
		СтрокаРодитель = ТаблицаПроектаИсточник.Найти(СтрокаТаблицы.Родитель, "Элемент");
		СтрокаТаблицы.Родитель = ?(СтрокаРодитель = Неопределено, ПредопределенноеЗначение("Справочник." + ИмяСправочника + ".ПустаяСсылка"), СтрокаРодитель.Элемент);
		СтрокаТаблицы.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача");
		СтрокаТаблицы.НомерСтрокиПроекта = НомерСтрокиПроекта;
		НомерСтрокиПроекта = НомерСтрокиПроекта + 1;
		
		Если СтруктураВыбора.ПереноситьЗадачаВместеСПодчиненными Тогда
			СтрокиПодчиненные = ТаблицаПроектаИсточник.НайтиСтроки(Новый Структура("Родитель", МассивЗадачДобавить.Получить(0).Элемент));
			Если СтрокиПодчиненные.Количество() > 0 Тогда
				СтрокаТаблицы.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
			КонецЕсли;
			Для Каждого ПодчиненнаяСтрока ИЗ СтрокиПодчиненные Цикл
				МассивЗадачДобавить.Добавить(ПодчиненнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		МассивЗадачДобавить.Удалить(0);
	КонецЦикла;
	ТаблицаЗадач.Сортировать("НомерСтрокиПроекта");
	
	СписокЗадач = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗадач Цикл
		СтруктураЗадачи = Новый Структура("Элемент, ПолноеНаименование, ВидЭлемента, Родитель");
		ЗаполнитьЗначенияСвойств(СтруктураЗадачи, СтрокаТаблицы);
		СписокЗадач.Добавить(СтруктураЗадачи);
	КонецЦикла;
	СтруктураВыбора.Вставить("СписокЗадач", СписокЗадач);
	
	// По одному будем переносить планы
	Если СтруктураВыбора.ПереноситьСрокиИДлительность Тогда
		МассивПлана = Новый Массив;
		// Шаблон структуры, всего раз определим
		СтруктураПереноса = Новый Структура("Элемент, Длительность, ЕдиницаВремени");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(0).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПлановыеСроки", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьДДС Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, Направление, Статья, ПрофильРаспределения, Сумма, Валюта, СпособПривязки, СтатьяДвиженияДенежныхСредств");
		
		
		
		ТаблицаПереноса = МассивРезультатыПланы.Получить(3).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				СтруктураЗаписи.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
				СтруктураЗаписи.СтатьяДвиженияДенежныхСредств = СтрокаПереноса.Статья;
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланДДС", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьДоходы Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, Статья, ПрофильРаспределения, Сумма, Валюта, СпособПривязки");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(4).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				СтруктураЗаписи.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланДоходы", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьРасходы Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, Статья, ПрофильРаспределения, Сумма, Валюта, СпособПривязки");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(5).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				СтруктураЗаписи.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланРасходы", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьТрудозатратыПоРолям Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, Роль, Количество, ЕдиницаВремени, ПрофильРаспределения, Сумма, Валюта, СпособПривязки");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(2).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				СтруктураЗаписи.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланРРоли", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьСвязи Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, " + ИмяПредшественник + ", Задержка, ЕдиницаВремени, Календарь");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(1).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("Предшественники", МассивПлана);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьМассивПлана(ТаблицаПереносаКоличество, ТаблицаПереносаСумма, СписокЗадач, СтруктураПереноса);
	ТаблицаПлана = Новый ТаблицаЗначений;
	СтрокаСвертки = "";
	Для Каждого КлючИЗначение ИЗ СтруктураПереноса Цикл
		ТаблицаПлана.Колонки.Добавить(КлючИЗначение.Ключ);
		СтрокаСвертки = "" + СтрокаСвертки + ", " + КлючИЗначение.Ключ;
	КонецЦикла;
	ТаблицаПлана.Колонки.Добавить("Количество");
	ТаблицаПлана.Колонки.Добавить("Сумма");
	ТаблицаПлана.Колонки.Добавить("СуммаУпр");
	
	Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
		СтрокиПереносаКоличество = ТаблицаПереносаКоличество.НайтиСтроки(Новый Структура("Задача", ЭлементСпискаПроекта.Значение.Задача));
		Для Каждого СтрокаПереноса ИЗ СтрокиПереносаКоличество Цикл
			СтрокаТаблицы = ТаблицаПлана.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПереноса);
		КонецЦикла;
		
		СтрокиПереносаСумма = ТаблицаПереносаСумма.НайтиСтроки(Новый Структура("Задача", ЭлементСпискаПроекта.Значение.Задача));
		Для Каждого СтрокаПереноса ИЗ СтрокиПереносаСумма Цикл
			СтрокаТаблицы = ТаблицаПлана.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПереноса);
		КонецЦикла;
	КонецЦикла;
	
	МассивПлана = Новый Массив;
	ТаблицаПлана.Свернуть(СтрокаСвертки, "Количество, Сумма, СуммаУпр");
	Для Каждого СтрокаТаблицы ИЗ ТаблицаПлана Цикл
		СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
		СтруктураЗаписи.Вставить("Количество");
		СтруктураЗаписи.Вставить("Сумма");
		СтруктураЗаписи.Вставить("СуммаУпр");
		ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаТаблицы);
		МассивПлана.Добавить(СтруктураЗаписи);
	КонецЦикла;
	Возврат МассивПлана;
КонецФункции

&НаСервере
Функция ПеренестиПланыИзЮридическогоДоговора(УИД)
	СтрокаТаблицы = Неопределено;
	Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаПроекта.УИД = УИД Тогда
			СтрокаТаблицы = СтрокаПроекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаТаблицы = Неопределено ИЛИ СтрокаТаблицы.Идентификатор < 0 Тогда
		Возврат Новый Структура;
	КонецЕсли;
	СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЮридическийДоговор = СтрокаТаблицы.Договор;
	
	СтрокаСумм = "";
	СтрокаВалют = "";
	СтрокаПланы = "";
	Если ЮридическийДоговор.ПланДДС.Количество() > 0 Тогда
		Для Каждого СтрокаПланаДоговора ИЗ ЮридическийДоговор.ПланДДС Цикл
			СтрокаПлана = СтрокаДерева.ПланДвиженияДенежныхСредств.Добавить();
			СтрокаПлана.ГУИД = Новый УникальныйИдентификатор;
			Если СтрокаПланаДоговора.Направление = ПредопределенноеЗначение("Перечисление.грзнтНаправлениеДвиженияДенежныхСредств.Выплата") Тогда
				СтрокаПлана.Картинка = 1;
				Если Найти(СтрокаСумм, "СуммаВыплата") = 0 Тогда
					СтрокаСумм = СтрокаСумм + ", СуммаВыплата, СуммаВыплатаУпр";
					СтрокаВалют = СтрокаВалют + ", ВалютаВыплат";
				КонецЕсли;
			Иначе
				Если Найти(СтрокаСумм, "СуммаПоступление") = 0 Тогда
					СтрокаСумм = СтрокаСумм + ", СуммаПоступление, СуммаПоступлениеУпр";
					СтрокаВалют = СтрокаВалют + ", ВалютаПоступлений";
				КонецЕсли;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаПланаДоговора);
			СтрокаПлана.СтатьяДвиженияДенежныхСредств = СтрокаПланаДоговора.Статья;
			СтрокаПлана.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
			
			СтрокаПланы = "" + СтрокаПланы + ", ПланДвиженияДенежныхСредств";
		КонецЦикла;
	КонецЕсли;
	
	Если ЮридическийДоговор.ПланДоходы.Количество() > 0 Тогда
		СтрокаСумм = СтрокаСумм + ", СуммаДоход, СуммаДоходУпр";
		СтрокаВалют = СтрокаВалют + ", ВалютаДоходов";
		Для Каждого СтрокаПланаДоговора ИЗ ЮридическийДоговор.ПланДоходы Цикл
			СтрокаПлана = СтрокаДерева.ПланДоходов.Добавить();
			СтрокаПлана.ГУИД = Новый УникальныйИдентификатор;
			ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаПланаДоговора);
			СтрокаПлана.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
			
			СтрокаПланы = "" + СтрокаПланы + ", ПланДоходов";
		КонецЦикла;
	КонецЕсли;
	
	Если ЮридическийДоговор.ПланРасходы.Количество() > 0 Тогда
		СтрокаСумм = СтрокаСумм + ", СуммаРасход, СуммаРасходУпр";
		СтрокаВалют = СтрокаВалют + ", ВалютаРасходов";
		Для Каждого СтрокаПланаДоговора ИЗ ЮридическийДоговор.ПланРасходы Цикл
			СтрокаПлана = СтрокаДерева.ПланРасходов.Добавить();
			СтрокаПлана.ГУИД = Новый УникальныйИдентификатор;
			ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаПланаДоговора);
			СтрокаПлана.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
			
			СтрокаПланы = "" + СтрокаПланы + ", ПланРасходов";
		КонецЦикла;
	КонецЕсли;
	
	СтрокаСумм = Сред(СтрокаСумм, 3);
	СтрокаВалют = Сред(СтрокаВалют, 3);
	СтрокаПланы = Сред(СтрокаПланы, 3);
	Возврат Новый Структура("СтрокаСумм, СтрокаВалют, СтрокаПланы", СтрокаСумм, СтрокаВалют, СтрокаПланы);
КонецФункции

&НаСервере
Функция ПеренестиПланыИзТехнологическогоПроцесса(УИД)
	СтрокаТаблицы = Неопределено;
	Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаПроекта.УИД = УИД Тогда
			СтрокаТаблицы = СтрокаПроекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаТаблицы = Неопределено ИЛИ СтрокаТаблицы.Идентификатор < 0 Тогда
		Возврат Новый Структура;
	КонецЕсли;
	СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	СтрокаСумм = "";
	СтрокаСуммТрудозатрат = "";
	
	ТехнологическийПроцесс = СтрокаТаблицы.Техпроцесс;
	Если ТехнологическийПроцесс.ПланТрудозатрат.Количество() > 0 Тогда
		СтрокаСумм = "КоличествоРоли, СуммаРоли";
		СтрокаСуммТрудозатрат = "ПроцентПлановыхТрудозатрат";
		Для Каждого СтрокаПланаДоговора ИЗ ТехнологическийПроцесс.ПланТрудозатрат Цикл
			СтрокаПлана = СтрокаДерева.ПланРолейОбщая.Добавить();
			СтрокаПлана.ГУИД = Новый УникальныйИдентификатор;
			ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаПланаДоговора);
			СтрокаПлана.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		КонецЦикла;
	КонецЕсли;

	Возврат Новый Структура("СтрокаСумм, СтрокаСуммТрудозатрат", СтрокаСумм, СтрокаСуммТрудозатрат);
КонецФункции

&НаСервере
Функция ПеренестиПланыИзУправленческойРаботы(УИД)
	СтрокаТаблицы = Неопределено;
	Для Каждого СтрокаПроекта ИЗ ТаблицаПроектаКопия Цикл
		Если СтрокаПроекта.УИД = УИД Тогда
			СтрокаТаблицы = СтрокаПроекта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаТаблицы = Неопределено ИЛИ СтрокаТаблицы.Идентификатор < 0 Тогда
		Возврат Новый Структура;
	КонецЕсли;
	СтрокаДерева = ДеревоПроекта.НайтиПоИдентификатору(СтрокаТаблицы.Идентификатор);
	Если СтрокаДерева = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	СтрокаСумм = "";
	СтрокаСуммТрудозатрат = "";
	
	УправленческаяРабота = СтрокаТаблицы.Работа;
	Если УправленческаяРабота.ПланТрудозатрат.Количество() > 0 Тогда
		СтрокаСумм = "КоличествоРоли, СуммаРоли";
		СтрокаСуммТрудозатрат = "ПроцентПлановыхТрудозатрат";
		Для Каждого СтрокаПланаДоговора ИЗ УправленческаяРабота.ПланТрудозатрат Цикл
			СтрокаПлана = СтрокаДерева.ПланРолейОбщая.Добавить();
			СтрокаПлана.ГУИД = Новый УникальныйИдентификатор;
			ЗаполнитьЗначенияСвойств(СтрокаПлана, СтрокаПланаДоговора);
			СтрокаПлана.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
		КонецЦикла;
	КонецЕсли;
	
	Возврат Новый Структура("СтрокаСумм, СтрокаСуммТрудозатрат", СтрокаСумм, СтрокаСуммТрудозатрат);
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПланыЮридическогоДоговора(ЮридическийДоговор)
	Возврат ЮридическийДоговор.ПланДДС.Количество() > 0 ИЛИ ЮридическийДоговор.ПланДоходы.Количество() > 0 ИЛИ ЮридическийДоговор.ПланРасходы.Количество() > 0;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПланыТехнологическогоПроцесса(ТехнологическийПроцесс)
	Возврат ТехнологическийПроцесс.ПланТрудозатрат.Количество() > 0;
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПланыУправленческойРаботы(УправленческаяРабота)
	Возврат УправленческаяРабота.ПланТрудозатрат.Количество() > 0;
КонецФункции

&НаКлиенте
Процедура ОбновитьБлокировкуПроекта() Экспорт
	ОбновитьБлокировкуПроектаНаСервере(Проект, ЭкземплярВерсии);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьБлокировкуПроектаНаСервере(Проект, ЭкземплярВерсии) Экспорт
	РСМЗ = РегистрыСведений.грзнтБлокировкаПроектаДляРедактирования.СоздатьМенеджерЗаписи();
	РСМЗ.Проект = Проект;
	РСМЗ.ЭкземплярВерсии = ЭкземплярВерсии;
	РСМЗ.ДатаБлокировки = ТекущаяДата();
	РСМЗ.Пользователь = ПараметрыСеанса.ТекущийПользователь;
	Попытка
		РСМЗ.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СнятьБлокировкуПроекта() Экспорт
	СнятьБлокировкуПроектаНаСервере(Проект, ЭкземплярВерсии);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СнятьБлокировкуПроектаНаСервере(Проект, ЭкземплярВерсии) Экспорт
	РСМЗ = РегистрыСведений.грзнтБлокировкаПроектаДляРедактирования.СоздатьМенеджерЗаписи();
	РСМЗ.Проект = Проект;
	РСМЗ.ЭкземплярВерсии = ЭкземплярВерсии;
	РСМЗ.Прочитать();
	Если РСМЗ.Выбран() Тогда
		Попытка
			РСМЗ.Удалить();
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
