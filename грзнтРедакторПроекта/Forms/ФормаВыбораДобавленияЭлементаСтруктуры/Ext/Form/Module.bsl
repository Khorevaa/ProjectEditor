
#Область ФормаИСобытия

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Параметры.Свойство("Справочник") Тогда
		Возврат;
	КонецЕсли;
	СправочникВыбора = Параметры.Справочник;
	Если СправочникВыбора = "грзнтПродукты" Тогда
		СправочникЭлементы = "грзнтВидыЭлементовПродукта";
	ИначеЕсли СправочникВыбора = "грзнтТехнологическиеПроцессы" Тогда
		СправочникЭлементы = "грзнтВидыЭлементовТехнологическихПроцессов";
	ИначеЕсли СправочникВыбора = "грзнтУправленческиеРаботы" Тогда
		СправочникЭлементы = "грзнтВидыЭлементовУправленческихРабот";
	ИначеЕсли СправочникВыбора = "грзнтЮридическиеДоговоры" Тогда
		СправочникЭлементы = "грзнтВидыЭлементовЮридическихДоговоров";
	КонецЕсли;
	СписокВыбора.ТекстЗапроса = СтрЗаменить(СписокВыбора.ТекстЗапроса, "грзнтПродукты", СправочникВыбора);
	СписокВыбора.ТекстЗапроса = СтрЗаменить(СписокВыбора.ТекстЗапроса, "грзнтВидыЭлементовПродукта", СправочникЭлементы);
	СписокВыбора.ОсновнаяТаблица = "Справочник." + СправочникВыбора;
	УстановитьВидимостьПереключателей();
	
	Параметры.Свойство("НаименованиеЗадачи", ЗадачаПроектаНаименование);
	Параметры.Свойство("УИД", ЗадачаПроектаУИД);
	Параметры.Свойство("КодСДР", ЗадачаПроектаКодСДР);
	Параметры.Свойство("НомерСтрокиПроекта", ЗадачаПроектаНомерСтрокиПроекта);
	Параметры.Свойство("Проект", ЗадачаПроектаПроект);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	//Вставить содержимое обработчика
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыборЗадачиПомещения" И ТипЗнч(Источник) = Тип("УправляемаяФорма") И Источник.ВладелецФормы = ЭтаФорма Тогда 
		СтандартнаяОбработка = Ложь;
		ЗадачаПроектаНаименованиеОбработкаВыбора(Элементы.ЗадачаПроектаНаименование, Параметр, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроектаНаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗакрыватьПриЗакрытииОкнаВладельца", Истина);
	СтруктураПараметров.Вставить("ТекущийУИД", ЗадачаПроектаУИД);
	СтруктураПараметров.Вставить("ПредшественникУИД", ЗадачаПроектаУИД);
	СтруктураПараметров.Вставить("Проект", ЗадачаПроектаПроект);
	СтруктураПараметров.Вставить("ИмяФормыРедактирования", ВладелецФормы.ПолучитьИмяОбъектаНаКлиенте() + ".Форма.ФормаВыбораЗадачи");
	СтруктураПараметров.Вставить("ОперацияВыбора", "ВыборЗадачиПомещения");
	ОткрытьФорму(СтруктураПараметров.ИмяФормыРедактирования, СтруктураПараметров, ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроектаНаименованиеОчистка(Элемент, СтандартнаяОбработка)
	ЗадачаПроектаКодСДР = "";
	ЗадачаПроектаНаименование = "";
	ЗадачаПроектаНомерСтрокиПроекта = 0;
	ЗадачаПроектаУИД = "";
КонецПроцедуры

&НаКлиенте
Процедура ЗадачаПроектаНаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗадачаПроектаУИД = "";
	ЗадачаПроектаНомерСтрокиПроекта = 0;
	ЗадачаПроектаКодСДР = "";
	Если НЕ ПустаяСтрока(ВыбранноеЗначение) Тогда
		ЗадачаПроектаНаименование = "";
		ЗадачаПроектаУИД = ВыбранноеЗначение;
		
		СтрокаТаблицы = ВладелецФормы.тСоответствиеТаблицыУИД.Получить(ЗадачаПроектаУИД);
		Если СтрокаТаблицы <> Неопределено Тогда
			ВыбранноеЗначение = СтрокаТаблицы.НаименованиеЗадачи;
			ЗадачаПроектаНомерСтрокиПроекта = СтрокаТаблицы.НомерСтрокиПроекта;
			ЗадачаПроектаКодСДР = СтрокаТаблицы.КодСДР;
		КонецЕсли;
	КонецЕсли;
	ЗадачаПроектаНаименование = ВыбранноеЗначение;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	КомандаВыбрать(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	ТекущаяСтрока = Элементы.СписокВыбора.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВыбора = Новый Структура;
	СтруктураВыбора.Вставить("Элемент", ТекущаяСтрока);
	СтруктураВыбора.Вставить("УИД", ЗадачаПроектаУИД);
	//СтруктураВыбора.Вставить("Проект", Проект);
	//СтруктураВыбора.Вставить("ЭкземплярВерсии", ЭкземплярВерсии);
	
	СтруктураВыбора.Вставить("ПереноситьВЭкземпляры", ПереноситьВЭкземпляры);
	СтруктураВыбора.Вставить("ПереноситьДДС", ПереноситьПланДДС);
	СтруктураВыбора.Вставить("ПереноситьДоходы", ПереноситьПланДоходов);
	СтруктураВыбора.Вставить("ПереноситьЗадачаВместеСПодчиненными", ПереноситьИерархию);
	//СтруктураВыбора.Вставить("ПереноситьМатериалы", ПереноситьМатериалы);
	СтруктураВыбора.Вставить("ПереноситьРасходы", ПереноситьПланРасходов);
	СтруктураВыбора.Вставить("ПереноситьСрокиИДлительность", ПереноситьДлительность);
	//СтруктураВыбора.Вставить("ПереноситьТрудозатратыПоРесурсам", ПереноситьТрудозатратыПоРесурсам);
	СтруктураВыбора.Вставить("ПереноситьТрудозатратыПоРолям", ПереноситьПланРолей);
	//СтруктураВыбора.Вставить("ПереноситьКомментарии", ПереноситьКомментарии);
	СтруктураВыбора.Вставить("ПереноситьСвязи", ПереноситьСвязи);
	СтруктураВыбора.Вставить("Справочник", СправочникВыбора);
	
	МассивЭкземпляров = Новый Массив;
	//Для Каждого ЭлементВидВерсии ИЗ ДеревоЭкземпляров.ПолучитьЭлементы() Цикл
	//	Для Каждого ЭлементЭкземпляр ИЗ ЭлементВидВерсии.ПолучитьЭлементы() Цикл
	//		Если ЭлементЭкземпляр.Пометка Тогда
	//			МассивЭкземпляров.Добавить(ЭлементЭкземпляр.ЭкземплярВерсии);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЦикла;
	СтруктураВыбора.Вставить("МассивЭкземпляров", МассивЭкземпляров);
	
	Оповестить("ВыборЭлементаСтруктурыДляДобавления", СтруктураВыбора, ЭтаФорма);
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновить(Команда)
	Элементы.СписокВыбора.Обновить();
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункции

&НаСервере
Функция УстановитьВидимостьПереключателей()
	Если СправочникВыбора = "грзнтПродукты" Тогда
		Элементы.ПереноситьИерархию.Видимость = Истина;
		Элементы.ПереноситьДлительность.Видимость = Ложь;
		Элементы.ПереноситьСвязи.Видимость = Ложь;
		Элементы.ПереноситьПланРолей.Видимость = Ложь;
		Элементы.ПереноситьПланДДС.Видимость = Ложь;
		Элементы.ПереноситьПланДоходов.Видимость = Ложь;
		Элементы.ПереноситьПланРасходов.Видимость = Ложь;
	ИначеЕсли СправочникВыбора = "грзнтТехнологическиеПроцессы" Тогда
		Элементы.ПереноситьИерархию.Видимость = Истина;
		Элементы.ПереноситьДлительность.Видимость = Истина;
		Элементы.ПереноситьСвязи.Видимость = Истина;
		Элементы.ПереноситьПланРолей.Видимость = Истина;
		Элементы.ПереноситьПланДДС.Видимость = Ложь;
		Элементы.ПереноситьПланДоходов.Видимость = Ложь;
		Элементы.ПереноситьПланРасходов.Видимость = Ложь;
	ИначеЕсли СправочникВыбора = "грзнтУправленческиеРаботы" Тогда
		Элементы.ПереноситьИерархию.Видимость = Истина;
		Элементы.ПереноситьДлительность.Видимость = Истина;
		Элементы.ПереноситьСвязи.Видимость = Истина;
		Элементы.ПереноситьПланРолей.Видимость = Истина;
		Элементы.ПереноситьПланДДС.Видимость = Ложь;
		Элементы.ПереноситьПланДоходов.Видимость = Ложь;
		Элементы.ПереноситьПланРасходов.Видимость = Ложь;
	ИначеЕсли СправочникВыбора = "грзнтЮридическиеДоговоры" Тогда
		Элементы.ПереноситьИерархию.Видимость = Истина;
		Элементы.ПереноситьДлительность.Видимость = Ложь;
		Элементы.ПереноситьСвязи.Видимость = Ложь;
		Элементы.ПереноситьПланРолей.Видимость = Ложь;
		Элементы.ПереноситьПланДДС.Видимость = Истина;
		Элементы.ПереноситьПланДоходов.Видимость = Истина;
		Элементы.ПереноситьПланРасходов.Видимость = Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ДополнитьСтруктуруВыбораДаннымиПереносаЭлементаСтруктурыПроекта(СтруктураВыбора)
	ЗапросЗадачи = Новый Запрос;
	ИмяСправочника = СтруктураВыбора.Справочник;
	Если ИмяСправочника = "грзнтПродукты" Тогда
		ИмяПредшественники = "СвязиПродуктов";
		ИмяПредшественник = "Предшественник";
		ИмяРегистра = "грзнтЗначенияРеквизитовЭлементовПродуктов";
	ИначеЕсли ИмяСправочника = "грзнтТехнологическиеПроцессы" Тогда
		ИмяПредшественники = "Предшественники";
		ИмяПредшественник = "ТехнологическийПроцесс";
		ИмяРегистра = "грзнтЗначенияРеквизитовЭлементовТехнологическихПроцессов";
	ИначеЕсли ИмяСправочника = "грзнтУправленческиеРаботы" Тогда
		ИмяПредшественники = "Предшественники";
		ИмяПредшественник = "УправленческаяРабота";
		ИмяРегистра = "грзнтЗначенияРеквизитовЭлементовУправленческихРабот";
	ИначеЕсли ИмяСправочника = "грзнтЮридическиеДоговоры" Тогда
		ИмяРегистра = "грзнтЗначенияРеквизитовЭлементовЮридическихДоговоров";
	КонецЕсли;
	
	ЗапросЗадачи.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СпрВыбора.Ссылка КАК Элемент,
	|	СпрВыбора.ПолноеНаименование,
	//|	ЗНАЧЕНИЕ(Справочник.грзнтВидыЭлементовПроекта.Задача) КАК ВидЭлемента,
	|	СпрВыбора.Родитель
	|ИЗ
	|	Справочник." + ИмяСправочника + " КАК СпрВыбора
	|ГДЕ
	|	СпрВыбора.Ссылка В ИЕРАРХИИ(&ЭлементСправочника)";
	ЗапросЗадачи.УстановитьПараметр("ЭлементСправочника", СтруктураВыбора.Элемент);
	ТаблицаПроектаИсточник = ЗапросЗадачи.Выполнить().Выгрузить();
	
	//?(СтруктураВыбора.ПереноситьИерархию
	ЗапросПланы = Новый Запрос;
	ЗапросПланы.Текст =
	"
	|" + ?(СтруктураВыбора.ПереноситьСрокиИДлительность, "ВЫБРАТЬ РАЗРЕШЕННЫЕ РегстрДлительность." + ИмяПредшественник + " КАК Элемент, РегистрДлительность.Длительность, РегистрДлительность.ЕдиницаВремени ИЗ РегистрСведений." + ИмяРегистра + ".СрезПоследних КАК РегистрДлительность ГДЕ РегистрДлительность." + ИмяПредшественник + " В ИЕРАРХИИ(&ЭлементСправочник)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьСвязи, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланПредшественник.Ссылка КАК Элемент, СправочникПланПредшественник.* ИЗ Справочник." + ИмяСправочника + "." + ИмяПредшественники + " КАК СправочникПланПредшественники ГДЕ СправочникПланПредшественники.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьТрудозатратыПоРолям, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланРолей.Ссылка КАК Элемент, СправочникПланРолей.* ИЗ Справочник." + ИмяСправочника + ".ПланТрудозатрат КАК СправочникПланРолей ГДЕ СправочникПланРолей.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьПланДДС, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланДДС.Ссылка КАК Элемент, СправочникПланДДС.* ИЗ Справочник." + ИмяСправочника + ".ПланДДС КАК СправочникПланДДС ГДЕ СправочникПланДДС.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьДоходы, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланДоходы.Ссылка КАК Элемент, СправочникПланДоходы.* ИЗ Справочник." + ИмяСправочника + ".ПланДоходы КАК СправочникПланДоходы ГДЕ СправочникПланДоходы.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + ";
	|" + ?(СтруктураВыбора.ПереноситьРасходы, "ВЫБРАТЬ РАЗРЕШЕННЫЕ СправочникПланРасходы.Ссылка КАК Элемент, СправочникПланРасходы.* ИЗ Справочник." + ИмяСправочника + ".ПланРасходы КАК СправочникПланРасходы ГДЕ СправочникПланРасходы.Ссылка В ИЕРАРХИИ (&ЭлементСправочника)", "ВЫБРАТЬ 0 ГДЕ ЛОЖЬ") + "
	|";
	ЗапросПланы.УстановитьПараметр("ЭлементСправочника", СтруктураВыбора.Элемент);
	МассивРезультатыПланы = ЗапросПланы.ВыполнитьПакет();
	// Сформируем просто список задач с наименованиями и видами операций
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("Элемент");
	ТаблицаЗадач.Колонки.Добавить("ПолноеНаименование");
	ТаблицаЗадач.Колонки.Добавить("Родитель");
	ТаблицаЗадач.Колонки.Добавить("ВидЭлемента");
	ТаблицаЗадач.Колонки.Добавить("НомерСтрокиПроекта");
	
	МассивЗадачДобавить = Новый Массив;
	// Найдём выбранную
	СтрокаТаблицы = ТаблицаПроектаИсточник.Найти(СтруктураВыбора.Элемент, "Элемент");
	НомерСтрокиПроекта = 1;
	
	МассивЗадачДобавить.Добавить(СтрокаТаблицы);
	Пока МассивЗадачДобавить.Количество() > 0 Цикл
		СтрокаТаблицы = ТаблицаЗадач.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, МассивЗадачДобавить.Получить(0), "Элемент, ПолноеНаименование");
		СтрокаРодитель = ТаблицаПроектаИсточник.Найти(СтрокаТаблицы.Родитель, "Элемент");
		// Принудительно очистим выбранному родителя (чтобы знать корень, какую мы импортировали)
		ТаблицаЗадач.Родитель = ?(СтрокаРодитель = Неопределено, ПредопределенноеЗначение("Справочник." + ИмяСправочника + ".ПустаяСсылка"), СтрокаРодитель.Элемент);
		ТаблицаЗадач.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.Задача");
		ТаблицаЗадач.НомерСтрокиПроекта = НомерСтрокиПроекта;
		НомерСтрокиПроекта = НомерСтрокиПроекта + 1;
		
		Если СтруктураВыбора.ПереноситьЗадачаВместеСПодчиненными Тогда
			СтрокиПодчиненные = ТаблицаПроектаИсточник.НайтиСтроки(Новый Структура("Родитель", МассивЗадачДобавить.Получить(0).Задача));
			Если СтрокиПодчиненные.Количество() > 0 Тогда
				СтрокаТаблицы.ВидЭлемента = ПредопределенноеЗначение("Справочник.грзнтВидыЭлементовПроекта.ГруппаЗадач");
			КонецЕсли;
			Для Каждого ПодчиненнаяСтрока ИЗ СтрокиПодчиненные Цикл
				МассивЗадачДобавить.Добавить(ПодчиненнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		МассивЗадачДобавить.Удалить(0);
	КонецЦикла;
	ТаблицаЗадач.Сортировать("НомерСтрокиПроекта");
	
	СписокЗадач = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы ИЗ ТаблицаЗадач Цикл
		СтруктураЗадачи = Новый Структура("Элемент, ПолноеНаименование, ВидЭлемента, Родитель");
		ЗаполнитьЗначенияСвойств(СтруктураЗадачи, СтрокаТаблицы);
		СписокЗадач.Добавить(СтруктураЗадачи);
	КонецЦикла;
	СтруктураВыбора.Вставить("СписокЗадач", СписокЗадач);
	
	// По одному будем переносить планы
	Если СтруктураВыбора.ПереноситьСрокиИДлительность Тогда
		МассивПлана = Новый Массив;
		// Шаблон структуры, всего раз определим
		СтруктураПереноса = Новый Структура("Элемент, Длительность, ЕдиницаВремени");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(0).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПлановыеСроки", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьДДС Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, Направление, Статья, ПрофильРаспределения, Сумма, Валюта, СпособПривязки, СтатьяДвиженияДенежныхСредств");
		
		
		
		ТаблицаПереноса = МассивРезультатыПланы.Получить(3).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				СтруктураЗаписи.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
				СтруктураЗаписи.СтатьяДвиженияДенежныхСредств = СтрокаПереноса.Статья;
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланДДС", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьДоходы Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, Статья, ПрофильРаспределения, Сумма, Валюта, СпособПривязки");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(4).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				СтруктураЗаписи.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланДоходы", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьРасходы Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, Статья, ПрофильРаспределения, Сумма, Валюта, СпособПривязки");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(5).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				СтруктураЗаписи.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланРасходы", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьТрудозатратыПоРолям Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, Роль, Количество, ЕдиницаВремени, ПрофильРаспределения, Сумма, Валюта, СпособПривязки");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(2).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				СтруктураЗаписи.СпособПривязки = ПредопределенноеЗначение("Перечисление.грзнтСпособПривязки.ПоПрофилюРаспределения");
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("ПланРРоли", МассивПлана);
	КонецЕсли;
	
	Если СтруктураВыбора.ПереноситьСвязи Тогда
		МассивПлана = Новый Массив;
		СтруктураПереноса = Новый Структура("Элемент, " + ИмяПредшественник + ", Задержка, ЕдиницаВремени, Календарь");
		ТаблицаПереноса = МассивРезультатыПланы.Получить(1).Выгрузить();
		Для Каждого ЭлементСпискаПроекта ИЗ СписокЗадач Цикл
			СтрокиПереноса = ТаблицаПереноса.НайтиСтроки(Новый Структура("Элемент", ЭлементСпискаПроекта.Значение.Элемент));
			Для Каждого СтрокаПереноса ИЗ СтрокиПереноса Цикл
				СтруктураЗаписи = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПереноса));
				ЗаполнитьЗначенияСвойств(СтруктураЗаписи, СтрокаПереноса);
				МассивПлана.Добавить(СтруктураЗаписи);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыбора.Вставить("Предшественники", МассивПлана);
	КонецЕсли;
КонецФункции

#КонецОбласти
